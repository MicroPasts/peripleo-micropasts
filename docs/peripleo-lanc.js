/*! For license information please see peripleo-lanc.js.LICENSE.txt */
(()=>{var e,t,n,r,o={800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'html,body,#app{padding:0;margin:0;min-height:100vh;overflow:hidden}html *,body *,#app *{font-family:"Quicksand",sans-serif}.p6o-hud{color:#3e3e3e}.p6o-hud .p6o-magic-button{position:absolute;left:20px;top:20px;width:60px;height:60px;font-size:34px;display:flex;align-items:center;justify-content:center;background-color:#f4f4f4;border:1px solid rgba(0,0,0,.2);box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(0,0,0,.14);z-index:9999;cursor:pointer;-webkit-border-radius:50%;-khtml-border-radius:50%;-moz-border-radius:50%;border-radius:50%}.p6o-hud .p6o-magic-button:hover{background-color:#fff;box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(255,255,255,.2)}.p6o-hud .p6o-hud-searchpanel{position:absolute;left:50px;top:22px;height:40px;padding-left:40px;box-sizing:border-box;background-color:#fcfcfc;box-shadow:inset 4px 1px 6px #fff,inset -1px -1px 2px rgba(0,0,0,.25),0 0 6px rgba(0,0,0,.1);border-radius:4px;overflow:hidden;z-index:0}.p6o-hud .p6o-hud-searchpanel input{outline:none;border:none;width:100%;height:100%;box-sizing:border-box;font-size:18px;outline:none;border:none;width:100%;height:100%;box-sizing:border-box;background-color:transparent}.p6o-map-container{position:relative;height:100vh}.p6o-map-container .p6o-map-hover{position:absolute;background-color:#fff;padding:10px 12px;max-width:500px;-webkit-border-radius:2px;-khtml-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-box-shadow:2px 2px 14px rgba(0,0,0,.4);-moz-box-shadow:2px 2px 14px rgba(0,0,0,.4);box-shadow:2px 2px 14px rgba(0,0,0,.4)}.p6o-map-container.hover *{cursor:pointer}',"",{version:3,sources:["webpack://./src/index.scss","webpack://./src/hud/HUD.scss","webpack://./src/map/Map.scss"],names:[],mappings:"AAAA,eACE,SAAA,CACA,QAAA,CACA,gBAAA,CACA,eAAA,CAEA,qBACE,kCAAA,CCPJ,SACE,aAAA,CAEA,2BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,wBAAA,CACA,+BAAA,CACA,+FAAA,CACA,YAAA,CACA,cAAA,CDHF,yBCI2B,CDH1B,wBCG0B,CDFxB,sBCEwB,CDDnB,iBCCmB,CAG3B,iCACE,qBAAA,CACA,oGAAA,CAGF,8BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,WAAA,CACA,iBAAA,CACA,qBAAA,CACA,wBAAA,CACA,4FAAA,CACA,iBAAA,CACA,eAAA,CACA,SAAA,CAEA,oCACE,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,4BAAA,CCnDN,mBACE,iBAAA,CACA,YAAA,CAEA,kCACE,iBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CFMF,yBEL2B,CFM1B,wBEN0B,CFOxB,sBEPwB,CFQnB,iBERmB,CFY3B,8CAAA,CACG,2CAAA,CACK,sCAAA,CERV,2BACE,cAAA",sourcesContent:["html, body, #app {\n  padding:0;\n  margin:0;\n  min-height:100vh;\n  overflow:hidden;\n  \n  * {\n    font-family:'Quicksand', sans-serif;\n  }\n\n}\n\n/** Mixins **/\n@mixin rounded-corners($radius) {\n  -webkit-border-radius:$radius;\n   -khtml-border-radius:$radius;\n     -moz-border-radius:$radius;\n          border-radius:$radius;\n}\n\n@mixin box-shadow($x, $y, $radius, $opacity) {\n  -webkit-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n     -moz-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n          box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n}\n\n@import './hud/HUD';\n@import './map/Map';",".p6o-hud {\n  color:#3e3e3e;\n\n  .p6o-magic-button {\n    position:absolute;\n    left:20px;\n    top:20px;\n    width:60px;\n    height:60px;\n    font-size:34px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    background-color:#f4f4f4;\n    border:1px solid rgba(0,0,0,0.2);\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(0,0,0,0.14);\n    z-index:9999;\n    cursor:pointer;\n    @include rounded-corners(50%);\n  }\n\n  .p6o-magic-button:hover {\n    background-color:#fff;\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(255,255,255,0.2);\n  }\n\n  .p6o-hud-searchpanel {\n    position:absolute;\n    left:50px;\n    top:22px;\n    height:40px;\n    padding-left:40px;\n    box-sizing:border-box;\n    background-color:#fcfCfc;\n    box-shadow:inset 4px 1px 6px #fff, inset -1px -1px 2px rgba(0,0,0,0.25), 0 0 6px rgba(0,0,0,0.1);\n    border-radius:4px;\n    overflow:hidden;\n    z-index:0;\n\n    input {\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      font-size:18px;\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      background-color:transparent;\n    }\n\n  }\n\n}",".p6o-map-container {\n  position:relative;\n  height:100vh;\n\n  .p6o-map-hover {\n    position:absolute;\n    background-color:#fff;\n    padding:10px 12px;\n    max-width:500px;\n    @include rounded-corners(2px);\n    @include box-shadow(2px, 2px, 14px, 0.4);\n  }\n\n}\n\n.p6o-map-container.hover * {\n  cursor:pointer;\n}"],sourceRoot:""}]);const l=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(a[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},245:e=>{e.exports=function(e){!function(e){if(!e)throw new Error("Eventify cannot use falsy object as events subject");for(var t=["on","fire","off"],n=0;n<t.length;++n)if(e.hasOwnProperty(t[n]))throw new Error("Subject cannot be eventified, since it already has property '"+t[n]+"'")}(e);var t=function(e){var t=Object.create(null);return{on:function(n,r,o){if("function"!=typeof r)throw new Error("callback is expected to be a function");var i=t[n];return i||(i=t[n]=[]),i.push({callback:r,ctx:o}),e},off:function(n,r){if(void 0===n)return t=Object.create(null),e;if(t[n])if("function"!=typeof r)delete t[n];else for(var o=t[n],i=0;i<o.length;++i)o[i].callback===r&&o.splice(i,1);return e},fire:function(n){var r,o=t[n];if(!o)return e;arguments.length>1&&(r=Array.prototype.splice.call(arguments,1));for(var i=0;i<o.length;++i){var a=o[i];a.callback.apply(a.ctx,r)}return e}}}(e);return e.on=t.on,e.off=t.off,e.fire=t.fire,e}},736:(e,t,n)=>{e.exports=function(e){if("uniqueLinkId"in(e=e||{})&&(console.warn("ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\nUse `multigraph` option instead\n","\n","Note: there is also change in default behavior: From now on each graph\nis considered to be not a multigraph by default (each edge is unique)."),e.multigraph=e.uniqueLinkId),void 0===e.multigraph&&(e.multigraph=!1),"function"!=typeof Map)throw new Error("ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph");var t,n=new Map,u=new Map,s={},c=0,f=e.multigraph?function(e,t,n){var r=l(e,t),o=s.hasOwnProperty(r);if(o||A(e,t)){o||(s[r]=0);var i="@"+ ++s[r];r=l(e+i,t+i)}return new a(e,t,n,r)}:function(e,t,n){var r=l(e,t),o=u.get(r);return o?(o.data=n,o):new a(e,t,n,r)},d=[],p=P,h=P,m=P,v=P,g={version:20,addNode:x,addLink:function(e,t,n){m();var r=w(e)||x(e),o=w(t)||x(t),a=f(e,t,n),l=u.has(a.id);return u.set(a.id,a),i(r,a),e!==t&&i(o,a),p(a,l?"update":"add"),v(),a},removeLink:function(e,t){return void 0!==t&&(e=A(e,t)),C(e)},removeNode:E,getNode:w,getNodeCount:k,getLinkCount:S,getEdgeCount:S,getLinksCount:S,getNodesCount:k,getLinks:function(e){var t=w(e);return t?t.links:null},forEachNode:M,forEachLinkedNode:function(e,t,r){var o=w(e);if(o&&o.links&&"function"==typeof t)return r?function(e,t,r){for(var o=e.values(),i=o.next();!i.done;){var a=i.value;if(a.fromId===t&&r(n.get(a.toId),a))return!0;i=o.next()}}(o.links,e,t):function(e,t,r){for(var o=e.values(),i=o.next();!i.done;){var a=i.value,l=a.fromId===t?a.toId:a.fromId;if(r(n.get(l),a))return!0;i=o.next()}}(o.links,e,t)},forEachLink:function(e){if("function"==typeof e)for(var t=u.values(),n=t.next();!n.done;){if(e(n.value))return!0;n=t.next()}},beginUpdate:m,endUpdate:v,clear:function(){m(),M((function(e){E(e.id)})),v()},hasLink:A,hasNode:w,getLink:A};return r(g),t=g.on,g.on=function(){return g.beginUpdate=m=_,g.endUpdate=v=T,p=y,h=b,g.on=t,t.apply(g,arguments)},g;function y(e,t){d.push({link:e,changeType:t})}function b(e,t){d.push({node:e,changeType:t})}function x(e,t){if(void 0===e)throw new Error("Invalid node identifier");m();var r=w(e);return r?(r.data=t,h(r,"update")):(r=new o(e,t),h(r,"add")),n.set(e,r),v(),r}function w(e){return n.get(e)}function E(e){var t=w(e);if(!t)return!1;m();var r=t.links;return r&&(r.forEach(C),t.links=null),n.delete(e),h(t,"remove"),v(),!0}function k(){return n.size}function S(){return u.size}function C(e){if(!e)return!1;if(!u.get(e.id))return!1;m(),u.delete(e.id);var t=w(e.fromId),n=w(e.toId);return t&&t.links.delete(e),n&&n.links.delete(e),p(e,"remove"),v(),!0}function A(e,t){if(void 0!==e&&void 0!==t)return u.get(l(e,t))}function P(){}function _(){c+=1}function T(){0==(c-=1)&&d.length>0&&(g.fire("changed",d),d.length=0)}function M(e){if("function"!=typeof e)throw new Error("Function is expected to iterate over graph nodes. You passed "+e);for(var t=n.values(),r=t.next();!r.done;){if(e(r.value))return!0;r=t.next()}}};var r=n(245);function o(e,t){this.id=e,this.links=null,this.data=t}function i(e,t){e.links?e.links.add(t):e.links=new Set([t])}function a(e,t,n,r){this.fromId=e,this.toId=t,this.data=n,this.id=r}function l(e,t){return e.toString()+"👉 "+t.toString()}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},582:function(e){e.exports=function(){"use strict";function e(e,r,o,i,a){!function e(n,r,o,i,a){for(;i>o;){if(i-o>600){var l=i-o+1,u=r-o+1,s=Math.log(l),c=.5*Math.exp(2*s/3),f=.5*Math.sqrt(s*c*(l-c)/l)*(u-l/2<0?-1:1);e(n,r,Math.max(o,Math.floor(r-u*c/l+f)),Math.min(i,Math.floor(r+(l-u)*c/l+f)),a)}var d=n[r],p=o,h=i;for(t(n,o,r),a(n[i],d)>0&&t(n,o,i);p<h;){for(t(n,p,h),p++,h--;a(n[p],d)<0;)p++;for(;a(n[h],d)>0;)h--}0===a(n[o],d)?t(n,o,h):t(n,++h,i),h<=r&&(o=h+1),r<=h&&(i=h-1)}}(e,r,o||0,i||e.length-1,a||n)}function t(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function n(e,t){return e<t?-1:e>t?1:0}var r=function(e){void 0===e&&(e=9),this._maxEntries=Math.max(4,e),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function o(e,t,n){if(!n)return t.indexOf(e);for(var r=0;r<t.length;r++)if(n(e,t[r]))return r;return-1}function i(e,t){a(e,0,e.children.length,t,e)}function a(e,t,n,r,o){o||(o=h(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var i=t;i<n;i++){var a=e.children[i];l(o,e.leaf?r(a):a)}return o}function l(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function u(e,t){return e.minX-t.minX}function s(e,t){return e.minY-t.minY}function c(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function f(e){return e.maxX-e.minX+(e.maxY-e.minY)}function d(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function p(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function h(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function m(t,n,r,o,i){for(var a=[n,r];a.length;)if(!((r=a.pop())-(n=a.pop())<=o)){var l=n+Math.ceil((r-n)/o/2)*o;e(t,l,n,r,i),a.push(n,l,l,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(e){var t=this.data,n=[];if(!p(e,t))return n;for(var r=this.toBBox,o=[];t;){for(var i=0;i<t.children.length;i++){var a=t.children[i],l=t.leaf?r(a):a;p(e,l)&&(t.leaf?n.push(a):d(e,l)?this._all(a,n):o.push(a))}t=o.pop()}return n},r.prototype.collides=function(e){var t=this.data;if(!p(e,t))return!1;for(var n=[];t;){for(var r=0;r<t.children.length;r++){var o=t.children[r],i=t.leaf?this.toBBox(o):o;if(p(e,i)){if(t.leaf||d(e,i))return!0;n.push(o)}}t=n.pop()}return!1},r.prototype.load=function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0;t<e.length;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(e){return e&&this._insert(e,this.data.height-1),this},r.prototype.clear=function(){return this.data=h([]),this},r.prototype.remove=function(e,t){if(!e)return this;for(var n,r,i,a=this.data,l=this.toBBox(e),u=[],s=[];a||u.length;){if(a||(a=u.pop(),r=u[u.length-1],n=s.pop(),i=!0),a.leaf){var c=o(e,a.children,t);if(-1!==c)return a.children.splice(c,1),u.push(a),this._condense(u),this}i||a.leaf||!d(a,l)?r?(n++,a=r.children[n],i=!1):a=null:(u.push(a),s.push(n),n=0,r=a,a=a.children[0])}return this},r.prototype.toBBox=function(e){return e},r.prototype.compareMinX=function(e,t){return e.minX-t.minX},r.prototype.compareMinY=function(e,t){return e.minY-t.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(e){return this.data=e,this},r.prototype._all=function(e,t){for(var n=[];e;)e.leaf?t.push.apply(t,e.children):n.push.apply(n,e.children),e=n.pop();return t},r.prototype._build=function(e,t,n,r){var o,a=n-t+1,l=this._maxEntries;if(a<=l)return i(o=h(e.slice(t,n+1)),this.toBBox),o;r||(r=Math.ceil(Math.log(a)/Math.log(l)),l=Math.ceil(a/Math.pow(l,r-1))),(o=h([])).leaf=!1,o.height=r;var u=Math.ceil(a/l),s=u*Math.ceil(Math.sqrt(l));m(e,t,n,s,this.compareMinX);for(var c=t;c<=n;c+=s){var f=Math.min(c+s-1,n);m(e,c,f,u,this.compareMinY);for(var d=c;d<=f;d+=u){var p=Math.min(d+u-1,f);o.children.push(this._build(e,d,p,r-1))}}return i(o,this.toBBox),o},r.prototype._chooseSubtree=function(e,t,n,r){for(;r.push(t),!t.leaf&&r.length-1!==n;){for(var o=1/0,i=1/0,a=void 0,l=0;l<t.children.length;l++){var u=t.children[l],s=c(u),f=(d=e,p=u,(Math.max(p.maxX,d.maxX)-Math.min(p.minX,d.minX))*(Math.max(p.maxY,d.maxY)-Math.min(p.minY,d.minY))-s);f<i?(i=f,o=s<o?s:o,a=u):f===i&&s<o&&(o=s,a=u)}t=a||t.children[0]}var d,p;return t},r.prototype._insert=function(e,t,n){var r=n?e:this.toBBox(e),o=[],i=this._chooseSubtree(r,this.data,t,o);for(i.children.push(e),l(i,r);t>=0&&o[t].children.length>this._maxEntries;)this._split(o,t),t--;this._adjustParentBBoxes(r,o,t)},r.prototype._split=function(e,t){var n=e[t],r=n.children.length,o=this._minEntries;this._chooseSplitAxis(n,o,r);var a=this._chooseSplitIndex(n,o,r),l=h(n.children.splice(a,n.children.length-a));l.height=n.height,l.leaf=n.leaf,i(n,this.toBBox),i(l,this.toBBox),t?e[t-1].children.push(l):this._splitRoot(n,l)},r.prototype._splitRoot=function(e,t){this.data=h([e,t]),this.data.height=e.height+1,this.data.leaf=!1,i(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(e,t,n){for(var r,o,i,l,u,s,f,d=1/0,p=1/0,h=t;h<=n-t;h++){var m=a(e,0,h,this.toBBox),v=a(e,h,n,this.toBBox),g=(o=m,i=v,void 0,void 0,void 0,void 0,l=Math.max(o.minX,i.minX),u=Math.max(o.minY,i.minY),s=Math.min(o.maxX,i.maxX),f=Math.min(o.maxY,i.maxY),Math.max(0,s-l)*Math.max(0,f-u)),y=c(m)+c(v);g<d?(d=g,r=h,p=y<p?y:p):g===d&&y<p&&(p=y,r=h)}return r||n-t},r.prototype._chooseSplitAxis=function(e,t,n){var r=e.leaf?this.compareMinX:u,o=e.leaf?this.compareMinY:s;this._allDistMargin(e,t,n,r)<this._allDistMargin(e,t,n,o)&&e.children.sort(r)},r.prototype._allDistMargin=function(e,t,n,r){e.children.sort(r);for(var o=this.toBBox,i=a(e,0,t,o),u=a(e,n-t,n,o),s=f(i)+f(u),c=t;c<n-t;c++){var d=e.children[c];l(i,e.leaf?o(d):d),s+=f(i)}for(var p=n-t-1;p>=t;p--){var h=e.children[p];l(u,e.leaf?o(h):h),s+=f(u)}return s},r.prototype._adjustParentBBoxes=function(e,t,n){for(var r=n;r>=0;r--)l(t[r],e)},r.prototype._condense=function(e){for(var t=e.length-1,n=void 0;t>=0;t--)0===e[t].children.length?t>0?(n=e[t-1].children).splice(n.indexOf(e[t]),1):this.clear():i(e[t],this.toBBox)},r}()},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,k=60106,S=60107,C=60108,A=60114,P=60109,_=60110,T=60112,M=60113,L=60120,O=60115,R=60116,N=60121,z=60128,j=60129,I=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;E=V("react.element"),k=V("react.portal"),S=V("react.fragment"),C=V("react.strict_mode"),A=V("react.profiler"),P=V("react.provider"),_=V("react.context"),T=V("react.forward_ref"),M=V("react.suspense"),L=V("react.suspense_list"),O=V("react.memo"),R=V("react.lazy"),N=V("react.block"),V("react.scope"),z=V("react.opaque.id"),j=V("react.debug_trace_mode"),I=V("react.offscreen"),D=V("react.legacy_hidden")}var F,B="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function Y(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case A:return"Profiler";case C:return"StrictMode";case M:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case O:return X(e.type);case N:return X(e._render);case R:t=e._payload,e=e._init;try{return X(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Z(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function se(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,Pe=null,_e=null;function Te(e){if(e=no(e)){if("function"!=typeof Ae)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Ae(e.stateNode,e.type,t))}}function Me(e){Pe?_e?_e.push(e):_e=[e]:Pe=e}function Le(){if(Pe){var e=Pe,t=_e;if(_e=Pe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Oe(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ne(){}var ze=Oe,je=!1,Ie=!1;function De(){null===Pe&&null===_e||(Ne(),Le())}function Ve(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Fe=!1}function Ue(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,Ye=null,Xe={onError:function(e){$e=!0,We=e}};function qe(e,t,n,r,o,i,a,l,u){$e=!1,We=null,Ue.apply(Xe,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Qe(e)!==e)throw Error(a(188))}function Ke(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function wt(e){function t(t){return xt(t,e)}if(0<it.length){xt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==lt&&xt(lt,e),null!==ut&&xt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},St={},Ct={};function At(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return St[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Pt=At("animationend"),_t=At("animationiteration"),Tt=At("animationstart"),Mt=At("transitionend"),Lt=new Map,Ot=new Map,Rt=["abort","abort",Pt,"animationEnd",_t,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Ot.set(r,t),Lt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var zt=8;function jt(e){if(0!=(1&e))return zt=15,1;if(0!=(2&e))return zt=14,2;if(0!=(4&e))return zt=13,4;var t=24&e;return 0!==t?(zt=12,t):0!=(32&e)?(zt=11,32):0!=(t=192&e)?(zt=10,t):0!=(256&e)?(zt=9,256):0!=(t=3584&e)?(zt=8,t):0!=(4096&e)?(zt=7,4096):0!=(t=4186112&e)?(zt=6,t):0!=(t=62914560&e)?(zt=5,t):67108864&e?(zt=4,67108864):0!=(134217728&e)?(zt=3,134217728):0!=(t=805306368&e)?(zt=2,t):0!=(1073741824&e)?(zt=1,1073741824):(zt=8,e)}function It(e,t){var n=e.pendingLanes;if(0===n)return zt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=zt=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=jt(u),o=zt):0!=(l&=i)&&(r=jt(l),o=zt)}else 0!=(i=n&~a)?(r=jt(i),o=zt):0!==l&&(r=jt(l),o=zt);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(jt(t),o<=zt)return t;zt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Vt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Vt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Vt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,Yt=i.unstable_UserBlockingPriority,Xt=i.unstable_runWithPriority,qt=!0;function Qt(e,t,n,r){je||Ne();var o=Gt,i=je;je=!0;try{Re(o,e,t,n,r)}finally{(je=i)||De()}}function Zt(e,t,n,r){Xt(Yt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(qt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Kt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,mt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Kt(e,t,n,r){var o=Ce(r);if(null!==(o=to(o))){var i=Qe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ze(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(mn),gn=ln(o({},mn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),wn=ln(xn),En=ln(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function An(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Pn(){return An}var _n=o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=ln(_n),Mn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),On=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=ln(Rn),zn=[9,13,27,32],jn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Dn=f&&"TextEvent"in window&&!In,Vn=f&&(!jn||In&&8<In&&11>=In),Fn=String.fromCharCode(32),Bn=!1;function Un(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Xn(e,t,n,r){Me(r),0<(t=jr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Zn(e){_r(e,0)}function Gn(e){if(G(ro(e)))return e}function Kn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){qn&&(qn.detachEvent("onpropertychange",or),Qn=qn=null)}function or(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];if(Xn(t,Qn,e,Ce(e)),e=Zn,je)e(t);else{je=!0;try{Oe(e,t)}finally{je=!1,De()}}}}function ir(e,t,n){"focusin"===e?(rr(),Qn=n,(qn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function lr(e,t){if("click"===e)return Gn(t)}function ur(e,t){if("input"===e||"change"===e)return Gn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,xr=null,wr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wr||null==yr||yr!==K(r)||(r="selectionStart"in(r=yr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&fr(xr,r)||(xr=r,0<(r=jr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(Rt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)Ot.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ar=new Set("cancel close invalid load scroll toggle".split(" ").concat(Cr));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(qe.apply(this,arguments),$e){if(!$e)throw Error(a(198));var c=We;$e=!1,We=null,He||(He=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Pr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Pr(o,l,s),i=u}}}if(He)throw e=Ye,He=!1,Ye=null,e}function Tr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Lr(e){e[Mr]||(e[Mr]=!0,l.forEach((function(t){Ar.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Ar.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Rr(i,e,o,t),a.add(l))}function Rr(e,t,n,r){var o=Ot.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=Zt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=to(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ie)return e();Ie=!0;try{ze(e,t,n)}finally{Ie=!1,De()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ln;break;case Pt:case _t:case Tt:u=bn;break;case Mt:u=On;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Mn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ve(h,d))&&c.push(zr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!to(s)&&!s[Jr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?to(s):null)&&(s!==(f=Qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Mn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ro(u),p=null==s?l:ro(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==u&&Dr(a,l,u,c,!1),null!==s&&null!==f&&Dr(a,f,s,c,!0)}if("select"===(u=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if(Yn(l))if(Jn)v=ur;else{v=ar;var g=ir}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=lr);switch(v&&(v=v(e,r))?Xn(a,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?ro(r):window,e){case"focusin":(Yn(g)||"true"===g.contentEditable)&&(yr=g,br=r,xr=null);break;case"focusout":xr=br=yr=null;break;case"mousedown":wr=!0;break;case"contextmenu":case"mouseup":case"dragend":wr=!1,Er(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":Er(a,n,o)}var y;if(jn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Vn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(g=jr(r,b)).length&&(b=new En(b,e,null,n,o),a.push({event:b,listeners:g}),(y||null!==(y=$n(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Bn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!jn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=jr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}_r(a,t)}))}function zr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ve(e,n))&&r.unshift(zr(e,i,o)),null!=(i=Ve(e,t))&&r.push(zr(e,i,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Ve(n,i))&&a.unshift(zr(n,u,l)):o||null!=(u=Ve(n,i))&&a.push(zr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Vr(){}var Fr=null,Br=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function $r(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Xr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Zr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Zr,Kr="__reactProps$"+Zr,Jr="__reactContainer$"+Zr,eo="__reactEvents$"+Zr;function to(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Gr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Gr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Kr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],lo=-1;function uo(e){return{current:e}}function so(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function co(e,t){lo++,ao[lo]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return null!=e.childContextTypes}function yo(){so(ho),so(po)}function bo(e,t,n){if(po.current!==fo)throw Error(a(168));co(po,t),co(ho,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,X(t)||"Unknown",i));return o({},n,r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=xo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,so(ho),so(po),co(po,e)):so(ho),co(ho,n)}var ko=null,So=null,Co=i.unstable_runWithPriority,Ao=i.unstable_scheduleCallback,Po=i.unstable_cancelCallback,_o=i.unstable_shouldYield,To=i.unstable_requestPaint,Mo=i.unstable_now,Lo=i.unstable_getCurrentPriorityLevel,Oo=i.unstable_ImmediatePriority,Ro=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,zo=i.unstable_LowPriority,jo=i.unstable_IdlePriority,Io={},Do=void 0!==To?To:function(){},Vo=null,Fo=null,Bo=!1,Uo=Mo(),$o=1e4>Uo?Mo:function(){return Mo()-Uo};function Wo(){switch(Lo()){case Oo:return 99;case Ro:return 98;case No:return 97;case zo:return 96;case jo:return 95;default:throw Error(a(332))}}function Ho(e){switch(e){case 99:return Oo;case 98:return Ro;case 97:return No;case 96:return zo;case 95:return jo;default:throw Error(a(332))}}function Yo(e,t){return e=Ho(e),Co(e,t)}function Xo(e,t,n){return e=Ho(e),Ao(e,t,n)}function qo(){if(null!==Fo){var e=Fo;Fo=null,Po(e)}Qo()}function Qo(){if(!Bo&&null!==Vo){Bo=!0;var e=0;try{var t=Vo;Yo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Vo=null}catch(t){throw null!==Vo&&(Vo=Vo.slice(e+1)),Ao(Oo,qo),t}finally{Bo=!1}}}var Zo=w.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=uo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Ko.current;so(Ko),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ja=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var li=!1;function ui(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function si(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,r){var i=e.updateQueue;li=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:li=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Dl|=l,e.lanes=l,e.memoizedState=d}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=su(),r=cu(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),fi(e,o),fu(e,r,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,i))}function bi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=go(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function xi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ui(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=go(t)?mo:po.current,o.context=vo(e,i)),pi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&gi.enqueueReplaceState(o,o.state,null),pi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ei=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ci(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=$u(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=qu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case k:return(t=qu(t,e.mode,n)).return=e,t}if(Ei(t)||U(t))return(t=Hu(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(Ei(n)||U(n))return null!==o?null:f(e,t,n,r,null);Si(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ei(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);Si(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=U(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,s))&&(l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===S&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case E:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag){if(i.type===S){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}}else if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=ki(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===S?((r=Hu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Wu(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return l(e);case k:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=qu(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xu(i,e.mode,u)).return=e,e=r),l(e);if(Ei(i))return m(e,r,i,u);if(U(i))return v(e,r,i,u);if(c&&Si(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,X(e.type)||"Component"))}return n(e,r)}}var Ai=Ci(!0),Pi=Ci(!1),_i={},Ti=uo(_i),Mi=uo(_i),Li=uo(_i);function Oi(e){if(e===_i)throw Error(a(174));return e}function Ri(e,t){switch(co(Li,t),co(Mi,e),co(Ti,_i),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(Ti),co(Ti,t)}function Ni(){so(Ti),so(Mi),so(Li)}function zi(e){Oi(Li.current);var t=Oi(Ti.current),n=pe(t,e.type);t!==n&&(co(Mi,e),co(Ti,n))}function ji(e){Mi.current===e&&(so(Ti),so(Mi))}var Ii=uo(0);function Di(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Vi=null,Fi=null,Bi=!1;function Ui(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function $i(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wi(e){if(Bi){var t=Fi;if(t){var n=t;if(!$i(e,t)){if(!(t=Xr(n.nextSibling))||!$i(e,t))return e.flags=-1025&e.flags|2,Bi=!1,void(Vi=e);Ui(Vi,n)}Vi=e,Fi=Xr(t.firstChild)}else e.flags=-1025&e.flags|2,Bi=!1,Vi=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Vi=e}function Yi(e){if(e!==Vi)return!1;if(!Bi)return Hi(e),Bi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$r(t,e.memoizedProps))for(t=Fi;t;)Ui(e,t),t=Xr(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fi=Xr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fi=null}}else Fi=Vi?Xr(e.stateNode.nextSibling):null;return!0}function Xi(){Fi=Vi=null,Bi=!1}var qi=[];function Qi(){for(var e=0;e<qi.length;e++)qi[e]._workInProgressVersionPrimary=null;qi.length=0}var Zi=w.ReactCurrentDispatcher,Gi=w.ReactCurrentBatchConfig,Ki=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Ki=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Zi.current=null===e||null===e.memoizedState?Oa:Ra,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Zi.current=Na,e=n(r,o)}while(ra)}if(Zi.current=La,t=null!==ea&&null!==ea.next,Ki=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function la(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function ua(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function sa(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.lane;if((Ki&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,Ji.lanes|=c,Dl|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,sr(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fa(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);sr(i,t.memoizedState)||(ja=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function da(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,qi.push(t))),e)return n(t._source);throw qi.push(t),Error(a(350))}function pa(e,t,n,r){var o=Ml;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),u=Zi.current,s=u.useState((function(){return da(o,t,n)})),c=s[1],f=s[0];s=ta;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ji;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!sr(l,e)){e=n(t._source),sr(f,e)||(c(e),e=cu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-$t(a),s=1<<u;r[u]|=e,a&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(m,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:f}).dispatch=c=Ma.bind(null,Ji,e),s.queue=e,s.baseQueue=null,f=da(o,t,n),s.memoizedState=s.baseState=f),f}function ha(e,t,n){return pa(ua(),e,t,n)}function ma(e){var t=la();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:e}).dispatch=Ma.bind(null,Ji,e),[t.memoizedState,e]}function va(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ga(e){return e={current:e},la().memoizedState=e}function ya(){return ua().memoizedState}function ba(e,t,n,r){var o=la();Ji.flags|=e,o.memoizedState=va(1|t,n,void 0,void 0===r?null:r)}function xa(e,t,n,r){var o=ua();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void va(t,n,i,r)}Ji.flags|=e,o.memoizedState=va(1|t,n,i,r)}function wa(e,t){return ba(516,4,e,t)}function Ea(e,t){return xa(516,4,e,t)}function ka(e,t){return xa(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(e,t,n){return n=null!=n?n.concat([e]):null,xa(4,2,Sa.bind(null,t,e),n)}function Aa(){}function Pa(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _a(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=Wo();Yo(98>n?98:n,(function(){e(!0)})),Yo(97<n?97:n,(function(){var n=Gi.transition;Gi.transition=1;try{e(!1),t()}finally{Gi.transition=n}}))}function Ma(e,t,n){var r=su(),o=cu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,sr(u,l))return}catch(e){}fu(e,o,r)}}var La={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Oa={readContext:ai,useCallback:function(e,t){return la().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=la();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=la();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ma.bind(null,Ji,e),[r.memoizedState,e]},useRef:ga,useState:ma,useDebugValue:Aa,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return wa((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ga(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=la();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(r,e,t,n)},useOpaqueIdentifier:function(){if(Bi){var e=!1,t=function(e){return{$$typeof:z,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,va(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},Ra={readContext:ai,useCallback:Pa,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:ka,useMemo:_a,useReducer:ca,useRef:ya,useState:function(){return ca(sa)},useDebugValue:Aa,useDeferredValue:function(e){var t=ca(sa),n=t[0],r=t[1];return Ea((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ca(sa)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(sa)[0]},unstable_isNewReconciler:!1},Na={readContext:ai,useCallback:Pa,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:ka,useMemo:_a,useReducer:fa,useRef:ya,useState:function(){return fa(sa)},useDebugValue:Aa,useDeferredValue:function(e){var t=fa(sa),n=t[0],r=t[1];return Ea((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=fa(sa)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return fa(sa)[0]},unstable_isNewReconciler:!1},za=w.ReactCurrentOwner,ja=!1;function Ia(e,t,n,r){t.child=null===e?Pi(t,null,n,r):Ai(t,e.child,n,r)}function Da(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||ja?(t.flags|=1,Ia(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Va(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Uu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Fa(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,i):(t.flags|=1,(e=$u(a,r)).ref=t.ref,e.return=t,t.child=e)}function Fa(e,t,n,r,o,i){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(ja=!1,0==(i&o))return t.lanes=e.lanes,nl(e,t,i);0!=(16384&e.flags)&&(ja=!0)}return $a(e,t,n,r,i)}function Ba(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Ia(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function $a(e,t,n,r,o){var i=go(n)?mo:po.current;return i=vo(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||ja?(t.flags|=1,Ia(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Wa(e,t,n,r,o){if(go(n)){var i=!0;wo(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?ai(s):vo(t,s=go(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&xi(t,a,r,s),li=!1;var d=t.memoizedState;a.state=d,pi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||ho.current||li?("function"==typeof c&&(vi(t,n,c,r),u=t.memoizedState),(l=li||yi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,si(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Go(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ai(u):vo(t,u=go(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&xi(t,a,r,u),li=!1,d=t.memoizedState,a.state=d,pi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||ho.current||li?("function"==typeof p&&(vi(t,n,p,r),h=t.memoizedState),(s=li||yi(t,n,s,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,i,o)}function Ha(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&Eo(t,n,!1),nl(e,t,i);r=t.stateNode,za.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ai(t,e.child,null,i),t.child=Ai(t,null,l,i)):Ia(e,t,l,i),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Ya(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ri(e,t.containerInfo)}var Xa,qa,Qa,Za={dehydrated:null,retryLane:0};function Ga(e,t,n){var r,o=t.pendingProps,i=Ii.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Ii,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Za,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Za,t.lanes=33554432,e):((n=Yu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=$u(a,l),null!==e?r=$u(e,r):(r=Hu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Za,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=$u(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Yu(t,o,0,null),n=Hu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function el(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Di(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Di(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,i,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=$u(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$u(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Bi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Ni(),so(ho),so(po),Qi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Yi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:ji(t);var i=Oi(Li.current);if(n=t.type,null!==e&&null!=t.stateNode)qa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oi(Ti.current),Yi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Kr]=l,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<Cr.length;e++)Tr(Cr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,l),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Tr("invalid",r);break;case"textarea":ue(r,l),Tr("invalid",r)}for(var s in ke(n,l),e=null,l)l.hasOwnProperty(s)&&(i=l[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Tr("scroll",r));switch(n){case"input":Z(r),re(r,l,!0);break;case"textarea":Z(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Vr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Xa(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),i=r;break;case"iframe":case"object":case"embed":Tr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Cr.length;i++)Tr(Cr[i],e);i=r;break;case"source":Tr("error",e),i=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),i=r;break;case"details":Tr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Tr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":ue(e,r),i=le(e,r),Tr("invalid",e);break;default:i=r}ke(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?we(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Tr("scroll",e):null!=f&&x(e,l,f,s))}switch(n){case"input":Z(e),re(e,r,!1);break;case"textarea":Z(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Vr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Oi(Li.current),Oi(Ti.current),Yi(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return so(Ii),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Yi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?0===zl&&(zl=3):(0!==zl&&3!==zl||(zl=4),null===Ml||0==(134217727&Dl)&&0==(134217727&Vl)||mu(Ml,Ol))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Lr(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(so(Ii),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==zl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Di(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Ii,1&Ii.current|2),t.child}e=e.sibling}null!==r.tail&&$o()>$l&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Di(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Bi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>$l&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=Ii.current,co(Ii,l?1&t|2:1&t),n):null;case 23:case 24:return xu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function il(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),so(ho),so(po),Qi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return ji(e),null;case 13:return so(Ii),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(Ii),null;case 4:return Ni(),null;case 10:return ri(e),null;case 23:case 24:return xu(),null;default:return null}}function al(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Oi(Ti.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Vr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Tr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===z?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xl||(Xl=!0,ql=r),ll(0,t)},n}function cl(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Iu(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Yr(t.stateNode.containerInfo))}throw Error(a(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))))}throw Error(a(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){Iu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Iu(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function gl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?xl(e,n,t):wl(e,n,t)}function xl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vr));else if(4!==r&&null!==(e=e.child))for(xl(e,t,n),e=e.sibling;null!==e;)xl(e,t,n),e=e.sibling}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(vl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?we(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ge(n,u):x(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=$o(),ml(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(a(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Al=Math.ceil,Pl=w.ReactCurrentDispatcher,_l=w.ReactCurrentOwner,Tl=0,Ml=null,Ll=null,Ol=0,Rl=0,Nl=uo(0),zl=0,jl=null,Il=0,Dl=0,Vl=0,Fl=0,Bl=null,Ul=0,$l=1/0;function Wl(){$l=$o()+500}var Hl,Yl=null,Xl=!1,ql=null,Ql=null,Zl=!1,Gl=null,Kl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,ou=-1,iu=0,au=0,lu=null,uu=!1;function su(){return 0!=(48&Tl)?$o():-1!==ou?ou:ou=$o()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===iu&&(iu=Il),0!==Zo.transition){0!==au&&(au=null!==Bl?Bl.pendingLanes:0),e=iu;var t=4186112&~au;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Vt(0!=(4&Tl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),iu)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(a(185));if(null===(e=du(e,t)))return null;Ut(e,t,n),e===Ml&&(Vl|=t,4===zl&&mu(e,Ol));var r=Wo();1===t?0!=(8&Tl)&&0==(48&Tl)?vu(e):(pu(e,n),0===Tl&&(Wl(),qo())):(0==(4&Tl)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Bl=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,jt(s);var f=zt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=It(e,e===Ml?Ol:0),t=zt,0===r)null!==n&&(n!==Io&&Po(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&Po(n)}15===t?(n=vu.bind(null,e),null===Vo?(Vo=[n],Fo=Ao(Oo,Qo)):Vo.push(n),n=Io):14===t?n=Xo(99,vu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Xo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,au=iu=0,0!=(48&Tl))throw Error(a(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=It(e,e===Ml?Ol:0);if(0===n)return null;var r=n,o=Tl;Tl|=16;var i=ku();for(Ml===e&&Ol===r||(Wl(),wu(e,r));;)try{Au();break}catch(t){Eu(e,t)}if(ni(),Pl.current=i,Tl=o,null!==Ll?r=0:(Ml=null,Ol=0,r=zl),0!=(Il&Vl))wu(e,0);else if(0!==r){if(2===r&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(n=Dt(e))&&(r=Su(e,n))),1===r)throw t=jl,wu(e,0),mu(e,n),pu(e,$o()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tu(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=Ul+500-$o())){if(0!==It(e,0))break;if(((o=e.suspendedLanes)&n)!==n){su(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Tu.bind(null,e),r);break}Tu(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=$o()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Al(n/1960))-n)){e.timeoutHandle=Wr(Tu.bind(null,e),n);break}Tu(e);break;default:throw Error(a(329))}}return pu(e,$o()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Fl,t&=~Vl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function vu(e){if(0!=(48&Tl))throw Error(a(327));if(Ou(),e===Ml&&0!=(e.expiredLanes&Ol)){var t=Ol,n=Su(e,t);0!=(Il&Vl)&&(n=Su(e,t=It(e,t)))}else n=Su(e,t=It(e,0));if(0!==e.tag&&2===n&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(t=Dt(e))&&(n=Su(e,t))),1===n)throw n=jl,wu(e,0),mu(e,t),pu(e,$o()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tu(e),pu(e,$o()),null}function gu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}}function yu(e,t){var n=Tl;Tl&=-2,Tl|=8;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}}function bu(e,t){co(Nl,Rl),Rl|=t,Il|=t}function xu(){Rl=Nl.current,so(Nl)}function wu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Ll)for(n=Ll.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Ni(),so(ho),so(po),Qi();break;case 5:ji(r);break;case 4:Ni();break;case 13:case 19:so(Ii);break;case 10:ri(r);break;case 23:case 24:xu()}n=n.return}Ml=e,Ll=$u(e.current,null),Ol=Rl=Il=t,zl=0,jl=null,Fl=Vl=Dl=0}function Eu(e,t){for(;;){var n=Ll;try{if(ni(),Zi.current=La,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Ki=0,ta=ea=Ji=null,ra=!1,_l.current=null,null===n||null===n.return){zl=1,jl=t,Ll=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Ol,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ci(-1,1);y.tag=2,fi(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ul,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var x=Du.bind(null,i,s,l);s.then(x,x)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((X(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==zl&&(zl=2),u=al(u,l),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,di(d,sl(0,i,t));break e;case 1:i=u;var w=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Ql||!Ql.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,di(d,cl(d,i,t));break e}}d=d.return}while(null!==d)}_u(n)}catch(e){t=e,Ll===n&&null!==n&&(Ll=n=n.return);continue}break}}function ku(){var e=Pl.current;return Pl.current=La,null===e?La:e}function Su(e,t){var n=Tl;Tl|=16;var r=ku();for(Ml===e&&Ol===t||wu(e,t);;)try{Cu();break}catch(t){Eu(e,t)}if(ni(),Tl=n,Pl.current=r,null!==Ll)throw Error(a(261));return Ml=null,Ol=0,zl}function Cu(){for(;null!==Ll;)Pu(Ll)}function Au(){for(;null!==Ll&&!_o();)Pu(Ll)}function Pu(e){var t=Hl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?_u(e):Ll=t,_l.current=null}function _u(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Rl)))return void(Ll=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=il(t)))return n.flags&=2047,void(Ll=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ll=t);Ll=t=e}while(null!==t);0===zl&&(zl=5)}function Tu(e){var t=Wo();return Yo(99,Mu.bind(null,e,t)),null}function Mu(e,t){do{Ou()}while(null!==Gl);if(0!=(48&Tl))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-$t(i),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,i&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ml&&(Ll=Ml=null,Ol=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Tl,Tl|=32,_l.current=null,Fr=qt,vr(l=mr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==u||0!==i&&3!==v.nodeType||(d=f+i),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===u&&++h===i&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Br={focusedElem:l,selectionRange:u},qt=!1,lu=null,uu=!1,Yl=r;do{try{Lu()}catch(e){if(null===Yl)throw Error(a(330));Iu(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);lu=null,Yl=r;do{try{for(l=e;null!==Yl;){var b=Yl.flags;if(16&b&&ge(Yl.stateNode,""),128&b){var x=Yl.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:bl(Yl),Yl.flags&=-3;break;case 6:bl(Yl),Yl.flags&=-3,kl(Yl.alternate,Yl);break;case 1024:Yl.flags&=-1025;break;case 1028:Yl.flags&=-1025,kl(Yl.alternate,Yl);break;case 4:kl(Yl.alternate,Yl);break;case 8:El(l,u=Yl);var E=u.alternate;gl(u),null!==E&&gl(E)}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(a(330));Iu(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);if(w=Br,x=mr(),b=w.focusedElem,l=w.selectionRange,x!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&vr(b)&&(x=l.start,void 0===(w=l.end)&&(w=x),"selectionStart"in b?(b.selectionStart=x,b.selectionEnd=Math.min(w,b.value.length)):(w=(x=b.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!w.extend&&E>l&&(u=l,l=E,E=u),u=pr(b,E),i=pr(b,l),u&&i&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==i.node||w.focusOffset!==i.offset)&&((x=x.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),E>l?(w.addRange(x),w.extend(i.node,i.offset)):(x.setEnd(i.node,i.offset),w.addRange(x))))),x=[];for(w=b;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<x.length;b++)(w=x[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!Fr,Br=Fr=null,e.current=n,Yl=r;do{try{for(b=e;null!==Yl;){var k=Yl.flags;if(36&k&&hl(b,Yl.alternate,Yl),128&k){x=void 0;var S=Yl.ref;if(null!==S){var C=Yl.stateNode;Yl.tag,x=C,"function"==typeof S?S(x):S.current=x}}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(a(330));Iu(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);Yl=null,Do(),Tl=o}else e.current=n;if(Zl)Zl=!1,Gl=e,Kl=t;else for(Yl=r;null!==Yl;)t=Yl.nextEffect,Yl.nextEffect=null,8&Yl.flags&&((k=Yl).sibling=null,k.stateNode=null),Yl=t;if(0===(r=e.pendingLanes)&&(Ql=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,$o()),Xl)throw Xl=!1,e=ql,ql=null,e;return 0!=(8&Tl)||qo(),null}function Lu(){for(;null!==Yl;){var e=Yl.alternate;uu||null===lu||(0!=(8&Yl.flags)?Je(Yl,lu)&&(uu=!0):13===Yl.tag&&Cl(e,Yl)&&Je(Yl,lu)&&(uu=!0));var t=Yl.flags;0!=(256&t)&&pl(e,Yl),0==(512&t)||Zl||(Zl=!0,Xo(97,(function(){return Ou(),null}))),Yl=Yl.nextEffect}}function Ou(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,Yo(e,zu)}return!1}function Ru(e,t){Jl.push(t,e),Zl||(Zl=!0,Xo(97,(function(){return Ou(),null})))}function Nu(e,t){eu.push(t,e),Zl||(Zl=!0,Xo(97,(function(){return Ou(),null})))}function zu(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&Tl))throw Error(a(331));var t=Tl;Tl|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Tl=t,qo(),!0}function ju(e,t,n){fi(e,t=sl(0,t=al(n,t),1)),t=su(),null!==(e=du(e,1))&&(Ut(e,1,t),pu(e,t))}function Iu(e,t){if(3===e.tag)ju(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){ju(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){var o=cl(n,e=al(t,e),1);if(fi(n,o),o=su(),null!==(n=du(n,1)))Ut(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Du(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=su(),e.pingedLanes|=e.suspendedLanes&n,Ml===e&&(Ol&n)===n&&(4===zl||3===zl&&(62914560&Ol)===Ol&&500>$o()-Ul?wu(e,0):Fl|=n),pu(e,t)}function Vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===iu&&(iu=Il),0===(t=Ft(62914560&~iu))&&(t=4194304))),n=su(),null!==(e=du(e,t))&&(Ut(e,t,n),pu(e,n))}function Fu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new Fu(e,t,n,r)}function Uu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $u(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Uu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Hu(n.children,o,i,t);case j:l=8,o|=16;break;case C:l=8,o|=1;break;case A:return(e=Bu(12,n,t,8|o)).elementType=A,e.type=A,e.lanes=i,e;case M:return(e=Bu(13,n,t,o)).type=M,e.elementType=M,e.lanes=i,e;case L:return(e=Bu(19,n,t,o)).elementType=L,e.lanes=i,e;case I:return Yu(n,o,i,t);case D:return(e=Bu(24,n,t,o)).elementType=D,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case _:l=9;break e;case T:l=11;break e;case O:l=14;break e;case R:l=16,r=null;break e;case N:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Bu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Hu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function Yu(e,t,n,r){return(e=Bu(23,e,r,t)).elementType=I,e.lanes=n,e}function Xu(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function qu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Zu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var o=t.current,i=su(),l=cu(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(go(s)){n=xo(n,s,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),fu(o,l,i),l}function Ku(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function es(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function ts(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Qu(e,t,null!=n&&!0===n.hydrate),t=Bu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ui(t),e[Jr]=n.current,Lr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function ns(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rs(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(a);l.call(e)}}Gu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ts(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(a);u.call(e)}}yu((function(){Gu(t,a,e,o)}))}return Ku(a)}function os(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ns(t))throw Error(a(200));return Zu(e,t,null,n)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)ja=!0;else{if(0==(n&r)){switch(ja=!1,t.tag){case 3:Ya(t),Xi();break;case 5:zi(t);break;case 1:go(t.type)&&wo(t);break;case 4:Ri(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ga(e,t,n):(co(Ii,1&Ii.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Ii,1&Ii.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Ii,Ii.current),r)break;return null;case 23:case 24:return t.lanes=0,Ba(e,t,n)}return nl(e,t,n)}ja=0!=(16384&e.flags)}else ja=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ui(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&vi(t,r,l,e),o.updater=gi,t.stateNode=o,o._reactInternals=t,wi(t,r,e,n),t=Ha(null,t,r,!0,i,n)}else t.tag=0,Ia(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Uu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===O)return 14}return 2}(o),e=Go(o,e),i){case 0:t=$a(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=Da(null,t,o,e,n);break e;case 14:t=Va(null,t,o,Go(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Ya(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,si(e,t),pi(t,r,null,n),(r=t.memoizedState.element)===o)Xi(),t=nl(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Fi=Xr(t.stateNode.containerInfo.firstChild),Vi=t,i=Bi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],qi.push(i);for(n=Pi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),Xi();t=t.child}return t;case 5:return zi(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,$r(r,o)?l=null:null!==i&&$r(r,i)&&(t.flags|=16),Ua(e,t),Ia(e,t,l,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Ga(e,t,n);case 4:return Ri(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ai(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(co(Ko,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0==(i=sr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ci(-1,n&-n)).tag=2,fi(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oi(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ia(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return i=Go(o=t.type,t.pendingProps),Va(e,t,o,i=Go(o.type,i),r,n);case 15:return Fa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(r)?(e=!0,wo(t)):e=!1,ii(t,n),bi(t,r,o),wi(t,r,o,n),Ha(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Ba(e,t,n)}throw Error(a(156,t.tag))},ts.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},ts.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,su()),es(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,su()),es(e,67108864))},nt=function(e){if(13===e.tag){var t=su(),n=cu(e);fu(e,n,t),es(e,n)}},rt=function(e,t){return t()},Ae=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Oe=gu,Re=function(e,t,n,r,o){var i=Tl;Tl|=4;try{return Yo(98,e.bind(null,t,n,r,o))}finally{0===(Tl=i)&&(Wl(),qo())}},Ne=function(){0==(49&Tl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,$o())}))}qo()}(),Ou())},ze=function(e,t){var n=Tl;Tl|=2;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}};var is={Events:[no,ro,oo,Me,Le,Ou,{current:!1}]},as={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ls={bundleType:as.bundleType,version:as.version,rendererPackageName:as.rendererPackageName,rendererConfig:as.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ke(e))?null:e.stateNode},findFiberByHostInstance:as.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var us=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!us.isDisabled&&us.supportsFiber)try{ko=us.inject(ls),So=us}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=is,t.createPortal=os,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ke(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Tl;if(0!=(48&n))return e(t);Tl|=1;try{if(e)return Yo(99,e.bind(null,t))}finally{Tl=n,qo()}},t.hydrate=function(e,t,n){if(!ns(t))throw Error(a(200));return rs(null,e,t,!0,n)},t.render=function(e,t,n){if(!ns(t))throw Error(a(200));return rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ns(e))throw Error(a(40));return!!e._reactRootContainer&&(yu((function(){rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=gu,t.unstable_createPortal=function(e,t){return os(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ns(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return rs(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+A(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+A(l=e[s],s);u+=P(l,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,n,c=r+A(l,s++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function L(){var e=M.current;if(null===e)throw Error(p(321));return e}var O={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!E.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?w.postMessage(null):(m=!1,v=null)}catch(e){throw w.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>C(a,n))void 0!==u&&0>C(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],P=[],_=1,T=null,M=3,L=!1,O=!1,R=!1;function N(e){for(var t=k(P);null!==t;){if(null===t.callback)S(P);else{if(!(t.startTime<=e))break;S(P),t.sortIndex=t.expirationTime,E(A,t)}t=k(P)}}function z(e){if(R=!1,N(e),!O)if(null!==k(A))O=!0,n(j);else{var t=k(P);null!==t&&r(z,t.startTime-e)}}function j(e,n){O=!1,R&&(R=!1,o()),L=!0;var i=M;try{for(N(n),T=k(A);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,M=T.priorityLevel;var l=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===k(A)&&S(A),N(n)}else S(A);T=k(A)}if(null!==T)var u=!0;else{var s=k(P);null!==s&&r(z,s.startTime-n),u=!1}return u}finally{T=null,M=i,L=!1}}var I=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){O||L||(O=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return k(A)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:_++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,E(P,e),null===k(A)&&e===k(P)&&(R?o():R=!0,r(z,a-l))):(e.sortIndex=u,E(A,e),O||L||(O=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=i[s]||0,f="".concat(s," ").concat(c);i[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var u=r(e,o),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,exports:{}};return o[e].call(n.exports,n,n.exports,a),n.exports}a.m=o,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".peripleo-lanc.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="peripleo-lanc:",a.l=(e,t,o,i)=>{if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={179:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var i=a.p+a.u(t),l=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[i,l,u]=n,s=0;if(i.some((t=>0!==e[t]))){for(r in l)a.o(l,r)&&(a.m[r]=l[r]);u&&u(a)}for(t&&t(n);s<i.length;s++)o=i[s],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkperipleo_lanc=self.webpackChunkperipleo_lanc||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=a(294),t=a(935);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}var r,o=r||(r={});o.Pop="POP",o.Push="PUSH",o.Replace="REPLACE";function i(e){e.preventDefault(),e.returnValue=""}function l(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function s(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function c(e,t){if(!e)throw new Error(t)}const f=(0,e.createContext)(null),d=(0,e.createContext)(null),p=(0,e.createContext)({outlet:null,matches:[]});function h(t){return function(t){let n=(0,e.useContext)(p).outlet;return n?(0,e.createElement)(b.Provider,{value:t},n):n}(t.context)}function m(e){c(!1)}function v(t){let{basename:n="/",children:o=null,location:i,navigationType:a=r.Pop,navigator:l,static:u=!1}=t;y()&&c(!1);let p=T(n),h=(0,e.useMemo)((()=>({basename:p,navigator:l,static:u})),[p,l,u]);"string"==typeof i&&(i=s(i));let{pathname:m="/",search:v="",hash:g="",state:b=null,key:x="default"}=i,w=(0,e.useMemo)((()=>{let e=P(m,p);return null==e?null:{pathname:e,search:v,hash:g,state:b,key:x}}),[p,m,v,g,b,x]);return null==w?null:(0,e.createElement)(f.Provider,{value:h},(0,e.createElement)(d.Provider,{children:o,value:{location:w,navigationType:a}}))}function g(t){let{children:n,location:r}=t;return function(t,n){y()||c(!1);let{matches:r}=(0,e.useContext)(p),o=r[r.length-1],i=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let l,u=(y()||c(!1),(0,e.useContext)(d).location);if(n){var f;let e="string"==typeof n?s(n):n;"/"===a||(null==(f=e.pathname)?void 0:f.startsWith(a))||c(!1),l=e}else l=u;let m=l.pathname||"/",v=function(e,t,n){void 0===n&&(n="/");let r=P(("string"==typeof t?s(t):t).pathname||"/",n);if(null==r)return null;let o=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=C(o[e],r);return i}(t,{pathname:"/"===a?m:m.slice(a.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,i)=>(0,e.createElement)(p.Provider,{children:void 0!==o.route.element?o.route.element:(0,e.createElement)(h,null),value:{outlet:r,matches:n.concat(t.slice(0,i+1))}})),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:_([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:_([a,e.pathnameBase])}))),r)}(x(n),r)}function y(){return null!=(0,e.useContext)(d)}const b=(0,e.createContext)(null);function x(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,x(t.props.children));t.type!==m&&c(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=x(t.props.children)),n.push(r)})),n}function w(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(r)||c(!1),i.relativePath=i.relativePath.slice(r.length));let a=_([r,i.relativePath]),l=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&c(!1),w(e.children,t,l,a)),(null!=e.path||e.index)&&t.push({path:a,score:S(a,e.index),routesMeta:l})})),t}const E=/^:\w+$/,k=e=>"*"===e;function S(e,t){let n=e.split("/"),r=n.length;return n.some(k)&&(r+=-2),t&&(r+=2),n.filter((e=>!k(e))).reduce(((e,t)=>e+(E.test(t)?3:""===t?1:10)),r)}function C(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",s=A({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=a.route;i.push({params:r,pathname:_([o,s.pathname]),pathnameBase:_([o,s.pathnameBase]),route:c}),"/"!==s.pathnameBase&&(o=_([o,s.pathnameBase]))}return i}function A(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(l[n]||""),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const _=e=>e.join("/").replace(/\/\/+/g,"/"),T=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");function M(t){let{basename:o,children:a,window:c}=t,f=(0,e.useRef)();null==f.current&&(f.current=function(e){function t(){var e=s(p.location.hash.substr(1)),t=e.pathname,n=e.search;e=e.hash;var r=h.state||{};return[r.idx,{pathname:void 0===t?"/":t,search:void 0===n?"":n,hash:void 0===e?"":e,state:r.usr||null,key:r.key||"default"}]}function o(){if(m)x.call(m),m=null;else{var e=r.Pop,n=t(),o=n[0];if(n=n[1],x.length){if(null!=o){var i=g-o;i&&(m={action:e,location:n,retry:function(){d(-1*i)}},d(i))}}else f(e)}}function a(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=-1===(n=(t=p.location.href).indexOf("#"))?t:t.slice(0,n)),n+"#"+("string"==typeof e?e:u(e))}function c(e,t){return void 0===t&&(t=null),n({pathname:y.pathname,hash:"",search:""},"string"==typeof e?s(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function f(e){v=e,e=t(),g=e[0],y=e[1],b.call({action:v,location:y})}function d(e){h.go(e)}void 0===e&&(e={});var p=void 0===(e=e.window)?document.defaultView:e,h=p.history,m=null;p.addEventListener("popstate",o),p.addEventListener("hashchange",(function(){u(t()[1])!==u(y)&&o()}));var v=r.Pop,g=(e=t())[0],y=e[1],b=l(),x=l();return null==g&&(g=0,h.replaceState(n({},h.state,{idx:g}),"")),{get action(){return v},get location(){return y},createHref:a,push:function e(t,n){var o=r.Push,i=c(t,n);if(!x.length||(x.call({action:o,location:i,retry:function(){e(t,n)}}),0)){var l=[{usr:i.state,key:i.key,idx:g+1},a(i)];i=l[0],l=l[1];try{h.pushState(i,"",l)}catch(e){p.location.assign(l)}f(o)}},replace:function e(t,n){var o=r.Replace,i=c(t,n);x.length&&(x.call({action:o,location:i,retry:function(){e(t,n)}}),1)||(i=[{usr:i.state,key:i.key,idx:g},a(i)],h.replaceState(i[0],"",i[1]),f(o))},go:d,back:function(){d(-1)},forward:function(){d(1)},listen:function(e){return b.push(e)},block:function(e){var t=x.push(e);return 1===x.length&&p.addEventListener("beforeunload",i),function(){t(),x.length||p.removeEventListener("beforeunload",i)}}}}({window:c}));let d=f.current,[p,h]=(0,e.useState)({action:d.action,location:d.location});return(0,e.useLayoutEffect)((()=>d.listen(h)),[d]),(0,e.createElement)(v,{basename:o,children:a,location:p.location,navigationType:p.action,navigator:d})}function L(e,t){return e===t}function O(e){return"function"==typeof e?function(){return e}:e}function R(t,n,r){var o=r&&r.equalityFn||L,i=function(t){var n=(0,e.useState)(O(t)),r=n[0],o=n[1];return[r,(0,e.useCallback)((function(e){return o(O(e))}),[])]}(t),a=i[0],l=i[1],u=function(t,n,r){var o=this,i=(0,e.useRef)(null),a=(0,e.useRef)(0),l=(0,e.useRef)(null),u=(0,e.useRef)([]),s=(0,e.useRef)(),c=(0,e.useRef)(),f=(0,e.useRef)(t),d=(0,e.useRef)(!0);f.current=t;var p=!n&&0!==n&&"undefined"!=typeof window;if("function"!=typeof t)throw new TypeError("Expected a function");n=+n||0;var h=!!(r=r||{}).leading,m=!("trailing"in r)||!!r.trailing,v="maxWait"in r,g=v?Math.max(+r.maxWait||0,n):null;(0,e.useEffect)((function(){return d.current=!0,function(){d.current=!1}}),[]);var y=(0,e.useMemo)((function(){var e=function(e){var t=u.current,n=s.current;return u.current=s.current=null,a.current=e,c.current=f.current.apply(n,t)},t=function(e,t){p&&cancelAnimationFrame(l.current),l.current=p?requestAnimationFrame(e):setTimeout(e,t)},r=function(e){if(!d.current)return!1;var t=e-i.current,r=e-a.current;return!i.current||t>=n||t<0||v&&r>=g},y=function(t){return l.current=null,m&&u.current?e(t):(u.current=s.current=null,c.current)},b=function(){var e=Date.now();if(r(e))return y(e);if(d.current){var o=e-i.current,l=e-a.current,u=n-o,s=v?Math.min(u,g-l):u;t(b,s)}},x=function(){for(var f=[],p=0;p<arguments.length;p++)f[p]=arguments[p];var m=Date.now(),g=r(m);if(u.current=f,s.current=o,i.current=m,g){if(!l.current&&d.current)return a.current=i.current,t(b,n),h?e(i.current):c.current;if(v)return t(b,n),e(i.current)}return l.current||t(b,n),c.current};return x.cancel=function(){l.current&&(p?cancelAnimationFrame(l.current):clearTimeout(l.current)),a.current=0,u.current=i.current=s.current=l.current=null},x.isPending=function(){return!!l.current},x.flush=function(){return l.current?y(Date.now()):c.current},x}),[h,v,n,g,m,p]);return y}((0,e.useCallback)((function(e){return l(e)}),[l]),n,r),s=(0,e.useRef)(t);return o(s.current,t)||(u(t),s.current=t),[a,u]}function N(e,t,n){if(null!==e)for(var r,o,i,a,l,u,s,c,f=0,d=0,p=e.type,h="FeatureCollection"===p,m="Feature"===p,v=h?e.features.length:1,g=0;g<v;g++){l=(c=!!(s=h?e.features[g].geometry:m?e.geometry:e)&&"GeometryCollection"===s.type)?s.geometries.length:1;for(var y=0;y<l;y++){var b=0,x=0;if(null!==(a=c?s.geometries[y]:s)){u=a.coordinates;var w=a.type;switch(f=!n||"Polygon"!==w&&"MultiPolygon"!==w?0:1,w){case null:break;case"Point":if(!1===t(u,d,g,b,x))return!1;d++,b++;break;case"LineString":case"MultiPoint":for(r=0;r<u.length;r++){if(!1===t(u[r],d,g,b,x))return!1;d++,"MultiPoint"===w&&b++}"LineString"===w&&b++;break;case"Polygon":case"MultiLineString":for(r=0;r<u.length;r++){for(o=0;o<u[r].length-f;o++){if(!1===t(u[r][o],d,g,b,x))return!1;d++}"MultiLineString"===w&&b++,"Polygon"===w&&x++}"Polygon"===w&&b++;break;case"MultiPolygon":for(r=0;r<u.length;r++){for(x=0,o=0;o<u[r].length;o++){for(i=0;i<u[r][o].length-f;i++){if(!1===t(u[r][o][i],d,g,b,x))return!1;d++}x++}b++}break;case"GeometryCollection":for(r=0;r<a.geometries.length;r++)if(!1===N(a.geometries[r],t,n))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function z(e){var t=[1/0,1/0,-1/0,-1/0];return N(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}z.default=z;const j=z;var I=a(736),D=a.n(I),V=a(582),F=a.n(V),B=function(){function e(){}return e.prototype.expandToken=function(e){for(var t=[],n="",r=0,o=e.length;r<o;++r)n+=e.charAt(r),t.push(n);return t},e}(),U=function(){function e(){}return e.prototype.sanitize=function(e){return e?e.toLocaleLowerCase().trim():""},e}();function $(e,t){t=t||[];for(var n=e=e||{},r=0;r<t.length;r++)if(null==(n=n[t[r]]))return null;return n}var W=function(){function e(e){this._uidFieldName=e,this._tokenToIdfCache={},this._tokenMap={}}var t=e.prototype;return t.indexDocument=function(e,t,n){this._tokenToIdfCache={};var r,o=this._tokenMap;"object"!=typeof o[e]?o[e]=r={$numDocumentOccurrences:0,$totalNumOccurrences:1,$uidMap:{}}:(r=o[e]).$totalNumOccurrences++;var i=r.$uidMap;"object"!=typeof i[t]?(r.$numDocumentOccurrences++,i[t]={$document:n,$numTokenOccurrences:1}):i[t].$numTokenOccurrences++},t.search=function(e,t){for(var n={},r=0,o=e.length;r<o;r++){var i,a=e[r],l=this._tokenMap[a];if(!l)return[];if(0===r)for(var u=0,s=(i=Object.keys(l.$uidMap)).length;u<s;u++)n[c=i[u]]=l.$uidMap[c].$document;else for(u=0,s=(i=Object.keys(n)).length;u<s;u++){var c=i[u];"object"!=typeof l.$uidMap[c]&&delete n[c]}}var f=[];for(var c in n)f.push(n[c]);var d=this._createCalculateTfIdf();return f.sort((function(n,r){return d(e,r,t)-d(e,n,t)}))},t._createCalculateIdf=function(){var e=this._tokenMap,t=this._tokenToIdfCache;return function(n,r){if(!t[n]){var o=void 0!==e[n]?e[n].$numDocumentOccurrences:0;t[n]=1+Math.log(r.length/(1+o))}return t[n]}},t._createCalculateTfIdf=function(){var e=this._tokenMap,t=this._uidFieldName,n=this._createCalculateIdf();return function(r,o,i){for(var a=0,l=0,u=r.length;l<u;++l){var s,c=r[l],f=n(c,i);f===1/0&&(f=0),s=t instanceof Array?o&&$(o,t):o&&o[t],a+=(void 0!==e[c]&&void 0!==e[c].$uidMap[s]?e[c].$uidMap[s].$numTokenOccurrences:0)*f}return a}},e}(),H=/[^a-zа-яё0-9\-']+/i,Y=function(){function e(){}return e.prototype.tokenize=function(e){return e.split(H).filter((function(e){return e}))},e}();function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(e){if(!e)throw Error("js-search requires a uid field name constructor parameter");this._uidFieldName=e,this._indexStrategy=new B,this._searchIndex=new W(e),this._sanitizer=new U,this._tokenizer=new Y,this._documents=[],this._searchableFields=[]}var t,n,r=e.prototype;return r.addDocument=function(e){this.addDocuments([e])},r.addDocuments=function(e){this._documents=this._documents.concat(e),this.indexDocuments_(e,this._searchableFields)},r.addIndex=function(e){this._searchableFields.push(e),this.indexDocuments_(this._documents,[e])},r.search=function(e){var t=this._tokenizer.tokenize(this._sanitizer.sanitize(e));return this._searchIndex.search(t,this._documents)},r.indexDocuments_=function(e,t){this._initialized=!0;for(var n=this._indexStrategy,r=this._sanitizer,o=this._searchIndex,i=this._tokenizer,a=this._uidFieldName,l=0,u=e.length;l<u;l++){var s,c=e[l];s=a instanceof Array?$(c,a):c[a];for(var f=0,d=t.length;f<d;f++){var p,h=t[f];if(null!=(p=h instanceof Array?$(c,h):c[h])&&"string"!=typeof p&&p.toString&&(p=p.toString()),"string"==typeof p)for(var m=i.tokenize(r.sanitize(p)),v=0,g=m.length;v<g;v++)for(var y=m[v],b=n.expandToken(y),x=0,w=b.length;x<w;x++){var E=b[x];o.indexDocument(E,s,c)}}}},t=e,(n=[{key:"indexStrategy",set:function(e){if(this._initialized)throw Error("IIndexStrategy cannot be set after initialization");this._indexStrategy=e},get:function(){return this._indexStrategy}},{key:"sanitizer",set:function(e){if(this._initialized)throw Error("ISanitizer cannot be set after initialization");this._sanitizer=e},get:function(){return this._sanitizer}},{key:"searchIndex",set:function(e){if(this._initialized)throw Error("ISearchIndex cannot be set after initialization");this._searchIndex=e},get:function(){return this._searchIndex}},{key:"tokenizer",set:function(e){if(this._initialized)throw Error("ITokenizer cannot be set after initialization");this._tokenizer=e},get:function(){return this._tokenizer}}])&&X(t.prototype,n),e}();function Q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Q(Object(n),!0).forEach((function(t){G(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?J(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t,n){return t&&ee(e.prototype,t),n&&ee(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var re=function(e){var t;return null===(t=e.geometry)||void 0===t?void 0:t.type},oe=te((function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ne(this,"init",(function(e){var n;if(!(null!==(n=e.data)&&void 0!==n&&n.length)>0)throw"No data";return Promise.all(e.data.map((function(e){var n=e.name,r=e.format,o=e.src;if("LINKED_PLACES"===r)return function(e,t,n){return fetch(t).then((function(e){return e.json()})).then((function(t){console.log("Importing LP: ".concat(e," (").concat(t.features.length," features)")),n.graph.beginUpdate();var r=t.features.map((function(t){var r=function(e,t){var n=Z({},e),r=se(e["@id"]);return delete n["@id"],n.id=r,n.title=n.properties.title,n.dataset=t,n.properties.id=r,n.properties.dataset=t,n}(t,e);n.graph.addNode(r.id,r);var o=ce(r);return o&&n.spatialIndex.insert(Z(Z({},o),{},{node:r})),r}));r.filter((function(e){var t;return(null===(t=e.links)||void 0===t?void 0:t.length)>0})).forEach((function(e){return e.links.forEach((function(t){if(t.identifier||t.id){var r=e.id,o=se(t.id||t.identifier);t.id=o,n.graph.addLink(r,o,t)}else console.warn("Link does not declare identifier",t,"on node",e)}))})),n.graph.endUpdate(),console.log("Indexing..."),console.time("Took"),n.index(r),console.timeEnd("Took")}))}(n,o,t);throw"Unsupported format: "+r})))})),ne(this,"index",(function(e){return t.searchIndex.addDocuments(e.map((function(e){return function(e){var t,n;return{id:e.id,dataset:e.dataset,title:e.title,description:null===(t=e.properties)||void 0===t?void 0:t.description,names:e.name?[e.name]:null===(n=e.names)||void 0===n?void 0:n.map((function(e){return e.toponym}))}}(e)})))})),ne(this,"getNode",(function(e){var n;return null===(n=t.graph.getNode(e))||void 0===n?void 0:n.data})),ne(this,"getNodesInBounds",(function(e,n){var r,o,i,a;if(4===e.length){var l=K(e,4);r=l[0],o=l[1],i=l[2],a=l[3]}else{var u=K(e,2),s=K(u[0],2);r=s[0],o=s[1];var c=K(u[1],2);i=c[0],a=c[1]}var f=t.spatialIndex.search({minX:r,minY:o,maxX:i,maxY:a}),d=n?f.filter((function(e){return e.node.dataset===n})):f;return d.filter((function(e){return"Point"===e.node.geometry.type||function(e){return e.minX>r&&e.maxX<i&&e.minY>o&&e.maxY<a}(e)})).map((function(e){return e.node}))})),ne(this,"search",(function(e){return t.searchIndex.search(e).map((function(e){return t.getNode(e.id)}))})),ne(this,"searchMappable",(function(e){return t.search(e).filter(re)})),this.graph=D()(),this.spatialIndex=new(F()),this.searchIndex=new q("id"),this.searchIndex.tokenizer={tokenize:function(e){return e.replace(/[.,'"#!$%^&*;:{}=\-_`~()]/g,"").split(/[\s,-]+/)}},this.searchIndex.addIndex("title"),this.searchIndex.addIndex("description"),this.searchIndex.addIndex("names")})),ie=(0,e.createContext)(),ae=function(t){var n=t.children,r={store:new oe};return e.createElement(ie.Provider,{value:r},n)};function le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ue(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var se=function(e){return e.replace("https://","http://")},ce=function(e){if(e.geometry){if("Point"===e.geometry.type){var t=le(e.geometry.coordinates,2),n=t[0],r=t[1];return{minX:n,minY:r,maxX:n,maxY:r}}try{var o=le(j(e),4);return{minX:o[0],minY:o[1],maxX:o[2],maxY:o[3]}}catch(t){console.error("Error parsing geometry for node",e)}}},fe=function(e,t){return fe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},fe(e,t)};function de(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}fe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var pe=function(){return pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},pe.apply(this,arguments)};function he(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function me(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function ve(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;const ge=1/60*1e3,ye="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),be="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(ye())),ge);let xe=!0,we=!1,Ee=!1;const ke={delta:0,timestamp:0},Se=["read","update","preRender","render","postRender"],Ce=Se.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,i=!1;const a=new WeakSet,l={schedule:(e,i=!1,l=!1)=>{const u=l&&o,s=u?t:n;return i&&a.add(e),-1===s.indexOf(e)&&(s.push(e),u&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),a.delete(e)},process:u=>{if(o)i=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(u),a.has(r)&&(l.schedule(r),e())}o=!1,i&&(i=!1,l.process(u))}}};return l}((()=>we=!0)),e)),{}),Ae=Se.reduce(((e,t)=>{const n=Ce[t];return e[t]=(e,t=!1,r=!1)=>(we||Le(),n.schedule(e,t,r)),e}),{}),Pe=Se.reduce(((e,t)=>(e[t]=Ce[t].cancel,e)),{}),_e=Se.reduce(((e,t)=>(e[t]=()=>Ce[t].process(ke),e)),{}),Te=e=>Ce[e].process(ke),Me=e=>{we=!1,ke.delta=xe?ge:Math.max(Math.min(e-ke.timestamp,40),1),ke.timestamp=e,Ee=!0,Se.forEach(Te),Ee=!1,we&&(xe=!1,be(Me))},Le=()=>{we=!0,xe=!0,Ee||be(Me)},Oe=()=>ke,Re=Ae;function Ne(){var t=(0,e.useRef)(!1);return(0,e.useLayoutEffect)((function(){return t.current=!0,function(){t.current=!1}}),[]),t}var ze=(0,e.createContext)(null);function je(t){var n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}var Ie=0,De=function(){return Ie++},Ve=function(){return je(De)},Fe=function(t){var n=t.children,r=t.initial,o=t.isPresent,i=t.onExitComplete,a=t.custom,l=t.presenceAffectsLayout,u=je(Be),s=Ve(),c=(0,e.useMemo)((function(){return{id:s,initial:r,isPresent:o,custom:a,onExitComplete:function(e){var t,n;u.set(e,!0);try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(u.values()),o=r.next();!o.done;o=r.next())if(!o.value)return}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}null==i||i()},register:function(e){return u.set(e,!1),function(){return u.delete(e)}}}}),l?void 0:[o]);return(0,e.useMemo)((function(){u.forEach((function(e,t){return u.set(t,!1)}))}),[o]),e.useEffect((function(){!o&&!u.size&&(null==i||i())}),[o]),e.createElement(ze.Provider,{value:c},n)};function Be(){return new Map}var Ue=(0,e.createContext)({}),$e="undefined"!=typeof window,We=$e?e.useLayoutEffect:e.useEffect;function He(t){return(0,e.useEffect)((function(){return function(){return t()}}),[])}var Ye=function(e){return e.key||""},Xe=function(t){var n=t.children,r=t.custom,o=t.initial,i=void 0===o||o,a=t.onExitComplete,l=t.exitBeforeEnter,u=t.presenceAffectsLayout,s=void 0===u||u,c=me(function(){var t=Ne(),n=me((0,e.useState)(0),2),r=n[0],o=n[1],i=(0,e.useCallback)((function(){t.current&&o(r+1)}),[r]);return[(0,e.useCallback)((function(){return Re.postRender(i)}),[i]),r]}(),1),f=c[0],d=(0,e.useContext)(Ue).forceRender;d&&(f=d);var p=Ne(),h=function(t){var n=[];return e.Children.forEach(t,(function(t){(0,e.isValidElement)(t)&&n.push(t)})),n}(n),m=h,v=new Set,g=(0,e.useRef)(m),y=(0,e.useRef)(new Map).current,b=(0,e.useRef)(!0);if(We((function(){b.current=!1,function(e,t){e.forEach((function(e){var n=Ye(e);t.set(n,e)}))}(h,y),g.current=m})),He((function(){b.current=!0,y.clear(),v.clear()})),b.current)return e.createElement(e.Fragment,null,m.map((function(t){return e.createElement(Fe,{key:Ye(t),isPresent:!0,initial:!!i&&void 0,presenceAffectsLayout:s},t)})));m=ve([],me(m),!1);for(var x=g.current.map(Ye),w=h.map(Ye),E=x.length,k=0;k<E;k++){var S=x[k];-1===w.indexOf(S)&&v.add(S)}return l&&v.size&&(m=[]),v.forEach((function(t){if(-1===w.indexOf(t)){var n=y.get(t);if(n){var o=x.indexOf(t);m.splice(o,0,e.createElement(Fe,{key:Ye(n),isPresent:!1,onExitComplete:function(){y.delete(t),v.delete(t);var e=g.current.findIndex((function(e){return e.key===t}));if(g.current.splice(e,1),!v.size){if(g.current=h,!1===p.current)return;f(),a&&a()}},custom:r,presenceAffectsLayout:s},n))}}})),m=m.map((function(t){var n=t.key;return v.has(n)?t:e.createElement(Fe,{key:Ye(t),isPresent:!0,presenceAffectsLayout:s},t)})),e.createElement(e.Fragment,null,v.size?m:m.map((function(t){return(0,e.cloneElement)(t)})))},qe={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},Qe=e.createContext&&e.createContext(qe),Ze=function(){return Ze=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ze.apply(this,arguments)};function Ge(t){return t&&t.map((function(t,n){return e.createElement(t.tag,Ze({key:n},t.attr),Ge(t.child))}))}function Ke(t){return function(n){return e.createElement(Je,Ze({attr:Ze({},t.attr)},n),Ge(t.child))}}function Je(t){var n=function(n){var r,o=t.attr,i=t.size,a=t.title,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["attr","size","title"]),u=i||n.size||"1em";return n.className&&(r=n.className),t.className&&(r=(r?r+" ":"")+t.className),e.createElement("svg",Ze({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,o,l,{className:r,style:Ze(Ze({color:t.color||n.color},n.style),t.style),height:u,width:u,xmlns:"http://www.w3.org/2000/svg"}),a&&e.createElement("title",null,a),t.children)};return void 0!==Qe?e.createElement(Qe.Consumer,null,(function(e){return n(e)})):n(qe)}function et(e){return Ke({tag:"svg",attr:{viewBox:"0 0 24 24"},child:[{tag:"path",attr:{d:"M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"}}]})(e)}var tt=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},nt={measureLayout:tt(["layout","layoutId","drag"]),animation:tt(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:tt(["exit"]),drag:tt(["drag","dragControls"]),focus:tt(["whileFocus"]),hover:tt(["whileHover","onHoverStart","onHoverEnd"]),tap:tt(["whileTap","onTap","onTapStart","onTapCancel"]),pan:tt(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:tt(["whileInView","onViewportEnter","onViewportLeave"])},rt=(0,e.createContext)({strict:!1}),ot=Object.keys(nt),it=ot.length,at=(0,e.createContext)({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),lt=(0,e.createContext)({}),ut={current:null},st=!1;function ct(t,n,r,o){var i,a,l=(0,e.useContext)(rt),u=(0,e.useContext)(lt).visualElement,s=(0,e.useContext)(ze),c=(!st&&function(){if(st=!0,"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return ut.current=e.matches};e.addListener(t),t()}else ut.current=!1}(),i=me((0,e.useState)(ut.current),1)[0],"never"!==(a=(0,e.useContext)(at).reducedMotion)&&("always"===a||i)),f=(0,e.useRef)(void 0);o||(o=l.renderer),!f.current&&o&&(f.current=o(t,{visualState:n,parent:u,props:r,presenceId:null==s?void 0:s.id,blockInitialAnimation:!1===(null==s?void 0:s.initial),shouldReduceMotion:c}));var d=f.current;return We((function(){null==d||d.syncRender()})),(0,e.useEffect)((function(){var e;null===(e=null==d?void 0:d.animationState)||void 0===e||e.animateChanges()})),We((function(){return function(){return null==d?void 0:d.notifyUnmount()}}),[]),d}function ft(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function dt(e){return Array.isArray(e)}function pt(e){return"string"==typeof e||dt(e)}function ht(e,t,n,r,o){var i;return void 0===r&&(r={}),void 0===o&&(o={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),"string"==typeof t&&(t=null===(i=e.variants)||void 0===i?void 0:i[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),t}function mt(e,t,n){var r=e.getProps();return ht(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function vt(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||pt(e.initial)||pt(e.animate)||pt(e.whileHover)||pt(e.whileDrag)||pt(e.whileTap)||pt(e.whileFocus)||pt(e.exit)}function gt(e){return Boolean(vt(e)||e.variants)}function yt(e){return Array.isArray(e)?e.join(" "):e}const bt=(e,t,n)=>-n*e+n*t+e;function xt(e,t){return t?e*(1e3/t):0}function wt(e,t){-1===e.indexOf(t)&&e.push(t)}function Et(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var kt=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return wt(this.subscriptions,e),function(){return Et(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var i=this.subscriptions[o];i&&i(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),St=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new kt,this.velocityUpdateSubscribers=new kt,this.renderSubscribers=new kt,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=Oe(),o=r.delta,i=r.timestamp;n.lastUpdated!==i&&(n.timeDelta=o,n.lastUpdated=i,Re.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return Re.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?xt(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function Ct(e){return new St(e)}var At=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)};const Pt=(e,t,n)=>Math.min(Math.max(n,e),t);function _t(e,t){return e*Math.sqrt(1-t*t)}const Tt=["duration","bounce"],Mt=["stiffness","damping","mass"];function Lt(e,t){return t.some((t=>void 0!==e[t]))}function Ot(e){var{from:t=0,to:n=1,restSpeed:r=2,restDelta:o}=e,i=he(e,["from","to","restSpeed","restDelta"]);const a={done:!1,value:t};let{stiffness:l,damping:u,mass:s,velocity:c,duration:f,isResolvedFromDuration:d}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!Lt(e,Mt)&&Lt(e,Tt)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,i,a=1-t;a=Pt(.05,1,a),e=Pt(.01,10,e/1e3),a<1?(o=t=>{const r=t*a,o=r*e;return.001-(r-n)/_t(t,a)*Math.exp(-o)},i=t=>{const r=t*a*e,i=r*n+n,l=Math.pow(a,2)*Math.pow(t,2)*e,u=Math.exp(-r),s=_t(Math.pow(t,2),a);return(.001-o(t)>0?-1:1)*((i-l)*u)/s}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,i=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(o,i,5/e);if(e*=1e3,isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*a*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(i),p=Rt,h=Rt;function m(){const e=c?-c/1e3:0,r=n-t,i=u/(2*Math.sqrt(l*s)),a=Math.sqrt(l/s)/1e3;if(void 0===o&&(o=Math.min(Math.abs(n-t)/100,.4)),i<1){const t=_t(a,i);p=o=>{const l=Math.exp(-i*a*o);return n-l*((e+i*a*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},h=n=>{const o=Math.exp(-i*a*n);return i*a*o*(Math.sin(t*n)*(e+i*a*r)/t+r*Math.cos(t*n))-o*(Math.cos(t*n)*(e+i*a*r)-t*r*Math.sin(t*n))}}else if(1===i)p=t=>n-Math.exp(-a*t)*(r+(e+a*r)*t);else{const t=a*Math.sqrt(i*i-1);p=o=>{const l=Math.exp(-i*a*o),u=Math.min(t*o,300);return n-l*((e+i*a*r)*Math.sinh(u)+t*r*Math.cosh(u))/t}}}return m(),{next:e=>{const t=p(e);if(d)a.done=e>=f;else{const i=1e3*h(e),l=Math.abs(i)<=r,u=Math.abs(n-t)<=o;a.done=l&&u}return a.value=a.done?n:t,a},flipTarget:()=>{c=-c,[t,n]=[n,t],m()}}}Ot.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const Rt=e=>0,Nt=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},zt=(e,t)=>n=>Math.max(Math.min(n,t),e),jt=e=>e%1?Number(e.toFixed(5)):e,It=/(-)?([\d]*\.?[\d])+/g,Dt=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,Vt=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function Ft(e){return"string"==typeof e}const Bt={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Ut=Object.assign(Object.assign({},Bt),{transform:zt(0,1)}),$t=Object.assign(Object.assign({},Bt),{default:1}),Wt=(e,t)=>n=>Boolean(Ft(n)&&Vt.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),Ht=(e,t,n)=>r=>{if(!Ft(r))return r;const[o,i,a,l]=r.match(It);return{[e]:parseFloat(o),[t]:parseFloat(i),[n]:parseFloat(a),alpha:void 0!==l?parseFloat(l):1}},Yt=zt(0,255),Xt=Object.assign(Object.assign({},Bt),{transform:e=>Math.round(Yt(e))}),qt={test:Wt("rgb","red"),parse:Ht("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Xt.transform(e)+", "+Xt.transform(t)+", "+Xt.transform(n)+", "+jt(Ut.transform(r))+")"},Qt={test:Wt("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:qt.transform},Zt=e=>({test:t=>Ft(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Gt=Zt("deg"),Kt=Zt("%"),Jt=Zt("px"),en=Zt("vh"),tn=Zt("vw"),nn=Object.assign(Object.assign({},Kt),{parse:e=>Kt.parse(e)/100,transform:e=>Kt.transform(100*e)}),rn={test:Wt("hsl","hue"),parse:Ht("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Kt.transform(jt(t))+", "+Kt.transform(jt(n))+", "+jt(Ut.transform(r))+")"};function on(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function an({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,i=0,a=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;o=on(l,r,e+1/3),i=on(l,r,e),a=on(l,r,e-1/3)}else o=i=a=n;return{red:Math.round(255*o),green:Math.round(255*i),blue:Math.round(255*a),alpha:r}}const ln=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},un=[Qt,qt,rn],sn=e=>un.find((t=>t.test(e))),cn=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,fn=(e,t)=>{let n=sn(e),r=sn(t);cn(e),cn(t);let o=n.parse(e),i=r.parse(t);n===rn&&(o=an(o),n=qt),r===rn&&(i=an(i),r=qt);const a=Object.assign({},o);return e=>{for(const t in a)"alpha"!==t&&(a[t]=ln(o[t],i[t],e));return a.alpha=bt(o.alpha,i.alpha,e),n.transform(a)}},dn={test:e=>qt.test(e)||Qt.test(e)||rn.test(e),parse:e=>qt.test(e)?qt.parse(e):rn.test(e)?rn.parse(e):Qt.parse(e),transform:e=>Ft(e)?e:e.hasOwnProperty("red")?qt.transform(e):rn.transform(e)},pn="${c}",hn="${n}";function mn(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(Dt);r&&(n=r.length,e=e.replace(Dt,pn),t.push(...r.map(dn.parse)));const o=e.match(It);return o&&(e=e.replace(It,hn),t.push(...o.map(Bt.parse))),{values:t,numColors:n,tokenised:e}}function vn(e){return mn(e).values}function gn(e){const{values:t,numColors:n,tokenised:r}=mn(e),o=t.length;return e=>{let t=r;for(let r=0;r<o;r++)t=t.replace(r<n?pn:hn,r<n?dn.transform(e[r]):jt(e[r]));return t}}const yn=e=>"number"==typeof e?0:e,bn={test:function(e){var t,n,r,o;return isNaN(e)&&Ft(e)&&(null!==(n=null===(t=e.match(It))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(o=null===(r=e.match(Dt))||void 0===r?void 0:r.length)&&void 0!==o?o:0)>0},parse:vn,createTransformer:gn,getAnimatableNone:function(e){const t=vn(e);return gn(e)(t.map(yn))}},xn=e=>"number"==typeof e,wn=(e,t)=>n=>t(e(n)),En=(...e)=>e.reduce(wn);function kn(e,t){return xn(e)?n=>bt(e,t,n):dn.test(e)?fn(e,t):Pn(e,t)}const Sn=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>kn(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},Cn=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=kn(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function An(e){const t=bn.parse(e),n=t.length;let r=0,o=0,i=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?i++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:i}}const Pn=(e,t)=>{const n=bn.createTransformer(t),r=An(e),o=An(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&r.numNumbers>=o.numNumbers?En(Sn(r.parsed,o.parsed),n):n=>`${n>0?t:e}`},_n=(e,t)=>n=>bt(e,t,n);function Tn(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const i=e.length;t.length,!r||!Array.isArray(r)||r.length,e[0]>e[i-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const a=function(e,t,n){const r=[],o=n||("number"==typeof(i=e[0])?_n:"string"==typeof i?dn.test(i)?fn:Pn:Array.isArray(i)?Sn:"object"==typeof i?Cn:void 0);var i;const a=e.length-1;for(let n=0;n<a;n++){let i=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;i=En(e,i)}r.push(i)}return r}(t,r,o),l=2===i?function([e,t],[n]){return r=>n(Nt(e,t,r))}(e,a):function(e,t){const n=e.length,r=n-1;return o=>{let i=0,a=!1;if(o<=e[0]?a=!0:o>=e[r]&&(i=r-1,a=!0),!a){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);i=t-1}const l=Nt(e[i],e[i+1],o);return t[i](l)}}(e,a);return n?t=>l(Pt(e[0],e[i-1],t)):l}const Mn=e=>t=>1-e(1-t),Ln=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,On=e=>t=>t*t*((e+1)*t-e),Rn=e=>e,Nn=(2,e=>Math.pow(e,2));const zn=Mn(Nn),jn=Ln(Nn),In=e=>1-Math.sin(Math.acos(e)),Dn=Mn(In),Vn=Ln(Dn),Fn=On(1.525),Bn=Mn(Fn),Un=Ln(Fn),$n=(e=>{const t=On(1.525);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))})(),Wn=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},Hn=Mn(Wn);function Yn(e,t){return e.map((()=>t||jn)).splice(0,e.length-1)}function Xn({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const i={done:!1,value:e},a=Array.isArray(t)?t:[e,t],l=function(e,t){return e.map((e=>e*t))}(r&&r.length===a.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(a),o);function u(){return Tn(l,a,{ease:Array.isArray(n)?n:Yn(a,n)})}let s=u();return{next:e=>(i.value=s(e),i.done=e>=o,i),flipTarget:()=>{a.reverse(),s=u()}}}const qn={keyframes:Xn,spring:Ot,decay:function({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:i}){const a={done:!1,value:t};let l=n*e;const u=t+l,s=void 0===i?u:i(u);return s!==u&&(l=s-t),{next:e=>{const t=-l*Math.exp(-e/r);return a.done=!(t>o||t<-o),a.value=a.done?s:s+t,a},flipTarget:()=>{}}}};function Qn(e,t,n=0){return e-t-n}const Zn=e=>{const t=({delta:t})=>e(t);return{start:()=>Re.update(t,!0),stop:()=>Pe.update(t)}};function Gn(e){var t,n,{from:r,autoplay:o=!0,driver:i=Zn,elapsed:a=0,repeat:l=0,repeatType:u="loop",repeatDelay:s=0,onPlay:c,onStop:f,onComplete:d,onRepeat:p,onUpdate:h}=e,m=he(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,g,y,{to:b}=m,x=0,w=m.duration,E=!1,k=!0;const S=function(e){if(Array.isArray(e.to))return Xn;if(qn[e.type])return qn[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?Xn:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?Ot:Xn}(m);(null===(n=(t=S).needsInterpolation)||void 0===n?void 0:n.call(t,r,b))&&(y=Tn([0,100],[r,b],{clamp:!1}),r=0,b=100);const C=S(Object.assign(Object.assign({},m),{from:r,to:b}));return o&&(null==c||c(),v=i((function(e){if(k||(e=-e),a+=e,!E){const e=C.next(Math.max(0,a));g=e.value,y&&(g=y(g)),E=k?e.done:a<=0}null==h||h(g),E&&(0===x&&(null!=w||(w=a)),x<l?function(e,t,n,r){return r?e>=t+n:e<=-n}(a,w,s,k)&&(x++,"reverse"===u?(k=x%2==0,a=function(e,t,n=0,r=!0){return r?Qn(t+-e,t,n):t-(e-t)+n}(a,w,s,k)):(a=Qn(a,w,s),"mirror"===u&&C.flipTarget()),E=!1,p&&p()):(v.stop(),d&&d()))})),v.start()),{stop:()=>{null==f||f(),v.stop()}}}var Kn=function(e){return 1e3*e};const Jn=(e,t)=>1-3*t+3*e,er=(e,t)=>3*t-6*e,tr=e=>3*e,nr=(e,t,n)=>((Jn(t,n)*e+er(t,n))*e+tr(t))*e,rr=(e,t,n)=>3*Jn(t,n)*e*e+2*er(t,n)*e+tr(t),or=.1;function ir(e,t,n,r){if(e===t&&n===r)return Rn;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=nr(t*or,e,n);return i=>0===i||1===i?i:nr(function(t){let r=0,i=1;for(;10!==i&&o[i]<=t;++i)r+=or;--i;const a=r+(t-o[i])/(o[i+1]-o[i])*or,l=rr(a,e,n);return l>=.001?function(e,t,n,r){for(let o=0;o<8;++o){const o=rr(t,n,r);if(0===o)return t;t-=(nr(t,n,r)-e)/o}return t}(t,a,e,n):0===l?a:function(e,t,n,r,o){let i,a,l=0;do{a=t+(n-t)/2,i=nr(a,r,o)-e,i>0?n=a:t=a}while(Math.abs(i)>1e-7&&++l<10);return a}(t,r,r+or,e,n)}(i),t,r)}var ar={linear:Rn,easeIn:Nn,easeInOut:jn,easeOut:zn,circIn:In,circInOut:Vn,circOut:Dn,backIn:Fn,backInOut:Un,backOut:Bn,anticipate:$n,bounceIn:Hn,bounceInOut:e=>e<.5?.5*(1-Wn(1-2*e)):.5*Wn(2*e-1)+.5,bounceOut:Wn},lr=function(e){if(Array.isArray(e)){e.length;var t=me(e,4);return ir(t[0],t[1],t[2],t[3])}return"string"==typeof e?("Invalid easing type '".concat(e,"'"),ar[e]):e},ur=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!bn.test(t)||t.startsWith("url(")))},sr=function(e){return Array.isArray(e)},cr=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},fr=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},dr=function(){return{type:"keyframes",ease:"linear",duration:.3}},pr=function(e){return{type:"keyframes",duration:.8,values:e}},hr={x:cr,y:cr,z:cr,rotate:cr,rotateX:cr,rotateY:cr,rotateZ:cr,scaleX:fr,scaleY:fr,scale:fr,opacity:dr,backgroundColor:dr,color:dr,default:fr};const mr=new Set(["brightness","contrast","saturate","opacity"]);function vr(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(It)||[];if(!r)return e;const o=n.replace(r,"");let i=mr.has(t)?1:0;return r!==n&&(i*=100),t+"("+i+o+")"}const gr=/([a-z-]*)\(.*?\)/g,yr=Object.assign(Object.assign({},bn),{getAnimatableNone:e=>{const t=e.match(gr);return t?t.map(vr).join(" "):e}});var br=pe(pe({},Bt),{transform:Math.round}),xr={borderWidth:Jt,borderTopWidth:Jt,borderRightWidth:Jt,borderBottomWidth:Jt,borderLeftWidth:Jt,borderRadius:Jt,radius:Jt,borderTopLeftRadius:Jt,borderTopRightRadius:Jt,borderBottomRightRadius:Jt,borderBottomLeftRadius:Jt,width:Jt,maxWidth:Jt,height:Jt,maxHeight:Jt,size:Jt,top:Jt,right:Jt,bottom:Jt,left:Jt,padding:Jt,paddingTop:Jt,paddingRight:Jt,paddingBottom:Jt,paddingLeft:Jt,margin:Jt,marginTop:Jt,marginRight:Jt,marginBottom:Jt,marginLeft:Jt,rotate:Gt,rotateX:Gt,rotateY:Gt,rotateZ:Gt,scale:$t,scaleX:$t,scaleY:$t,scaleZ:$t,skew:Gt,skewX:Gt,skewY:Gt,distance:Jt,translateX:Jt,translateY:Jt,translateZ:Jt,x:Jt,y:Jt,z:Jt,perspective:Jt,transformPerspective:Jt,opacity:Ut,originX:nn,originY:nn,originZ:Jt,zIndex:br,fillOpacity:Ut,strokeOpacity:Ut,numOctaves:br},wr=pe(pe({},xr),{color:dn,backgroundColor:dn,outlineColor:dn,fill:dn,stroke:dn,borderColor:dn,borderTopColor:dn,borderRightColor:dn,borderBottomColor:dn,borderLeftColor:dn,filter:yr,WebkitFilter:yr}),Er=function(e){return wr[e]};function kr(e,t){var n,r=Er(e);return r!==yr&&(r=bn),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var Sr=function(e){return sr(e)?e[e.length-1]||0:e};function Cr(e,t,n){var r,o,i,a;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=ve([],me(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=he(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=pe(pe({},e),(o=n,i=t.to,a=sr(i)?pr:hr[o]||hr.default,pe({to:i},a(i))))),pe(pe({},t),function(e){var t=e.ease,n=e.times,r=e.yoyo,o=e.flip,i=e.loop,a=he(e,["ease","times","yoyo","flip","loop"]),l=pe({},a);return n&&(l.offset=n),a.duration&&(l.duration=Kn(a.duration)),a.repeatDelay&&(l.repeatDelay=Kn(a.repeatDelay)),t&&(l.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(lr):lr(t)),"tween"===a.type&&(l.type="keyframes"),(r||i||o)&&(r?l.repeatType="reverse":i?l.repeatType="loop":o&&(l.repeatType="mirror"),l.repeat=i||r||o||a.repeat),"spring"!==a.type&&(l.type="keyframes"),l}(e))}function Ar(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function Pr(e){return"number"==typeof e?0:kr("",e)}function _r(e,t){return e[t]||e.default||e}function Tr(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var i,a,l=function(e,t,n,r,o){var i,a=_r(r,e),l=null!==(i=a.from)&&void 0!==i?i:t.get(),u=ur(e,n);"none"===l&&u&&"string"==typeof n?l=kr(e,n):Ar(l)&&"string"==typeof n?l=Pr(n):!Array.isArray(n)&&Ar(n)&&"string"==typeof l&&(n=Pr(l));var s=ur(e,l);return"You are trying to animate ".concat(e,' from "').concat(l,'" to "').concat(n,'". ').concat(l," is not an animatable value - to enable this animation set ").concat(l," to a value animatable to ").concat(n," via the `style` property."),s&&u&&!1!==a.type?function(){var r={from:l,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===a.type||"decay"===a.type?function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:i=750,bounceStiffness:a=500,bounceDamping:l=10,restDelta:u=1,modifyTarget:s,driver:c,onUpdate:f,onComplete:d,onStop:p}){let h;function m(e){return void 0!==n&&e<n||void 0!==r&&e>r}function v(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function g(e){null==h||h.stop(),h=Gn(Object.assign(Object.assign({},e),{driver:c,onUpdate:t=>{var n;null==f||f(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:d,onStop:p}))}function y(e){g(Object.assign({type:"spring",stiffness:a,damping:l,restDelta:u},e))}if(m(e))y({from:e,velocity:t,to:v(e)});else{let r=o*t+e;void 0!==s&&(r=s(r));const a=v(r),l=a===n?-1:1;let c,f;const d=e=>{c=f,f=e,t=xt(e-c,Oe().delta),(1===l&&e>a||-1===l&&e<a)&&y({from:e,to:a,velocity:t})};g({type:"decay",from:e,velocity:t,timeConstant:i,power:o,restDelta:u,modifyTarget:s,onUpdate:m(r)?d:void 0})}return{stop:()=>null==h?void 0:h.stop()}}(pe(pe({},r),a)):Gn(pe(pe({},Cr(a,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=a.onUpdate)||void 0===t||t.call(a,e)},onComplete:function(){var e;r.onComplete(),null===(e=a.onComplete)||void 0===e||e.call(a)}}))}:function(){var e,r,i=Sr(n);return t.set(i),o(),null===(e=null==a?void 0:a.onUpdate)||void 0===e||e.call(a,i),null===(r=null==a?void 0:a.onComplete)||void 0===r||r.call(a),{stop:function(){}}}}(e,t,n,r,o),u=function(e,t){var n,r;return null!==(r=null!==(n=(_r(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(r,e),s=function(){return a=l()};return u?i=window.setTimeout(s,Kn(u)):s(),function(){clearTimeout(i),null==a||a.stop()}}))}var Mr=["TopLeft","TopRight","BottomLeft","BottomRight"],Lr=Mr.length,Or=function(e){return"string"==typeof e?parseFloat(e):e},Rr=function(e){return"number"==typeof e||Jt.test(e)};function Nr(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var zr=Ir(0,.5,Dn),jr=Ir(.5,.95,Rn);function Ir(e,t,n){return function(r){return r<e?0:r>t?1:n(Nt(e,t,r))}}function Dr(e,t){e.min=t.min,e.max=t.max}function Vr(e,t){Dr(e.x,t.x),Dr(e.y,t.y)}function Fr(e){return void 0===e||1===e}function Br(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Fr(t)||!Fr(n)||!Fr(r)}function Ur(e){return Br(e)||$r(e.x)||$r(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function $r(e){return e&&"0%"!==e}function Wr(e,t,n){return n+t*(e-n)}function Hr(e,t,n,r,o){return void 0!==o&&(e=Wr(e,o,r)),Wr(e,n,r)+t}function Yr(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=Hr(e.min,t,n,r,o),e.max=Hr(e.max,t,n,r,o)}function Xr(e,t){var n=t.x,r=t.y;Yr(e.x,n.translate,n.scale,n.originPoint),Yr(e.y,r.translate,r.scale,r.originPoint)}function qr(e,t){e.min=e.min+t,e.max=e.max+t}function Qr(e,t,n){var r=me(n,3),o=r[0],i=r[1],a=r[2],l=void 0!==t[a]?t[a]:.5,u=bt(e.min,e.max,l);Yr(e,t[o],t[i],u,t.scale)}var Zr=["x","scaleX","originX"],Gr=["y","scaleY","originY"];function Kr(e,t){Qr(e.x,t,Zr),Qr(e.y,t,Gr)}const Jr=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),eo=e=>Jr(e)&&e.hasOwnProperty("z"),to=(e,t)=>Math.abs(e-t);function no(e,t){if(xn(e)&&xn(t))return to(e,t);if(Jr(e)&&Jr(t)){const n=to(e.x,t.x),r=to(e.y,t.y),o=eo(e)&&eo(t)?to(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}function ro(e){return e.max-e.min}function oo(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),no(e,t)<n}function io(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=bt(t.min,t.max,e.origin),e.scale=ro(n)/ro(t),(oo(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=bt(n.min,n.max,e.origin)-e.originPoint,(oo(e.translate)||isNaN(e.translate))&&(e.translate=0)}function ao(e,t,n,r){io(e.x,t.x,n.x,null==r?void 0:r.originX),io(e.y,t.y,n.y,null==r?void 0:r.originY)}function lo(e,t,n){e.min=n.min+t.min,e.max=e.min+ro(t)}function uo(e,t,n){e.min=t.min-n.min,e.max=e.min+ro(t)}function so(e,t,n){uo(e.x,t.x,n.x),uo(e.y,t.y,n.y)}function co(e,t,n,r,o){return e=Wr(e-=t,1/n,r),void 0!==o&&(e=Wr(e,1/o,r)),e}function fo(e,t,n,r,o){var i=me(n,3),a=i[0],l=i[1],u=i[2];!function(e,t,n,r,o,i,a){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===i&&(i=e),void 0===a&&(a=e),Kt.test(t)&&(t=parseFloat(t),t=bt(a.min,a.max,t/100)-a.min),"number"==typeof t){var l=bt(i.min,i.max,r);e===i&&(l-=t),e.min=co(e.min,t,n,l,o),e.max=co(e.max,t,n,l,o)}}(e,t[a],t[l],t[u],t.scale,r,o)}var po=["x","scaleX","originX"],ho=["y","scaleY","originY"];function mo(e,t,n,r){fo(e.x,t,po,null==n?void 0:n.x,null==r?void 0:r.x),fo(e.y,t,ho,null==n?void 0:n.y,null==r?void 0:r.y)}function vo(e){return 0===e.translate&&1===e.scale}function go(e){return vo(e.x)&&vo(e.y)}function yo(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var bo=function(){function e(){this.members=[]}return e.prototype.add=function(e){wt(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(Et(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var o=this.members[r];if(!1!==o.isPresent){t=o;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,o,i;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(i=null===(r=e.resumingFrom)||void 0===r?void 0:(o=r.options).onExitComplete)||void 0===i||i.call(o)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),xo={};function wo(e,t,n){var r=e.x.translate/t.x,o=e.y.translate/t.y,i="translate3d(".concat(r,"px, ").concat(o,"px, 0) ");if(n){var a=n.rotate,l=n.rotateX,u=n.rotateY;a&&(i+="rotate(".concat(a,"deg) ")),l&&(i+="rotateX(".concat(l,"deg) ")),u&&(i+="rotateY(".concat(u,"deg) "))}return"translate3d(0px, 0px, 0) scale(1, 1)"===(i+="scale(".concat(e.x.scale,", ").concat(e.y.scale,")"))?"none":i}function Eo(e){return[e("x"),e("y")]}var ko=["","X","Y","Z"],So=["transformPerspective","x","y","z"];function Co(e,t){return So.indexOf(e)-So.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return ko.forEach((function(t){return So.push(e+t)}))}));var Ao=new Set(So);function Po(e){return Ao.has(e)}var _o=new Set(["originX","originY","originZ"]);function To(e){return _o.has(e)}var Mo=function(e,t){return e.depth-t.depth},Lo=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){wt(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){Et(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(Mo),this.isDirty=!1,this.children.forEach(e)},e}();function Oo(e){var t,n=At(e)?e.get():e;return t=n,Boolean(t&&"object"==typeof t&&t.mix&&t.toValue)?n.toValue():n}var Ro={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function No(e){var t=e.attachResizeListener,n=e.defaultParent,r=e.measureScroll,o=e.resetTransform;return function(){function e(e,t,r){var o=this;void 0===t&&(t={}),void 0===r&&(r=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){o.isUpdating&&(o.isUpdating=!1,o.clearAllSnapshots())},this.updateProjection=function(){o.nodes.forEach(Bo),o.nodes.forEach(Uo)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=r?r.root||r:this,this.path=r?ve(ve([],me(r.path),!1),[r],!1):[],this.parent=r,this.depth=r?r.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var i=0;i<this.path.length;i++)this.path[i].shouldResetTransform=!0;this.root===this&&(this.nodes=new Lo)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new kt),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.eventHandlers.get(e);null==r||r.notify.apply(r,ve([],me(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var r,o=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var i=this.options,a=i.layoutId,l=i.layout,u=i.visualElement;if(u&&!u.getInstance()&&u.mount(e),this.root.nodes.add(this),null===(r=this.parent)||void 0===r||r.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(l||a)&&(this.isLayoutDirty=!0),t){var s,c=function(){return o.root.updateBlockedByResize=!1};t(e,(function(){o.root.updateBlockedByResize=!0,clearTimeout(s),s=window.setTimeout(c,250),Ro.hasAnimatedSinceResize&&(Ro.hasAnimatedSinceResize=!1,o.nodes.forEach(Fo))}))}a&&this.root.registerSharedNode(a,this),!1!==this.options.animate&&u&&(a||l)&&this.addEventListener("didUpdate",(function(e){var t,n,r,i,a,l=e.delta,s=e.hasLayoutChanged,c=e.hasRelativeTargetChanged,f=e.layout;if(o.isTreeAnimationBlocked())return o.target=void 0,void(o.relativeTarget=void 0);var d=null!==(n=null!==(t=o.options.transition)&&void 0!==t?t:u.getDefaultTransition())&&void 0!==n?n:qo,p=u.getProps().onLayoutAnimationComplete,h=!o.targetLayout||!yo(o.targetLayout,f)||c,m=!s&&c;if((null===(r=o.resumeFrom)||void 0===r?void 0:r.instance)||m||s&&(h||!o.currentAnimation)){o.resumeFrom&&(o.resumingFrom=o.resumeFrom,o.resumingFrom.resumingFrom=void 0),o.setAnimationOrigin(l,m);var v=pe(pe({},_r(d,"layout")),{onComplete:p});u.shouldReduceMotion&&(v.delay=0,v.type=!1),o.startAnimation(v)}else s||0!==o.animationProgress||o.finishAnimation(),o.isLead()&&(null===(a=(i=o.options).onExitComplete)||void 0===a||a.call(i));o.targetLayout=f}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,Pe.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach($o))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var o=0;o<this.path.length;o++){var i=this.path[o];i.shouldResetTransform=!0,i.updateScroll()}var a=this.options,l=a.layoutId,u=a.layout;if(void 0!==l||u){var s=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==s?void 0:s(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Do);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Qo),this.potentialNodes.clear()),this.nodes.forEach(Vo),this.nodes.forEach(zo),this.nodes.forEach(jo),this.clearAllSnapshots(),_e.update(),_e.preRender(),_e.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(Io),this.sharedNodes.forEach(Wo)},e.prototype.scheduleUpdateProjection=function(){Re.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;Re.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));Go(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();Go(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.scroll=r(this.instance))},e.prototype.resetTransform=function(){var e;if(o){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!go(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,i=null==r?void 0:r(this.latestValues,""),a=i!==this.prevTransformTemplateValue;t&&(n||Ur(this.latestValues)||a)&&(o(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(qr(t.x,n.x),qr(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};Vr(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],o=r.scroll,i=r.options;r!==this.root&&o&&i.layoutScroll&&(qr(t.x,o.x),qr(t.y,o.y))}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};Vr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];!t&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Kr(n,{x:-o.scroll.x,y:-o.scroll.y}),Ur(o.latestValues)&&Kr(n,o.latestValues)}return Ur(this.latestValues)&&Kr(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};Vr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];if(o.instance&&Ur(o.latestValues)){Br(o.latestValues)&&o.updateSnapshot();var i={x:{min:0,max:0},y:{min:0,max:0}};Vr(i,o.measure()),mo(n,o.latestValues,null===(t=o.snapshot)||void 0===t?void 0:t.layout,i)}}return Ur(this.latestValues)&&mo(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=pe(pe(pe({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,o=this.options,i=o.layout,a=o.layoutId;this.layout&&(i||a)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},so(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),Vr(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,lo(t.x,n.x,r.x),lo(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):Vr(this.target,this.layout.actual),Xr(this.target,this.targetDelta)):Vr(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},so(this.relativeTargetOrigin,this.target,this.relativeParent.target),Vr(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Ur(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var o=this.getLead();Vr(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var o,i;void 0===r&&(r=!1);var a=n.length;if(a){var l,u;t.x=t.y=1;for(var s=0;s<a;s++)u=(l=n[s]).projectionDelta,"contents"!==(null===(i=null===(o=l.instance)||void 0===o?void 0:o.style)||void 0===i?void 0:i.display)&&(r&&l.options.layoutScroll&&l.scroll&&l!==l.root&&Kr(e,{x:-l.scroll.x,y:-l.scroll.y}),u&&(t.x*=u.x.scale,t.y*=u.y.scale,Xr(e,u)),r&&Ur(l.latestValues)&&Kr(e,l.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);var i=o.target;if(i){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var a=this.treeScale.x,l=this.treeScale.y,u=this.projectionTransform;ao(this.projectionDelta,this.layoutCorrected,i,this.latestValues),this.projectionTransform=wo(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===a&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",i))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,r=this;void 0===t&&(t=!1);var o=this.snapshot,i=(null==o?void 0:o.latestValues)||{},a=pe({},this.latestValues),l={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var u={x:{min:0,max:0},y:{min:0,max:0}},s=null==o?void 0:o.isShared,c=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,f=Boolean(s&&!c&&!0===this.options.crossfade&&!this.path.some(Xo));this.animationProgress=0,this.mixTargetDelta=function(t){var n,o,d,p,h,m=t/1e3;Ho(l.x,e.x,m),Ho(l.y,e.y,m),r.setTargetDelta(l),r.relativeTarget&&r.relativeTargetOrigin&&r.layout&&(null===(n=r.relativeParent)||void 0===n?void 0:n.layout)&&(so(u,r.layout.actual,r.relativeParent.layout.actual),o=r.relativeTarget,d=r.relativeTargetOrigin,p=u,h=m,Yo(o.x,d.x,p.x,h),Yo(o.y,d.y,p.y,h)),s&&(r.animationValues=a,function(e,t,n,r,o,i){var a,l,u,s;o?(e.opacity=bt(0,null!==(a=n.opacity)&&void 0!==a?a:1,zr(r)),e.opacityExit=bt(null!==(l=t.opacity)&&void 0!==l?l:1,0,jr(r))):i&&(e.opacity=bt(null!==(u=t.opacity)&&void 0!==u?u:1,null!==(s=n.opacity)&&void 0!==s?s:1,r));for(var c=0;c<Lr;c++){var f="border".concat(Mr[c],"Radius"),d=Nr(t,f),p=Nr(n,f);void 0===d&&void 0===p||(d||(d=0),p||(p=0),0===d||0===p||Rr(d)===Rr(p)?(e[f]=Math.max(bt(Or(d),Or(p),r),0),(Kt.test(p)||Kt.test(d))&&(e[f]+="%")):e[f]=p)}(t.rotate||n.rotate)&&(e.rotate=bt(t.rotate||0,n.rotate||0,r))}(a,i,r.latestValues,m,f,c)),r.root.scheduleUpdateProjection(),r.scheduleRender(),r.animationProgress=m},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,r=this;null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(Pe.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=Re.update((function(){Ro.hasAnimatedSinceResize=!0,r.currentAnimation=function(e,t,n){void 0===n&&(n={});var r=At(0)?0:Ct(0);return Tr("",r,1e3,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}(0,0,pe(pe({},e),{onUpdate:function(t){var n;r.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),r.completeAnimation()}})),r.resumingFrom&&(r.resumingFrom.currentAnimation=r.currentAnimation),r.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,o=e.latestValues;t&&n&&r&&(Vr(t,n),Kr(t,o),ao(this.projectionDeltaWithTransform,this.layoutCorrected,t,o))},e.prototype.registerSharedNode=function(e,t){var n,r,o;this.sharedNodes.has(e)||this.sharedNodes.set(e,new bo),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(o=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===o?void 0:o.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,o=t.preserveFollowOpacity,i=this.getStack();i&&i.promote(this,o),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<ko.length;r++){var o="rotate"+ko[r];e.getStaticValue(o)&&(t=!0,n[o]=e.getStaticValue(o),e.setStaticValue(o,0))}if(t){for(var o in null==e||e.syncRender(),n)e.setStaticValue(o,n[o]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,o,i,a;void 0===e&&(e={});var l={};if(!this.instance||this.isSVG)return l;if(!this.isVisible)return{visibility:"hidden"};l.visibility="";var u=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=Oo(e.pointerEvents)||"",l.transform=u?u(this.latestValues,""):"none",l;var s=this.getLead();if(!this.projectionDelta||!this.layout||!s.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=Oo(e.pointerEvents)||""),this.hasProjected&&!Ur(this.latestValues)&&(c.transform=u?u({},""):"none",this.hasProjected=!1),c}var f=s.animationValues||s.latestValues;this.applyTransformsToTarget(),l.transform=wo(this.projectionDeltaWithTransform,this.treeScale,f),u&&(l.transform=u(f,l.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in l.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),s.animationValues?l.opacity=s===this?null!==(o=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:l.opacity=s===this?null!==(i=f.opacity)&&void 0!==i?i:"":null!==(a=f.opacityExit)&&void 0!==a?a:0,xo)if(void 0!==f[m]){var v=xo[m],g=v.correct,y=v.applyTo,b=g(f[m],s);if(y)for(var x=y.length,w=0;w<x;w++)l[y[w]]=b;else l[m]=b}return this.options.layoutId&&(l.pointerEvents=s===this?Oo(e.pointerEvents)||"":"none"),l},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(Do),this.root.sharedNodes.clear()},e}()}function zo(e){e.updateLayout()}function jo(e){var t,n,r,o,i=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&i&&e.hasListeners("didUpdate")){var a=e.layout,l=a.actual,u=a.measured;"size"===e.options.animationType?Eo((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=ro(t);t.min=l[e].min,t.max=t.min+n})):"position"===e.options.animationType&&Eo((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=ro(l[e]);t.max=t.min+n}));var s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};ao(s,l,i.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};i.isShared?ao(c,e.applyTransform(u,!0),i.measured):ao(c,l,i.layout);var f=!go(s),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};so(v,i.layout,h.layout);var g={x:{min:0,max:0},y:{min:0,max:0}};so(g,l,m.actual),yo(v,g)||(d=!0)}}e.notifyListeners("didUpdate",{layout:l,snapshot:i,delta:c,layoutDelta:s,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(o=(r=e.options).onExitComplete)||void 0===o||o.call(r));e.options.transition=void 0}function Io(e){e.clearSnapshot()}function Do(e){e.clearMeasurements()}function Vo(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function Fo(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function Bo(e){e.resolveTargetDelta()}function Uo(e){e.calcProjection()}function $o(e){e.resetRotation()}function Wo(e){e.removeLeadSnapshot()}function Ho(e,t,n){e.translate=bt(t.translate,0,n),e.scale=bt(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Yo(e,t,n,r){e.min=bt(t.min,n.min,r),e.max=bt(t.max,n.max,r)}function Xo(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var qo={duration:.45,ease:[.4,0,.1,1]};function Qo(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var o=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));o&&e.mount(o,!0)}function Zo(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function Go(e){Zo(e.x),Zo(e.y)}var Ko=1,Jo=(0,e.createContext)({}),ei=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return de(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(e.Component);function ti(t){var n=t.preloadedFeatures,r=t.createVisualElement,o=t.projectionNodeConstructor,i=t.useRender,a=t.useVisualState,l=t.Component;return n&&function(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?nt.projectionNodeConstructor=e[t]:nt[t].Component=e[t])}(n),(0,e.forwardRef)((function(t,n){var u=function(t){var n,r=t.layoutId,o=null===(n=(0,e.useContext)(Ue))||void 0===n?void 0:n.id;return o&&void 0!==r?o+"-"+r:r}(t);t=pe(pe({},t),{layoutId:u});var s=(0,e.useContext)(at),c=null,f=function(t){var n=function(e,t){if(vt(e)){var n=e.initial,r=e.animate;return{initial:!1===n||pt(n)?n:void 0,animate:pt(r)?r:void 0}}return!1!==e.inherit?t:{}}(t,(0,e.useContext)(lt)),r=n.initial,o=n.animate;return(0,e.useMemo)((function(){return{initial:r,animate:o}}),[yt(r),yt(o)])}(t),d=s.isStatic?void 0:je((function(){if(Ro.hasEverUpdated)return Ko++})),p=a(t,s.isStatic);return!s.isStatic&&$e&&(f.visualElement=ct(l,p,pe(pe({},s),t),r),function(t,n,r,o){var i,a=n.layoutId,l=n.layout,u=n.drag,s=n.dragConstraints,c=n.layoutScroll,f=(0,e.useContext)(Jo);o&&r&&!(null==r?void 0:r.projection)&&(r.projection=new o(t,r.getLatestValues(),null===(i=r.parent)||void 0===i?void 0:i.projection),r.projection.setOptions({layoutId:a,layout:l,alwaysMeasureLayout:Boolean(u)||s&&ft(s),visualElement:r,scheduleRender:function(){return r.scheduleRender()},animationType:"string"==typeof l?l:"both",initialPromotionConfig:f,layoutScroll:c}))}(d,t,f.visualElement,o||nt.projectionNodeConstructor),c=function(t,n,r){var o=[];if((0,e.useContext)(rt),!n)return null;for(var i=0;i<it;i++){var a=ot[i],l=nt[a],u=l.isEnabled,s=l.Component;u(t)&&s&&o.push(e.createElement(s,pe({key:a},t,{visualElement:n})))}return o}(t,f.visualElement)),e.createElement(ei,{visualElement:f.visualElement,props:pe(pe({},s),t)},c,e.createElement(lt.Provider,{value:f},i(l,t,d,function(t,n,r){return(0,e.useCallback)((function(e){var o;e&&(null===(o=t.mount)||void 0===o||o.call(t,e)),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):ft(r)&&(r.current=e))}),[n])}(p,f.visualElement,n),p,s.isStatic,f.visualElement)))}))}function ni(e){function t(t,n){return void 0===n&&(n={}),ti(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var ri=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function oi(e){return"string"==typeof e&&!e.includes("-")&&!!(ri.indexOf(e)>-1||/[A-Z]/.test(e))}function ii(e,t){var n=t.layout,r=t.layoutId;return Po(e)||To(e)||(n||void 0!==r)&&(!!xo[e]||"opacity"===e)}var ai={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function li(e){return e.startsWith("--")}var ui=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function si(e,t,n,r){var o,i=e.style,a=e.vars,l=e.transform,u=e.transformKeys,s=e.transformOrigin;u.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(li(p))a[p]=h;else{var m=xr[p],v=ui(h,m);if(Po(p)){if(c=!0,l[p]=v,u.push(p),!d)continue;h!==(null!==(o=m.default)&&void 0!==o?o:0)&&(d=!1)}else To(p)?(s[p]=v,f=!0):i[p]=v}}c?i.transform=function(e,t,n,r){var o=e.transform,i=e.transformKeys,a=t.enableHardwareAcceleration,l=void 0===a||a,u=t.allowTransformNone,s=void 0===u||u,c="";i.sort(Co);for(var f=!1,d=i.length,p=0;p<d;p++){var h=i[p];c+="".concat(ai[h]||h,"(").concat(o[h],") "),"z"===h&&(f=!0)}return!f&&l?c+="translateZ(0)":c=c.trim(),r?c=r(o,n?"":c):s&&n&&(c="none"),c}(e,n,d,r):r?i.transform=r({},""):!t.transform&&i.transform&&(i.transform="none"),f&&(i.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,i=e.originZ,a=void 0===i?0:i;return"".concat(n," ").concat(o," ").concat(a)}(s))}function ci(e,t,n){for(var r in t)At(t[r])||ii(r,n)||(e[r]=t[r])}function fi(t,n,r){var o={},i=function(t,n,r){var o={};return ci(o,t.style||{},t),Object.assign(o,function(t,n,r){var o=t.transformTemplate;return(0,e.useMemo)((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};si(e,n,{enableHardwareAcceleration:!r},o);var t=e.style;return pe(pe({},e.vars),t)}),[n])}(t,n,r)),t.transformValues&&(o=t.transformValues(o)),o}(t,n,r);return Boolean(t.drag)&&!1!==t.dragListener&&(o.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-".concat("x"===t.drag?"y":"x")),o.style=i,o}var di=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function pi(e){return di.has(e)}var hi,mi=function(e){return!pi(e)};try{(hi=require("@emotion/is-prop-valid").default)&&(mi=function(e){return e.startsWith("on")?!pi(e):hi(e)})}catch(e){}function vi(e,t,n){return"string"==typeof e?e:Jt.transform(t+n*e)}var gi={offset:"stroke-dashoffset",array:"stroke-dasharray"},yi={offset:"strokeDashoffset",array:"strokeDasharray"};function bi(e,t,n,r){var o=t.attrX,i=t.attrY,a=t.originX,l=t.originY,u=t.pathLength,s=t.pathSpacing,c=void 0===s?1:s,f=t.pathOffset,d=void 0===f?0:f;si(e,he(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,r),e.attrs=e.style,e.style={};var p=e.attrs,h=e.style,m=e.dimensions;p.transform&&(m&&(h.transform=p.transform),delete p.transform),m&&(void 0!==a||void 0!==l||h.transform)&&(h.transformOrigin=function(e,t,n){var r=vi(t,e.x,e.width),o=vi(n,e.y,e.height);return"".concat(r," ").concat(o)}(m,void 0!==a?a:.5,void 0!==l?l:.5)),void 0!==o&&(p.x=o),void 0!==i&&(p.y=i),void 0!==u&&function(e,t,n,r,o){void 0===n&&(n=1),void 0===r&&(r=0),void 0===o&&(o=!0),e.pathLength=1;var i=o?gi:yi;e[i.offset]=Jt.transform(-r);var a=Jt.transform(t),l=Jt.transform(n);e[i.array]="".concat(a," ").concat(l)}(p,u,c,d,!1)}var xi=function(){return pe(pe({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function wi(t,n){var r=(0,e.useMemo)((function(){var e=xi();return bi(e,n,{enableHardwareAcceleration:!1},t.transformTemplate),pe(pe({},e.attrs),{style:pe({},e.style)})}),[n]);if(t.style){var o={};ci(o,t.style,t),r.style=pe(pe({},o),r.style)}return r}function Ei(t){return void 0===t&&(t=!1),function(n,r,o,i,a,l){var u=a.latestValues,s=(oi(n)?wi:fi)(r,u,l),c=function(e,t,n){var r={};for(var o in e)(mi(o)||!0===n&&pi(o)||!t&&!pi(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof n,t),f=pe(pe(pe({},c),s),{ref:i});return o&&(f["data-projection-id"]=o),(0,e.createElement)(n,f)}}var ki=/([a-z])([A-Z])/g,Si=function(e){return e.replace(ki,"$1-$2").toLowerCase()};function Ci(e,t,n,r){var o=t.style,i=t.vars;for(var a in Object.assign(e.style,o,r&&r.getProjectionStyles(n)),i)e.style.setProperty(a,i[a])}var Ai=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function Pi(e,t){for(var n in Ci(e,t),t.attrs)e.setAttribute(Ai.has(n)?n:Si(n),t.attrs[n])}function _i(e){var t=e.style,n={};for(var r in t)(At(t[r])||ii(r,e))&&(n[r]=t[r]);return n}function Ti(e){var t=_i(e);for(var n in e)At(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function Mi(e){return"object"==typeof e&&"function"==typeof e.start}function Li(e,t,n,r){var o=e.scrapeMotionValuesFromProps,i=e.createRenderState,a=e.onMount,l={latestValues:Ri(t,n,r,o),renderState:i()};return a&&(l.mount=function(e){return a(t,e,l)}),l}var Oi=function(t){return function(n,r){var o=(0,e.useContext)(lt),i=(0,e.useContext)(ze);return r?Li(t,n,o,i):je((function(){return Li(t,n,o,i)}))}};function Ri(e,t,n,r){var o={},i=!1===(null==n?void 0:n.initial),a=r(e);for(var l in a)o[l]=Oo(a[l]);var u=e.initial,s=e.animate,c=vt(e),f=gt(e);t&&f&&!c&&!1!==e.inherit&&(null!=u||(u=t.initial),null!=s||(s=t.animate));var d=i||!1===u,p=d?s:u;return p&&"boolean"!=typeof p&&!Mi(p)&&(Array.isArray(p)?p:[p]).forEach((function(t){var n=ht(e,t);if(n){var r=n.transitionEnd;n.transition;var i=he(n,["transitionEnd","transition"]);for(var a in i){var l=i[a];Array.isArray(l)&&(l=l[d?l.length-1:0]),null!==l&&(o[a]=l)}for(var a in r)o[a]=r[a]}})),o}var Ni,zi={useVisualState:Oi({scrapeMotionValuesFromProps:Ti,createRenderState:xi,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}bi(r,o,{enableHardwareAcceleration:!1},e.transformTemplate),Pi(t,r)}})},ji={useVisualState:Oi({scrapeMotionValuesFromProps:_i,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function Ii(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function Di(t,n,r,o){(0,e.useEffect)((function(){var e=t.current;if(r&&e)return Ii(e,n,r,o)}),[t,n,r,o])}function Vi(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Fi(e){return!!e.touches}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.InView="whileInView",e.Exit="exit"}(Ni||(Ni={}));var Bi={pageX:0,pageY:0};function Ui(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||Bi;return{x:n[t+"X"],y:n[t+"Y"]}}function $i(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Wi(e,t){return void 0===t&&(t="page"),{point:Fi(e)?Ui(e,t):$i(e,t)}}var Hi=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Wi(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},Yi={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Xi={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function qi(e){return $e&&null===window.onpointerdown?e:$e&&null===window.ontouchstart?Xi[e]:$e&&null===window.onmousedown?Yi[e]:e}function Qi(e,t,n,r){return Ii(e,qi(t),Hi(n,"pointerdown"===t),r)}function Zi(e,t,n,r){return Di(e,qi(t),n&&Hi(n,"pointerdown"===t),r)}function Gi(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Ki=Gi("dragHorizontal"),Ji=Gi("dragVertical");function ea(e){var t=!1;if("y"===e)t=Ji();else if("x"===e)t=Ki();else{var n=Ki(),r=Ji();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function ta(){var e=ea(!0);return!e||(e(),!1)}function na(e,t,n){return function(r,o){var i;Vi(r)&&!ta()&&(null===(i=e.animationState)||void 0===i||i.setActive(Ni.Hover,t),null==n||n(r,o))}}var ra=function(e,t){return!!t&&(e===t||ra(e,t.parentElement))},oa=new WeakMap,ia=new WeakMap,aa=function(e){var t;null===(t=oa.get(e.target))||void 0===t||t(e)},la=function(e){e.forEach(aa)};var ua={some:0,all:1};function sa(t,n,r,o){var i=o.root,a=o.margin,l=o.amount,u=void 0===l?"some":l,s=o.once;(0,e.useEffect)((function(){if(t){var e={root:null==i?void 0:i.current,rootMargin:a,threshold:"number"==typeof u?u:ua[u]};return function(e,t,n){var r=function(e){var t=e.root,n=he(e,["root"]),r=t||document;ia.has(r)||ia.set(r,{});var o=ia.get(r),i=JSON.stringify(n);return o[i]||(o[i]=new IntersectionObserver(la,pe({root:t},n))),o[i]}(t);return oa.set(e,n),r.observe(e),function(){oa.delete(e),r.unobserve(e)}}(r.getInstance(),e,(function(e){var t,o=e.isIntersecting;if(n.isInView!==o&&(n.isInView=o,!s||o||!n.hasEnteredView)){o&&(n.hasEnteredView=!0),null===(t=r.animationState)||void 0===t||t.setActive(Ni.InView,o);var i=r.getProps(),a=o?i.onViewportEnter:i.onViewportLeave;null==a||a(e)}}))}}),[t,i,a,u])}function ca(t,n,r,o){var i=o.fallback,a=void 0===i||i;(0,e.useEffect)((function(){t&&a&&requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var t=r.getProps().onViewportEnter;null==t||t(null),null===(e=r.animationState)||void 0===e||e.setActive(Ni.InView,!0)}))}),[t])}var fa=function(e){return function(t){return e(t),null}},da={inView:fa((function(t){var n=t.visualElement,r=t.whileInView,o=t.onViewportEnter,i=t.onViewportLeave,a=t.viewport,l=void 0===a?{}:a,u=(0,e.useRef)({hasEnteredView:!1,isInView:!1}),s=Boolean(r||o||i);l.once&&u.current.hasEnteredView&&(s=!1),("undefined"==typeof IntersectionObserver?ca:sa)(s,u.current,n,l)})),tap:fa((function(t){var n=t.onTap,r=t.onTapStart,o=t.onTapCancel,i=t.whileTap,a=t.visualElement,l=n||r||o||i,u=(0,e.useRef)(!1),s=(0,e.useRef)(null);function c(){var e;null===(e=s.current)||void 0===e||e.call(s),s.current=null}function f(){var e;return c(),u.current=!1,null===(e=a.animationState)||void 0===e||e.setActive(Ni.Tap,!1),!ta()}function d(e,t){f()&&(ra(a.getInstance(),e.target)?null==n||n(e,t):null==o||o(e,t))}function p(e,t){f()&&(null==o||o(e,t))}Zi(a,"pointerdown",l?function(e,t){var n;c(),u.current||(u.current=!0,s.current=En(Qi(window,"pointerup",d),Qi(window,"pointercancel",p)),null===(n=a.animationState)||void 0===n||n.setActive(Ni.Tap,!0),null==r||r(e,t))}:void 0),He(c)})),focus:fa((function(e){var t=e.whileFocus,n=e.visualElement;Di(n,"focus",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Ni.Focus,!0)}:void 0),Di(n,"blur",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Ni.Focus,!1)}:void 0)})),hover:fa((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,o=e.visualElement;Zi(o,"pointerenter",t||r?na(o,!0,t):void 0),Zi(o,"pointerleave",n||r?na(o,!1,n):void 0)}))};function pa(){var t=(0,e.useContext)(ze);if(null===t)return[!0,null];var n=t.isPresent,r=t.onExitComplete,o=t.register,i=Ve();return(0,e.useEffect)((function(){return o(i)}),[]),!n&&r?[!1,function(){return null==r?void 0:r(i)}]:[!0]}function ha(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var ma=function(e){return function(t){return t.test(e)}},va=[Bt,Jt,Kt,Gt,tn,en,{test:function(e){return"auto"===e},parse:function(e){return e}}],ga=function(e){return va.find(ma(e))},ya=ve(ve([],me(va),!1),[dn,bn],!1),ba=function(e){return ya.find(ma(e))};function xa(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Ct(n))}function wa(e,t){if(t)return(t[e]||t.default||t).from}function Ea(e,t,n){var r;void 0===n&&(n={});var o=mt(e,t,n.custom),i=(o||{}).transition,a=void 0===i?e.getDefaultTransition()||{}:i;n.transitionOverride&&(a=n.transitionOverride);var l=o?function(){return ka(e,o,n)}:function(){return Promise.resolve()},u=(null===(r=e.variantChildren)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var o=a.delayChildren,i=void 0===o?0:o,l=a.staggerChildren,u=a.staggerDirection;return function(e,t,n,r,o,i){void 0===n&&(n=0),void 0===r&&(r=0),void 0===o&&(o=1);var a=[],l=(e.variantChildren.size-1)*r,u=1===o?function(e){return void 0===e&&(e=0),e*r}:function(e){return void 0===e&&(e=0),l-e*r};return Array.from(e.variantChildren).sort(Sa).forEach((function(e,r){a.push(Ea(e,t,pe(pe({},i),{delay:n+u(r)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(a)}(e,t,i+r,l,u,n)}:function(){return Promise.resolve()},s=a.when;if(s){var c=me("beforeChildren"===s?[l,u]:[u,l],2),f=c[0],d=c[1];return f().then(d)}return Promise.all([l(),u(n.delay)])}function ka(e,t,n){var r,o=void 0===n?{}:n,i=o.delay,a=void 0===i?0:i,l=o.transitionOverride,u=o.type,s=e.makeTargetAnimatable(t),c=s.transition,f=void 0===c?e.getDefaultTransition():c,d=s.transitionEnd,p=he(s,["transition","transitionEnd"]);l&&(f=l);var h=[],m=u&&(null===(r=e.animationState)||void 0===r?void 0:r.getState()[u]);for(var v in p){var g=e.getValue(v),y=p[v];if(!(!g||void 0===y||m&&Ca(m,v))){var b=pe({delay:a},f);e.shouldReduceMotion&&Po(v)&&(b=pe(pe({},b),{type:!1,delay:0}));var x=Tr(v,g,y,b);h.push(x)}}return Promise.all(h).then((function(){d&&function(e,t){var n=mt(e,t),r=n?e.makeTargetAnimatable(n,!1):{},o=r.transitionEnd,i=void 0===o?{}:o;r.transition;var a=he(r,["transitionEnd","transition"]);for(var l in a=pe(pe({},a),i))xa(e,l,Sr(a[l]))}(e,d)}))}function Sa(e,t){return e.sortNodePosition(t)}function Ca(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}var Aa=[Ni.Animate,Ni.InView,Ni.Focus,Ni.Hover,Ni.Tap,Ni.Drag,Ni.Exit],Pa=ve([],me(Aa),!1).reverse(),_a=Aa.length;function Ta(e){var t,n=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return function(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var o=t.map((function(t){return Ea(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=Ea(e,t,n);else{var i="function"==typeof t?mt(e,t,n.custom):t;r=ka(e,i,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}(e,n,r)})))}}(e),r=((t={})[Ni.Animate]=Ma(!0),t[Ni.InView]=Ma(),t[Ni.Hover]=Ma(),t[Ni.Tap]=Ma(),t[Ni.Drag]=Ma(),t[Ni.Focus]=Ma(),t[Ni.Exit]=Ma(),t),o={},i=!0,a=function(t,n){var r=mt(e,n);if(r){r.transition;var o=r.transitionEnd,i=he(r,["transition","transitionEnd"]);t=pe(pe(pe({},t),i),o)}return t};function l(t,l){for(var u,s=e.getProps(),c=e.getVariantContext(!0)||{},f=[],d=new Set,p={},h=1/0,m=function(n){var o=Pa[n],m=r[o],v=null!==(u=s[o])&&void 0!==u?u:c[o],g=pt(v),y=o===l?m.isActive:null;!1===y&&(h=n);var b=v===c[o]&&v!==s[o]&&g;if(b&&i&&e.manuallyAnimateOnMount&&(b=!1),m.protectedKeys=pe({},p),!m.isActive&&null===y||!v&&!m.prevProp||Mi(v)||"boolean"==typeof v)return"continue";var x=function(e,t){return"string"==typeof t?t!==e:!!dt(t)&&!ha(t,e)}(m.prevProp,v),w=x||o===l&&m.isActive&&!b&&g||n>h&&g,E=Array.isArray(v)?v:[v],k=E.reduce(a,{});!1===y&&(k={});var S=m.prevResolvedValues,C=void 0===S?{}:S,A=pe(pe({},C),k),P=function(e){w=!0,d.delete(e),m.needsAnimating[e]=!0};for(var _ in A){var T=k[_],M=C[_];p.hasOwnProperty(_)||(T!==M?sr(T)&&sr(M)?!ha(T,M)||x?P(_):m.protectedKeys[_]=!0:void 0!==T?P(_):d.add(_):void 0!==T&&d.has(_)?P(_):m.protectedKeys[_]=!0)}m.prevProp=v,m.prevResolvedValues=k,m.isActive&&(p=pe(pe({},p),k)),i&&e.blockInitialAnimation&&(w=!1),w&&!b&&f.push.apply(f,ve([],me(E.map((function(e){return{animation:e,options:pe({type:o},t)}}))),!1))},v=0;v<_a;v++)m(v);if(o=pe({},p),d.size){var g={};d.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(g[t]=n)})),f.push({animation:g})}var y=Boolean(f.length);return i&&!1===s.initial&&!e.manuallyAnimateOnMount&&(y=!1),i=!1,y?n(f):Promise.resolve()}return{isAnimated:function(e){return void 0!==o[e]},animateChanges:l,setActive:function(t,n,o){var i;return r[t].isActive===n?Promise.resolve():(null===(i=e.variantChildren)||void 0===i||i.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n,l(o,t))},setAnimateFunction:function(t){n=t(e)},getState:function(){return r}}}function Ma(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var La={animation:fa((function(t){var n=t.visualElement,r=t.animate;n.animationState||(n.animationState=Ta(n)),Mi(r)&&(0,e.useEffect)((function(){return r.subscribe(n)}),[r])})),exit:fa((function(t){var n=t.custom,r=t.visualElement,o=me(pa(),2),i=o[0],a=o[1],l=(0,e.useContext)(ze);(0,e.useEffect)((function(){var e,t;r.isPresent=i;var o=null===(e=r.animationState)||void 0===e?void 0:e.setActive(Ni.Exit,!i,{custom:null!==(t=null==l?void 0:l.custom)&&void 0!==t?t:n});!i&&(null==o||o.then(a))}),[i])}))},Oa=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=za(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=no(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,i=Oe().timestamp;r.history.push(pe(pe({},o),{timestamp:i}));var a=r.handlers,l=a.onStart,u=a.onMove;t||(l&&l(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),u&&u(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=Ra(t,r.transformPagePoint),Vi(e)&&0===e.buttons?r.handlePointerUp(e,t):Re.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers,o=n.onEnd,i=n.onSessionEnd,a=za(Ra(t,r.transformPagePoint),r.history);r.startEvent&&o&&o(e,a),i&&i(e,a)},!(Fi(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var i=Ra(Wi(e),this.transformPagePoint),a=i.point,l=Oe().timestamp;this.history=[pe(pe({},a),{timestamp:l})];var u=t.onSessionStart;u&&u(e,za(i,this.history)),this.removeListeners=En(Qi(window,"pointermove",this.handlePointerMove),Qi(window,"pointerup",this.handlePointerUp),Qi(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),Pe.update(this.updatePoint)},e}();function Ra(e,t){return t?{point:t(e.point)}:e}function Na(e,t){return{x:e.x-t.x,y:e.y-t.y}}function za(e,t){var n=e.point;return{point:n,delta:Na(n,Ia(t)),offset:Na(n,ja(t)),velocity:Da(t,.1)}}function ja(e){return e[0]}function Ia(e){return e[e.length-1]}function Da(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Ia(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Kn(t)));)n--;if(!r)return{x:0,y:0};var i=(o.timestamp-r.timestamp)/1e3;if(0===i)return{x:0,y:0};var a={x:(o.x-r.x)/i,y:(o.y-r.y)/i};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function Va(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function Fa(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=me([o,r],2))[0],o=n[1]),{min:r,max:o}}var Ba=.35;function Ua(e,t,n){return{min:$a(e,t),max:$a(e,n)}}function $a(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function Wa(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function Ha(e,t){return Wa(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var Ya=new WeakMap,Xa=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,t){var n=this,r=(void 0===t?{}:t).snapToCursor,o=void 0!==r&&r;!1!==this.visualElement.isPresent&&(this.panSession=new Oa(e,{onSessionStart:function(e){n.stopAnimation(),o&&n.snapToCursor(Wi(e,"page").point)},onStart:function(e,t){var r,o=n.getProps(),i=o.drag,a=o.dragPropagation,l=o.onDragStart;(!i||a||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=ea(i),n.openGlobalLock))&&(n.isDragging=!0,n.currentDirection=null,n.resolveConstraints(),n.visualElement.projection&&(n.visualElement.projection.isAnimationBlocked=!0,n.visualElement.projection.target=void 0),Eo((function(e){var t,r,o=n.getAxisMotionValue(e).get()||0;if(Kt.test(o)){var i=null===(r=null===(t=n.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===r?void 0:r.actual[e];i&&(o=ro(i)*(parseFloat(o)/100))}n.originPoint[e]=o})),null==l||l(e,t),null===(r=n.visualElement.animationState)||void 0===r||r.setActive(Ni.Drag,!0))},onMove:function(e,t){var r=n.getProps(),o=r.dragPropagation,i=r.dragDirectionLock,a=r.onDirectionLock,l=r.onDrag;if(o||n.openGlobalLock){var u=t.offset;if(i&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(u),void(null!==n.currentDirection&&(null==a||a(n.currentDirection)));n.updateAxis("x",t.point,u),n.updateAxis("y",t.point,u),n.visualElement.syncRender(),null==l||l(e,t)}},onSessionEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var o=this.getProps().onDragEnd;null==o||o(e,t)}},e.prototype.cancel=function(){var e,t;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(Ni.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r,o,i,a,l,u=this.getProps().drag;if(n&&qa(e,u,this.currentDirection)){var s=this.getAxisMotionValue(e),c=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(r=c,o=this.constraints[e],i=this.elastic[e],a=o.min,l=o.max,void 0!==a&&r<a?r=i?bt(a,r,i.min):Math.max(r,a):void 0!==l&&r>l&&(r=i?bt(l,r,i.max):Math.min(r,l)),c=r),s.set(c)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,o=(this.visualElement.projection||{}).layout,i=this.constraints;n&&ft(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!o)&&function(e,t){var n=t.top,r=t.left,o=t.bottom,i=t.right;return{x:Va(e.x,r,i),y:Va(e.y,n,o)}}(o.actual,n),this.elastic=function(e){return void 0===e&&(e=Ba),!1===e?e=0:!0===e&&(e=Ba),{x:Ua(e,"left","right"),y:Ua(e,"top","bottom")}}(r),i!==this.constraints&&o&&this.constraints&&!this.hasMutatedConstraints&&Eo((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!ft(t))return!1;var r=t.current,o=this.visualElement.projection;if(!o||!o.layout)return!1;var i=function(e,t,n){var r=Ha(e,n),o=t.scroll;return o&&(qr(r.x,o.x),qr(r.y,o.y)),r}(r,o.root,this.visualElement.getTransformPagePoint()),a=function(e,t){return{x:Fa(e.x,t.x),y:Fa(e.y,t.y)}}(o.layout.actual,i);if(n){var l=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(a));this.hasMutatedConstraints=!!l,l&&(a=Wa(l))}return a},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),r=n.drag,o=n.dragMomentum,i=n.dragElastic,a=n.dragTransition,l=n.dragSnapToOrigin,u=n.onDragTransitionEnd,s=this.constraints||{},c=Eo((function(n){var u;if(qa(n,r,t.currentDirection)){var c=null!==(u=null==s?void 0:s[n])&&void 0!==u?u:{};l&&(c={min:0,max:0});var f=i?200:1e6,d=i?40:1e7,p=pe(pe({type:"inertia",velocity:o?e[n]:0,bounceStiffness:f,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10},a),c);return t.startAxisValueAnimation(n,p)}}));return Promise.all(c).then(u)},e.prototype.startAxisValueAnimation=function(e,t){return Tr(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;Eo((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;Eo((function(n){if(qa(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,o=t.getAxisMotionValue(n);if(r&&r.layout){var i=r.layout.actual[n],a=i.min,l=i.max;o.set(e[n]-bt(a,l,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,o=n.dragConstraints,i=this.visualElement.projection;if(ft(o)&&i&&this.constraints){this.stopAnimation();var a={x:0,y:0};Eo((function(e){var n=t.getAxisMotionValue(e);if(n){var r=n.get();a[e]=function(e,t){var n=.5,r=ro(e),o=ro(t);return o>r?n=Nt(t.min,t.max-r,e.min):r>o&&(n=Nt(e.min,e.max-o,t.min)),Pt(0,1,n)}({min:r,max:r},t.constraints[e])}}));var l=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=l?l({},""):"none",null===(e=i.root)||void 0===e||e.updateScroll(),i.updateLayout(),this.resolveConstraints(),Eo((function(e){if(qa(e,r,null)){var n=t.getAxisMotionValue(e),o=t.constraints[e],i=o.min,l=o.max;n.set(bt(i,l,a[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;Ya.set(this.visualElement,this);var n=Qi(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=function(){ft(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},o=this.visualElement.projection,i=o.addEventListener("measure",r);o&&!o.layout&&(null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout()),r();var a=Ii(window,"resize",(function(){t.scalePositionWithinConstraints()}));return o.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(Eo((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){a(),n(),i()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,i=e.dragPropagation,a=void 0!==i&&i,l=e.dragConstraints,u=void 0!==l&&l,s=e.dragElastic,c=void 0===s?Ba:s,f=e.dragMomentum,d=void 0===f||f;return pe(pe({},e),{drag:n,dragDirectionLock:o,dragPropagation:a,dragConstraints:u,dragElastic:c,dragMomentum:d})},e}();function qa(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Qa={pan:fa((function(t){var n=t.onPan,r=t.onPanStart,o=t.onPanEnd,i=t.onPanSessionStart,a=t.visualElement,l=n||r||o||i,u=(0,e.useRef)(null),s=(0,e.useContext)(at).transformPagePoint,c={onSessionStart:i,onStart:r,onMove:n,onEnd:function(e,t){u.current=null,o&&o(e,t)}};(0,e.useEffect)((function(){null!==u.current&&u.current.updateHandlers(c)})),Zi(a,"pointerdown",l&&function(e){u.current=new Oa(e,c,{transformPagePoint:s})}),He((function(){return u.current&&u.current.end()}))})),drag:fa((function(t){var n=t.dragControls,r=t.visualElement,o=je((function(){return new Xa(r)}));(0,e.useEffect)((function(){return n&&n.subscribe(o)}),[o,n]),(0,e.useEffect)((function(){return o.addListeners()}),[o])}))},Za=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"],Ga=function(e){var t=e.treeType,n=void 0===t?"":t,r=e.build,o=e.getBaseTarget,i=e.makeTargetAnimatable,a=e.measureViewportBox,l=e.render,u=e.readValueFromInstance,s=e.removeValueFromRenderState,c=e.sortNodePosition,f=e.scrapeMotionValuesFromProps;return function(e,t){var d=e.parent,p=e.props,h=e.presenceId,m=e.blockInitialAnimation,v=e.visualState,g=e.shouldReduceMotion;void 0===t&&(t={});var y,b,x=!1,w=v.latestValues,E=v.renderState,k=function(){var e=Za.map((function(){return new kt})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Za.forEach((function(r){var o,i="on"+r,a=e[i];null===(o=t[r])||void 0===o||o.call(t),a&&(t[r]=n[i](a))}))}};return e.forEach((function(e,t){n["on"+Za[t]]=function(t){return e.add(t)},n["notify"+Za[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,ve([],me(t),!1))}})),n}(),S=new Map,C=new Map,A={},P=pe({},w);function _(){y&&x&&(T(),l(y,E,p.style,I.projection))}function T(){r(I,E,w,t,p)}function M(){k.notifyUpdate(w)}function L(e,t){var n=t.onChange((function(t){w[e]=t,p.onUpdate&&Re.update(M,!1,!0)})),r=t.onRenderRequest(I.scheduleRender);C.set(e,(function(){n(),r()}))}var O=f(p);for(var R in O){var N=O[R];void 0!==w[R]&&At(N)&&N.set(w[R],!1)}var z=vt(p),j=gt(p),I=pe(pe({treeType:n,current:null,depth:d?d.depth+1:0,parent:d,children:new Set,presenceId:h,shouldReduceMotion:g,variantChildren:j?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==d?void 0:d.isMounted()),blockInitialAnimation:m,isMounted:function(){return Boolean(y)},mount:function(e){x=!0,y=I.current=e,I.projection&&I.projection.mount(e),j&&d&&!z&&(b=null==d?void 0:d.addVariantChild(I)),S.forEach((function(e,t){return L(t,e)})),null==d||d.children.add(I),I.setProps(p)},unmount:function(){var e;null===(e=I.projection)||void 0===e||e.unmount(),Pe.update(M),Pe.render(_),C.forEach((function(e){return e()})),null==b||b(),null==d||d.children.delete(I),k.clearAllListeners(),y=void 0,x=!1},addVariantChild:function(e){var t,n=I.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return c&&n===e.treeType?c(I.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return j?I:null==d?void 0:d.getClosestVariantNode()},getLayoutId:function(){return p.layoutId},getInstance:function(){return y},getStaticValue:function(e){return w[e]},setStaticValue:function(e,t){return w[e]=t},getLatestValues:function(){return w},setVisibility:function(e){I.isVisible!==e&&(I.isVisible=e,I.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),i(I,e,p,t)},measureViewportBox:function(){return a(y,p)},addValue:function(e,t){I.hasValue(e)&&I.removeValue(e),S.set(e,t),w[e]=t.get(),L(e,t)},removeValue:function(e){var t;S.delete(e),null===(t=C.get(e))||void 0===t||t(),C.delete(e),delete w[e],s(e,E)},hasValue:function(e){return S.has(e)},getValue:function(e,t){var n=S.get(e);return void 0===n&&void 0!==t&&(n=Ct(t),I.addValue(e,n)),n},forEachValue:function(e){return S.forEach(e)},readValue:function(e){var n;return null!==(n=w[e])&&void 0!==n?n:u(y,e,t)},setBaseTarget:function(e,t){P[e]=t},getBaseTarget:function(e){if(o){var t=o(p,e);if(void 0!==t&&!At(t))return t}return P[e]}},k),{build:function(){return T(),E},scheduleRender:function(){Re.render(_,!1,!0)},syncRender:_,setProps:function(e){(e.transformTemplate||p.transformTemplate)&&I.scheduleRender(),p=e,k.updatePropListeners(e),A=function(e,t,n){var r;for(var o in t){var i=t[o],a=n[o];if(At(i))e.addValue(o,i);else if(At(a))e.addValue(o,Ct(i));else if(a!==i)if(e.hasValue(o)){var l=e.getValue(o);!l.hasAnimated&&l.set(i)}else e.addValue(o,Ct(null!==(r=e.getStaticValue(o))&&void 0!==r?r:i))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}(I,f(p),A)},getProps:function(){return p},getVariant:function(e){var t;return null===(t=p.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return p.transition},getTransformPagePoint:function(){return p.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==d?void 0:d.getVariantContext();if(!z){var t=(null==d?void 0:d.getVariantContext())||{};return void 0!==p.initial&&(t.initial=p.initial),t}for(var n={},r=0;r<Ja;r++){var o=Ka[r],i=p[o];(pt(i)||!1===i)&&(n[o]=i)}return n}});return I}},Ka=ve(["initial"],me(Aa),!1),Ja=Ka.length;function el(e){return"string"==typeof e&&e.startsWith("var(--")}var tl=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function nl(e,t,n){void 0===n&&(n=1),'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.');var r=me(function(e){var t=tl.exec(e);if(!t)return[,];var n=me(t,3);return[n[1],n[2]]}(e),2),o=r[0],i=r[1];if(o){var a=window.getComputedStyle(t).getPropertyValue(o);return a?a.trim():el(i)?nl(i,t,n+1):i}}var rl,ol=new Set(["width","height","top","left","right","bottom","x","y"]),il=function(e){return ol.has(e)},al=function(e,t){e.set(t,!1),e.set(t)},ll=function(e){return e===Bt||e===Jt};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(rl||(rl={}));var ul=function(e,t){return parseFloat(e.split(", ")[t])},sl=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var i=o.match(/^matrix3d\((.+)\)$/);if(i)return ul(i[1],t);var a=o.match(/^matrix\((.+)\)$/);return a?ul(a[1],e):0}},cl=new Set(["x","y","z"]),fl=So.filter((function(e){return!cl.has(e)})),dl={width:function(e,t){var n=e.x,r=t.paddingLeft,o=void 0===r?"0":r,i=t.paddingRight,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},height:function(e,t){var n=e.y,r=t.paddingTop,o=void 0===r?"0":r,i=t.paddingBottom,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:sl(4,13),y:sl(5,14)};function pl(e,t,n,r){return function(e){return Object.keys(e).some(il)}(t)?function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=pe({},t),r=pe({},r);var o=Object.keys(t).filter(il),i=[],a=!1,l=[];if(o.forEach((function(o){var u=e.getValue(o);if(e.hasValue(o)){var s,c=n[o],f=ga(c),d=t[o];if(sr(d)){var p=d.length,h=null===d[0]?1:0;c=d[h],f=ga(c);for(var m=h;m<p;m++)s?ga(d[m]):(s=ga(d[m]))===f||ll(f)&&ll(s)}else s=ga(d);if(f!==s)if(ll(f)&&ll(s)){var v=u.get();"string"==typeof v&&u.set(parseFloat(v)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&s===Jt&&(t[o]=d.map(parseFloat))}else(null==f?void 0:f.transform)&&(null==s?void 0:s.transform)&&(0===c||0===d)?0===c?u.set(s.transform(c)):t[o]=f.transform(d):(a||(i=function(e){var t=[];return fl.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),a=!0),l.push(o),r[o]=void 0!==r[o]?r[o]:t[o],al(u,d))}})),l.length){var u=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),i=getComputedStyle(o),a=i.display,l={};"none"===a&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){l[e]=dl[e](r,i)})),t.syncRender();var u=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);al(r,l[n]),e[n]=dl[n](u,i)})),e}(t,e,l);return i.length&&i.forEach((function(t){var n=me(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.syncRender(),{target:u,transitionEnd:r}}return{target:t,transitionEnd:r}}(e,t,n,r):{target:t,transitionEnd:r}}var hl={treeType:"dom",readValueFromInstance:function(e,t){if(Po(t)){var n=Er(t);return n&&n.default||0}var r,o=(r=e,window.getComputedStyle(r));return(li(t)?o.getPropertyValue(t):o[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return Ha(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,r){var o=n.transformValues;void 0===r&&(r=!0);var i=t.transition,a=t.transitionEnd,l=he(t,["transition","transitionEnd"]),u=function(e,t,n){var r,o,i={};for(var a in e)i[a]=null!==(r=wa(a,t))&&void 0!==r?r:null===(o=n.getValue(a))||void 0===o?void 0:o.get();return i}(l,i||{},e);if(o&&(a&&(a=o(a)),l&&(l=o(l)),u&&(u=o(u))),r){!function(e,t,n){var r,o,i,a,l=Object.keys(t).filter((function(t){return!e.hasValue(t)})),u=l.length;if(u)for(var s=0;s<u;s++){var c=l[s],f=t[c],d=null;Array.isArray(f)&&(d=f[0]),null===d&&(d=null!==(o=null!==(r=n[c])&&void 0!==r?r:e.readValue(c))&&void 0!==o?o:t[c]),null!=d&&("string"==typeof d&&(/^\-?\d*\.?\d+$/.test(d)||/^0[^.\s]+$/.test(d))?d=parseFloat(d):!ba(d)&&bn.test(f)&&(d=kr(c,f)),e.addValue(c,Ct(d)),null!==(i=(a=n)[c])&&void 0!==i||(a[c]=d),e.setBaseTarget(c,d))}}(e,l,u);var s=function(e,t,n,r){var o=function(e,t,n){var r,o=he(t,[]),i=e.getInstance();if(!(i instanceof Element))return{target:o,transitionEnd:n};for(var a in n&&(n=pe({},n)),e.forEachValue((function(e){var t=e.get();if(el(t)){var n=nl(t,i);n&&e.set(n)}})),o){var l=o[a];if(el(l)){var u=nl(l,i);u&&(o[a]=u,n&&(null!==(r=n[a])&&void 0!==r||(n[a]=l)))}}return{target:o,transitionEnd:n}}(e,t,r);return pl(e,t=o.target,n,r=o.transitionEnd)}(e,l,u,a);a=s.transitionEnd,l=s.target}return pe({transition:i,transitionEnd:a},l)},scrapeMotionValuesFromProps:_i,build:function(e,t,n,r,o){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),si(t,n,r,o.transformTemplate)},render:Ci},ml=Ga(hl),vl=Ga(pe(pe({},hl),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return Po(t)?(null===(n=Er(t))||void 0===n?void 0:n.default)||0:(t=Ai.has(t)?t:Si(t),e.getAttribute(t))},scrapeMotionValuesFromProps:Ti,build:function(e,t,n,r,o){bi(t,n,r,o.transformTemplate)},render:Pi})),gl=function(e,t){return oi(e)?vl(t,{enableHardwareAcceleration:!1}):ml(t,{enableHardwareAcceleration:!0})};function yl(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var bl={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!Jt.test(e))return e;e=parseFloat(e)}var n=yl(e,t.target.x),r=yl(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},xl="_$css",wl={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,o=e,i=e.includes("var("),a=[];i&&(e=e.replace(tl,(function(e){return a.push(e),xl})));var l=bn.parse(e);if(l.length>5)return o;var u=bn.createTransformer(e),s="number"!=typeof l[0]?1:0,c=r.x.scale*n.x,f=r.y.scale*n.y;l[0+s]/=c,l[1+s]/=f;var d=bt(c,f,.5);"number"==typeof l[2+s]&&(l[2+s]/=d),"number"==typeof l[3+s]&&(l[3+s]/=d);var p=u(l);if(i){var h=0;p=p.replace(xl,(function(){var e=a[h];return h++,e}))}return p}},El=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return de(t,e),t.prototype.componentDidMount=function(){var e,t=this,n=this.props,r=n.visualElement,o=n.layoutGroup,i=n.switchLayoutGroup,a=n.layoutId,l=r.projection;e=kl,Object.assign(xo,e),l&&((null==o?void 0:o.group)&&o.group.add(l),(null==i?void 0:i.register)&&a&&i.register(l),l.root.didUpdate(),l.addEventListener("animationComplete",(function(){t.safeToRemove()})),l.setOptions(pe(pe({},l.options),{onExitComplete:function(){return t.safeToRemove()}}))),Ro.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,o=n.visualElement,i=n.drag,a=n.isPresent,l=o.projection;return l?(l.isPresent=a,i||e.layoutDependency!==r||void 0===r?l.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?l.promote():l.relegate()||Re.postRender((function(){var e;(null===(e=l.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,o=t.projection;o&&(o.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(o),(null==r?void 0:r.deregister)&&r.deregister(o))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(e.Component),kl={borderRadius:pe(pe({},bl),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:bl,borderTopRightRadius:bl,borderBottomLeftRadius:bl,borderBottomRightRadius:bl,boxShadow:wl},Sl={measureLayout:function(t){var n=me(pa(),2),r=n[0],o=n[1],i=(0,e.useContext)(Ue);return e.createElement(El,pe({},t,{layoutGroup:i,switchLayoutGroup:(0,e.useContext)(Jo),isPresent:r,safeToRemove:o}))}},Cl=No({attachResizeListener:function(e,t){return e.addEventListener("resize",t,{passive:!0}),function(){return e.removeEventListener("resize",t)}},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}}}),Al={current:void 0},Pl=No({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!Al.current){var e=new Cl(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),Al.current=e}return Al.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"}}),_l=pe(pe(pe(pe({},La),da),Qa),Sl),Tl=ni((function(e,t){return function(e,t,n,r,o){var i=t.forwardMotionProps,a=void 0!==i&&i,l=oi(e)?zi:ji;return pe(pe({},l),{preloadedFeatures:n,useRender:Ei(a),createVisualElement:r,projectionNodeConstructor:o,Component:e})}(e,t,_l,gl,Pl)}));const Ml=function(t){var n=(0,e.useRef)();return(0,e.useEffect)((function(){n.current&&n.current.querySelector("input").focus()}),[n.current]),e.createElement(Tl.div,{ref:n,className:"p6o-hud-searchpanel",transition:{type:"spring",duration:.4},initial:{opacity:0,width:0},animate:{opacity:1,width:340},exit:{opacity:0,width:0}},e.createElement("input",{value:t.query||"",onChange:function(e){return t.onChange(e.target.value)}}))};function Ll(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ol=function(t){var n,r,o=(n=(0,e.useState)(),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Ll(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ll(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return e.createElement("div",{className:"p6o-hud"},e.createElement("div",{className:"p6o-magic-button",onClick:function(){return a(!i)}},e.createElement(et,null)),e.createElement(Xe,null,i&&e.createElement(Ml,{query:t.searchQuery,onChange:t.onChangeSearchQuery})))},Rl=e.createContext(null);function Nl(e){return{longitude:e.center.lng,latitude:e.center.lat,zoom:e.zoom,pitch:e.pitch,bearing:e.bearing,padding:e.padding}}function zl(e,t){const n=t.viewState||t;let r=!1;if("longitude"in n&&"latitude"in n){const t=e.center;e.center=new t.constructor(n.longitude,n.latitude),r=r||t!==e.center}if("zoom"in n){const t=e.zoom;e.zoom=n.zoom,r=r||t!==e.zoom}if("bearing"in n){const t=e.bearing;e.bearing=n.bearing,r=r||t!==e.bearing}if("pitch"in n){const t=e.pitch;e.pitch=n.pitch,r=r||t!==e.pitch}return n.padding&&!e.isPaddingEqual(n.padding)&&(r=!0,e.padding=n.padding),r}const jl=["type","source","source-layer","minzoom","maxzoom","filter","layout"];function Il(e){if(!e)return null;if("string"==typeof e)return e;if("toJS"in e&&(e=e.toJS()),!e.layers)return e;const t={};for(const n of e.layers)t[n.id]=n;const n=e.layers.map((e=>{const n=t[e.ref];let r=null;if("interactive"in e&&(r={...e},delete r.interactive),n){r=r||{...e},delete r.ref;for(const e of jl)e in n&&(r[e]=n[e])}return r||e}));return{...e,layers:n}}function Dl(e,t){if(e===t)return!0;if(!e||!t)return!1;if(Array.isArray(e)){if(!Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!Dl(e[n],t[n]))return!1;return!0}if(Array.isArray(t))return!1;if("object"==typeof e&&"object"==typeof t){const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const r of n){if(!t.hasOwnProperty(r))return!1;if(!Dl(e[r],t[r]))return!1}return!0}return!1}const Vl={mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",click:"onClick",dblclick:"onDblClick",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mouseout:"onMouseOut",contextmenu:"onContextMenu",touchstart:"onTouchStart",touchend:"onTouchEnd",touchmove:"onTouchMove",touchcancel:"onTouchCancel"},Fl={movestart:"onMoveStart",move:"onMove",moveend:"onMoveEnd",dragstart:"onDragStart",drag:"onDrag",dragend:"onDragEnd",zoomstart:"onZoomStart",zoom:"onZoom",zoomend:"onZoomEnd",rotatestart:"onRotateStart",rotate:"onRotate",rotateend:"onRotateEnd",pitchstart:"onPitchStart",pitch:"onPitch",pitchend:"onPitchEnd"},Bl={wheel:"onWheel",boxzoomstart:"onBoxZoomStart",boxzoomend:"onBoxZoomEnd",boxzoomcancel:"onBoxZoomCancel",resize:"onResize",load:"onLoad",render:"onRender",idle:"onIdle",remove:"onRemove",data:"onData",styledata:"onStyleData",sourcedata:"onSourceData",error:"onError"},Ul=["minZoom","maxZoom","minPitch","maxPitch","maxBounds","projection","renderWorldCopies"],$l=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch"];class Wl{constructor(e,t,n){this._map=null,this._internalUpdate=!1,this._inRender=!1,this._hoveredFeatures=null,this._deferredEvents={move:!1,zoom:!1,pitch:!1,rotate:!1},this._onEvent=e=>{const t=this.props[Bl[e.type]];t&&t(e)},this._onPointerEvent=e=>{"mousemove"!==e.type&&"mouseout"!==e.type||this._updateHover(e);const t=this.props[Vl[e.type]];if(t){if(this.props.interactiveLayerIds&&"mouseover"!==e.type&&"mouseout"!==e.type){const t=this._hoveredFeatures||this._map.queryRenderedFeatures(e.point,{layers:this.props.interactiveLayerIds});if(!t.length)return;e.features=t}t(e),delete e.features}},this._onCameraEvent=e=>{if(!this._internalUpdate){const t=this.props[Fl[e.type]];t&&t(e)}e.type in this._deferredEvents&&(this._deferredEvents[e.type]=!1)},this._MapClass=e,this.props=t,this._initialize(n)}get map(){return this._map}get transform(){return this._renderTransform}setProps(e){const t=this.props;this.props=e;const n=this._updateSettings(e,t);n&&(this._renderTransform=this._map.transform.clone());const r=this._updateSize(e),o=this._updateViewState(e,!0);this._updateStyle(e,t),this._updateStyleComponents(e,t),this._updateHandlers(e,t),(n||r||o&&!this._map.isMoving())&&this.redraw()}static reuse(e,t){const n=Wl.savedMaps.pop();if(!n)return null;const r=n.map,o=r.getContainer();for(t.className=o.className;o.childNodes.length>0;)t.appendChild(o.childNodes[0]);return r._container=t,e.initialViewState&&n._updateViewState(e.initialViewState,!1),r.resize(),n.setProps({...e,styleDiffing:!1}),r.isStyleLoaded()?r.fire("load"):r.once("styledata",(()=>r.fire("load"))),n}_initialize(e){const{props:t}=this,n={...t,...t.initialViewState,accessToken:t.mapboxAccessToken||Hl()||null,container:e,style:Il(t.mapStyle)},r=n.initialViewState||n.viewState||n;if(Object.assign(n,{center:[r.longitude||0,r.latitude||0],zoom:r.zoom||0,pitch:r.pitch||0,bearing:r.bearing||0}),t.gl){const e=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=()=>(HTMLCanvasElement.prototype.getContext=e,t.gl)}const o=new this._MapClass(n);r.padding&&o.setPadding(r.padding),t.cursor&&(o.getCanvas().style.cursor=t.cursor),this._renderTransform=o.transform.clone();const i=o._render;o._render=e=>{this._inRender=!0,i.call(o,e),this._inRender=!1};const a=o._renderTaskQueue.run;o._renderTaskQueue.run=e=>{a.call(o._renderTaskQueue,e),this._onBeforeRepaint()},o.on("render",(()=>this._onAfterRepaint()));const l=o.fire;o.fire=this._fireEvent.bind(this,l),o.on("resize",(()=>{this._renderTransform.resize(o.transform.width,o.transform.height)})),o.on("styledata",(()=>this._updateStyleComponents(this.props,{}))),o.on("sourcedata",(()=>this._updateStyleComponents(this.props,{})));for(const e in Vl)o.on(e,this._onPointerEvent);for(const e in Fl)o.on(e,this._onCameraEvent);for(const e in Bl)o.on(e,this._onEvent);this._map=o}recycle(){Wl.savedMaps.push(this)}destroy(){this._map.remove()}redraw(){const e=this._map;!this._inRender&&e.style&&(e._frame&&(e._frame.cancel(),e._frame=null),e._render())}_updateSize(e){const{viewState:t}=e;if(t){const e=this._map;if(t.width!==e.transform.width||t.height!==e.transform.height)return e.resize(),!0}return!1}_updateViewState(e,t){if(this._internalUpdate)return!1;const n=this._map,r=this._renderTransform,{zoom:o,pitch:i,bearing:a}=r,l=zl(r,{...Nl(n.transform),...e});if(l&&t){const e=this._deferredEvents;e.move=!0,e.zoom||(e.zoom=o!==r.zoom),e.rotate||(e.rotate=a!==r.bearing),e.pitch||(e.pitch=i!==r.pitch)}return n.isMoving()||zl(n.transform,e),l}_updateSettings(e,t){const n=this._map;let r=!1;for(const o of Ul)o in e&&!Dl(e[o],t[o])&&(r=!0,n[`set${o[0].toUpperCase()}${o.slice(1)}`](e[o]));return r}_updateStyle(e,t){if(e.cursor!==t.cursor&&(this._map.getCanvas().style.cursor=e.cursor),e.mapStyle!==t.mapStyle){const t={diff:e.styleDiffing};return"localIdeographFontFamily"in e&&(t.localIdeographFontFamily=e.localIdeographFontFamily),this._map.setStyle(Il(e.mapStyle),t),!0}return!1}_updateStyleComponents(e,t){const n=this._map;let r=!1;return n.style.loaded()&&("light"in e&&!Dl(e.light,t.light)&&(r=!0,n.setLight(e.light)),"fog"in e&&!Dl(e.fog,t.fog)&&(r=!0,n.setFog(e.fog)),"terrain"in e&&!Dl(e.terrain,t.terrain)&&(e.terrain&&!n.getSource(e.terrain.source)||(r=!0,n.setTerrain(e.terrain)))),r}_updateHandlers(e,t){const n=this._map;let r=!1;for(const o of $l){const i=e[o];Dl(i,t[o])||(r=!0,i?n[o].enable(i):n[o].disable())}return r}_updateHover(e){const{props:t}=this;if(t.interactiveLayerIds&&(t.onMouseMove||t.onMouseEnter||t.onMouseLeave)){const n=e.type,r=this._hoveredFeatures?.length>0;let o;if("mousemove"===n)try{o=this._map.queryRenderedFeatures(e.point,{layers:t.interactiveLayerIds})}catch{o=[]}else o=[];const i=o.length>0;!i&&r&&(e.type="mouseleave",this._onPointerEvent(e)),this._hoveredFeatures=o,i&&!r&&(e.type="mouseenter",this._onPointerEvent(e)),e.type=n}else this._hoveredFeatures=null}_fireEvent(e,t,n){const r=this._map,o=r.transform,i="string"==typeof t?t:t.type;return"move"===i&&this._updateViewState(this.props,!1),i in Fl&&("object"==typeof t&&(t.viewState=Nl(o)),this._map.isMoving())?(r.transform=this._renderTransform,e.call(r,t,n),r.transform=o,r):(e.call(r,t,n),r)}_onBeforeRepaint(){const e=this._map;this._internalUpdate=!0;for(const t in this._deferredEvents)this._deferredEvents[t]&&e.fire(t);this._internalUpdate=!1;const t=this._map.transform;this._map.transform=this._renderTransform,this._onAfterRepaint=()=>{this._map.transform=t}}}function Hl(){let e=null;if("undefined"!=typeof location){const t=/access_token=([^&\/]*)/.exec(location.search);e=t&&t[1]}try{e=e||process.env.MapboxAccessToken}catch{}try{e=e||process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}catch{}return e}Wl.savedMaps=[];const Yl=["setMaxBounds","setMinZoom","setMaxZoom","setMinPitch","setMaxPitch","setRenderWorldCopies","setProjection","setStyle","addSource","removeSource","addLayer","removeLayer","setLayerZoomRange","setFilter","setPaintProperty","setLayoutProperty","setLight","setTerrain","setFog","remove"];function Xl(e,t){if(!e)return null;const n=e.map,r={getMap:()=>n,getCenter:()=>e.transform.center,getZoom:()=>e.transform.zoom,getBearing:()=>e.transform.bearing,getPitch:()=>e.transform.pitch,getPadding:()=>e.transform.padding,getBounds:()=>e.transform.getBounds(),project:n=>e.transform.locationPoint(t.LngLat.convert(n)),unproject:n=>e.transform.pointLocation(t.Point.convert(n))};for(const e of function(e){const t=new Set;let n=e;for(;n;){for(const r of Object.getOwnPropertyNames(n))"_"!==r[0]&&"function"==typeof e[r]&&"fire"!==r&&"setEventedParent"!==r&&t.add(r);n=Object.getPrototypeOf(n)}return Array.from(t)}(n))e in r||Yl.includes(e)||(r[e]=n[e].bind(n));return r}const ql="undefined"!=typeof document?e.useLayoutEffect:e.useEffect,Ql=["baseApiUrl","maxParallelImageRequests","workerClass","workerCount","workerUrl"],Zl=e.createContext(null),Gl={minZoom:0,maxZoom:22,minPitch:0,maxPitch:60,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,mapStyle:{version:8,sources:{},layers:[]},styleDiffing:!0,projection:"mercator",renderWorldCopies:!0,onError:e=>console.error(e.error),RTLTextPlugin:"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js"},Kl=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useContext)(Rl),[o,i]=(0,e.useState)(null),l=(0,e.useRef)(),{current:u}=(0,e.useRef)({mapLib:null,map:null});(0,e.useEffect)((()=>{const e=t.mapLib;let n,o=!0;return Promise.resolve(e||a.e(613).then(a.t.bind(a,613,23))).then((e=>{if(o){if(e.Map||(e=e.default),!e||!e.Map)throw new Error("Invalid mapLib");if(!e.supported(t))throw new Error("Map is not supported by this browser");!function(e,t){for(const n of Ql)n in t&&(e[n]=t[n]);t.RTLTextPlugin&&e.getRTLTextPluginStatus&&"unavailable"===e.getRTLTextPluginStatus()&&e.setRTLTextPlugin(t.RTLTextPlugin,(e=>{e&&console.error(e)}),!1)}(e,t),t.reuseMaps&&(n=Wl.reuse(t,l.current)),n||(n=new Wl(e.Map,t,l.current)),u.map=n.map,u.mapLib=e,i(n),r?.onMapMount(Xl(n,e),t.id)}})).catch((e=>{t.onError({type:"error",target:null,originalEvent:null,error:e})})),()=>{o=!1,n&&(r?.onMapUnmount(t.id),t.reuseMaps?n.recycle():n.destroy())}}),[]),ql((()=>{o&&o.setProps(t)})),(0,e.useImperativeHandle)(n,(()=>Xl(o,u.mapLib)),[o]);const s=(0,e.useMemo)((()=>({position:"relative",width:"100%",height:"100%",...t.style})),[t.style]);return e.createElement("div",{id:t.id,ref:l,style:s},o&&e.createElement(Zl.Provider,{value:u},t.children))}));Kl.displayName="Map",Kl.defaultProps=Gl;const Jl=Kl,eu=/box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;function tu(e,t){if(!e||!t)return;const n=e.style;for(const e in t){const r=t[e];Number.isFinite(r)&&!eu.test(e)?n[e]=`${r}px`:n[e]=r}}function nu(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),i=(0,e.useRef)({props:n});i.current.props=n;const a=(0,e.useMemo)((()=>{let t=!1;e.Children.forEach(n.children,(e=>{e&&(t=!0)}));const r={...n,element:t?document.createElement("div"):null},l=new o.Marker(r).setLngLat([n.longitude,n.latitude]);return l.on("dragstart",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDragStart?.(t)})),l.on("drag",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDrag?.(t)})),l.on("dragend",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDragEnd?.(t)})),l}),[]);return(0,e.useEffect)((()=>(a.addTo(r),()=>{a.remove()})),[]),(0,e.useEffect)((()=>{tu(a.getElement(),n.style)}),[n.style]),a.getLngLat().lng===n.longitude&&a.getLngLat().lat===n.latitude||a.setLngLat([n.longitude,n.latitude]),n.offset&&!function(e,t){const n=Array.isArray(e)?e[0]:e?e.x:0,r=Array.isArray(e)?e[1]:e?e.y:0,o=Array.isArray(t)?t[0]:t?t.x:0,i=Array.isArray(t)?t[1]:t?t.y:0;return n===o&&r===i}(a.getOffset(),n.offset)&&a.setOffset(n.offset),a.isDraggable()!==n.draggable&&a.setDraggable(n.draggable),a.getRotation()!==n.rotation&&a.setRotation(n.rotation),a.getRotationAlignment()!==n.rotationAlignment&&a.setRotationAlignment(n.rotationAlignment),a.getPitchAlignment()!==n.pitchAlignment&&a.setPitchAlignment(n.pitchAlignment),a.getPopup()!==n.popup&&a.setPopup(n.popup),(0,t.createPortal)(n.children,a.getElement())}function ru(e){return new Set(e?e.trim().split(/\s+/):[])}function ou(t,n,r){const o=(0,e.useContext)(Zl),i=(0,e.useMemo)((()=>t(o)),[]);return(0,e.useEffect)((()=>{const{map:e}=o;return e.hasControl(i)||e.addControl(i,(r||n)?.position),()=>{"function"==typeof n&&n(o),e.hasControl(i)&&e.removeControl(i)}}),[]),i}nu.defaultProps={draggable:!1,popup:null,rotation:0,rotationAlignment:"auto",pitchAlignment:"auto"},e.memo(nu),e.memo((function(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),i=(0,e.useMemo)((()=>document.createElement("div")),[]),a=(0,e.useRef)({props:n});a.current.props=n;const l=(0,e.useMemo)((()=>{const e={...n},t=new o.Popup(e).setLngLat([n.longitude,n.latitude]);return t.on("open",(e=>{a.current.props.onOpen?.(e)})),t.on("close",(e=>{a.current.props.onClose?.(e)})),t}),[]);if((0,e.useEffect)((()=>(l.setDOMContent(i).addTo(r),()=>{l.isOpen()&&l.remove()})),[]),(0,e.useEffect)((()=>{tu(l.getElement(),n.style)}),[n.style]),l.isOpen()&&(l.getLngLat().lng===n.longitude&&l.getLngLat().lat===n.latitude||l.setLngLat([n.longitude,n.latitude]),n.offset&&!Dl(l.options.offset,n.offset)&&l.setOffset(n.offset),l.options.anchor===n.anchor&&l.options.maxWidth===n.maxWidth||(l.options.anchor=n.anchor,l.setMaxWidth(n.maxWidth)),l.options.className!==n.className)){const e=ru(l.options.className),t=ru(n.className);for(const n of e)t.has(n)||l.removeClassName(n);for(const n of t)e.has(n)||l.addClassName(n);l.options.className=n.className}return(0,t.createPortal)(n.children,i)})),e.memo((function(t){const n=ou((({mapLib:e})=>new e.AttributionControl(t)),{position:t.position});return(0,e.useEffect)((()=>{tu(n._container,t.style)}),[t.style]),null})),e.memo((function(t){const n=ou((({mapLib:e})=>new e.FullscreenControl({container:t.containerId&&document.getElementById(t.containerId)})),{position:t.position});return(0,e.useEffect)((()=>{tu(n._controlContainer,t.style)}),[t.style]),null}));const iu=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useRef)({props:t}),o=ou((({mapLib:e})=>{const n=new e.GeolocateControl(t);return n.on("geolocate",(e=>{r.current.props.onGeolocate?.(e)})),n.on("error",(e=>{r.current.props.onError?.(e)})),n.on("outofmaxbounds",(e=>{r.current.props.onOutOfMaxBounds?.(e)})),n.on("trackuserlocationstart",(e=>{r.current.props.onTrackUserLocationStart?.(e)})),n.on("trackuserlocationend",(e=>{r.current.props.onTrackUserLocationEnd?.(e)})),n}),{position:t.position});return r.current.props=t,(0,e.useImperativeHandle)(n,(()=>({trigger:()=>o.trigger()})),[]),(0,e.useEffect)((()=>{tu(o._container,t.style)}),[t.style]),null}));function au(t){const n=ou((({mapLib:e})=>new e.ScaleControl(t)),{position:t.position});return n.options.unit===t.unit&&n.options.maxWidth===t.maxWidth||(n.options.maxWidth=t.maxWidth,n.setUnit(t.unit)),(0,e.useEffect)((()=>{tu(n._container,t.style)}),[t.style]),null}function lu(e,t){if(!e)throw new Error(t)}iu.displayName="GeolocateControl",e.memo(iu),e.memo((function(t){const n=ou((({mapLib:e})=>new e.NavigationControl(t)),{position:t.position});return(0,e.useEffect)((()=>{tu(n._container,t.style)}),[t.style]),null})),au.defaultProps={unit:"metric",maxWidth:100},e.memo(au);let uu=0;const su=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),i=(0,e.useMemo)((()=>t.id||"jsx-source-"+uu++),[]);(0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),setTimeout((()=>{n.style&&n.style._loaded&&n.getSource(i)&&n.removeSource(i)}),0)}}}),[n]);let a=n&&n.style&&n.getSource(i);return a?function(e,t,n){lu(t.id===n.id,"source id changed"),lu(t.type===n.type,"source type changed");let r="",o=0;for(const e in t)"children"===e||"id"===e||Dl(n[e],t[e])||(r=e,o++);if(!o)return;const i=t.type;if("geojson"===i)e.setData(t.data);else if("image"===i)e.updateImage({url:t.url,coordinates:t.coordinates});else if("canvas"!==i&&"video"!==i||1!==o||"coordinates"!==r)if("vector"===i&&"setUrl"in e)switch(r){case"url":e.setUrl(t.url);break;case"tiles":e.setTiles(t.tiles)}else console.warn(`Unable to update <Source> prop: ${r}`);else e.setCoordinates(t.coordinates)}(a,t,r.current):a=function(e,t,n){if(e.style&&e.style._loaded){const r={...n};return delete r.id,delete r.children,e.addSource(t,r),e.getSource(t)}return null}(n,i,t),r.current=t,a&&e.Children.map(t.children,(t=>t&&(0,e.cloneElement)(t,{source:i})))||null};let cu=0;const fu=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),i=(0,e.useMemo)((()=>t.id||"jsx-layer-"+cu++),[]);if((0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),n.style&&n.style._loaded&&n.removeLayer(i)}}}),[n]),n&&n.style&&n.getLayer(i))try{!function(e,t,n,r){if(lu(n.id===r.id,"layer id changed"),lu(n.type===r.type,"layer type changed"),"custom"===n.type||"custom"===r.type)return;const{layout:o={},paint:i={},filter:a,minzoom:l,maxzoom:u,beforeId:s}=n;if(s!==r.beforeId&&e.moveLayer(t,s),o!==r.layout){const n=r.layout||{};for(const r in o)Dl(o[r],n[r])||e.setLayoutProperty(t,r,o[r]);for(const r in n)o.hasOwnProperty(r)||e.setLayoutProperty(t,r,void 0)}if(i!==r.paint){const n=r.paint||{};for(const r in i)Dl(i[r],n[r])||e.setPaintProperty(t,r,i[r]);for(const r in n)i.hasOwnProperty(r)||e.setPaintProperty(t,r,void 0)}Dl(a,r.filter)||e.setFilter(t,a),l===r.minzoom&&u===r.maxzoom||e.setLayerZoomRange(t,l,u)}(n,i,t,r.current)}catch(e){console.warn(e)}else!function(e,t,n){if(e.style&&e.style._loaded&&e.getSource(n.source)){const r={...n,id:t};delete r.beforeId,e.addLayer(r,n.beforeId)}}(n,i,t);return r.current=t,null};var du=[15,15];const pu=function(t){var n=t.node;return e.createElement("div",{className:"p6o-map-hover",style:{left:t.x+du[0],top:t.y+du[1]}},n.title)};function hu(){return hu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},hu.apply(this,arguments)}function mu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mu(Object(n),!0).forEach((function(t){gu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function gu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function yu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const xu=function(t){var n=(0,e.useRef)(),r=(0,e.useContext)(ie).store,o=t.config,i=yu((0,e.useState)(),2),a=i[0],l=i[1],u=yu(R(a,500),1)[0],s=yu((0,e.useState)(),2),c=s[0],f=s[1],d="https://api.maptiler.com/maps/outdoor/style.json?key=".concat(o.api_key);(0,e.useEffect)((function(){}),[u]),(0,e.useEffect)((function(){c?n.current.classList.add("hover"):n.current.classList.remove("hover")}),[c]);var p,h,m=(0,e.useCallback)((function(e){return l(e.viewState)}),[]),v=(0,e.useCallback)((function(e){var t=e.features,n=e.point,o=t[0].properties.id,i=o===(null==c?void 0:c.id)?vu(vu({},c),n):vu({node:r.getNode(o)},n);f(i)}),[]);return e.createElement("div",{className:"p6o-map-container",ref:n},e.createElement(Jl,{initialViewState:{bounds:o.initial_bounds},mapStyle:d,interactiveLayerIds:["search-results"],onMove:m,onClick:function(){if(c){var e=c.node;console.log("clicked",c),history.pushState(e,e.title,"#/".concat(encodeURIComponent(e.id)))}},onMouseMove:v,onMouseLeave:function(){return f(null)}},e.createElement(su,{type:"geojson",data:(h=t.searchResults,{type:"FeatureCollection",features:h||[]})},e.createElement(fu,hu({id:"search-results"},{type:"circle",paint:{"circle-radius":(null==(p={fill:"red",radius:5})?void 0:p.radius)||4,"circle-color":(null==p?void 0:p.fill)||"#fff","circle-stroke-color":(null==p?void 0:p.stroke)||"#000","circle-stroke-width":(null==p?void 0:p.strokeWidth)||1}})))),c&&e.createElement(pu,c))};function wu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Eu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Eu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Eu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ku=function(){(function(){let{matches:t}=(0,e.useContext)(p),n=t[t.length-1];return n?n.params:{}})().recordId;var t=(0,e.useContext)(ie).store,n=wu((0,e.useState)(),2),r=n[0],o=n[1],i=wu((0,e.useState)(!1),2),a=i[0],l=i[1],u=wu((0,e.useState)(),2),s=u[0],c=u[1],f=wu(R(s,250),1)[0],d=wu((0,e.useState)(),2),h=d[0],m=d[1];return(0,e.useEffect)((function(){fetch("peripleo.config.json").then((function(e){return e.json()})).then(o).catch((function(e){console.error("Error loading Peripleo config. Please add a valid `peripleo.config.json` to your application root.")}))}),[]),(0,e.useEffect)((function(){r&&t.init(r).then((function(){return l(!0)}))}),[r]),(0,e.useEffect)((function(){a&&m(t.getNodesInBounds(r.initial_bounds))}),[a]),(0,e.useEffect)((function(){m(f?t.searchMappable(f):t.getNodesInBounds(r.initial_bounds))}),[f]),r?e.createElement(e.Fragment,null,e.createElement(xu,{config:r,loaded:a,searchResults:h}),e.createElement(Ol,{config:r,searchQuery:s,onChangeSearchQuery:c})):e.createElement("div",null,"LOADING")};var Su=a(379),Cu=a.n(Su),Au=a(795),Pu=a.n(Au),_u=a(569),Tu=a.n(_u),Mu=a(565),Lu=a.n(Mu),Ou=a(216),Ru=a.n(Ou),Nu=a(589),zu=a.n(Nu),ju=a(800),Iu={};Iu.styleTagTransform=zu(),Iu.setAttributes=Lu(),Iu.insert=Tu().bind(null,"head"),Iu.domAPI=Pu(),Iu.insertStyleElement=Ru(),Cu()(ju.Z,Iu),ju.Z&&ju.Z.locals&&ju.Z.locals,t.render(e.createElement(ae,null,e.createElement(M,null,e.createElement(g,null,e.createElement(m,null,e.createElement(m,{path:":recordId",element:e.createElement(ku,null)}),e.createElement(m,{path:"/",element:e.createElement(ku,null)}))))),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,