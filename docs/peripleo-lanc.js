/*! For license information please see peripleo-lanc.js.LICENSE.txt */
(()=>{var e,t,n,r,o={800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'html,body,#app{padding:0;margin:0;min-height:100vh;overflow:hidden;font-family:"Ubuntu",sans-serif}.p6o-map-container{position:relative;height:100vh}.p6o-map-container .p6o-map-hover{position:absolute;background-color:#fff;padding:10px 12px;-webkit-border-radius:2px;-khtml-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-box-shadow:2px 2px 14px rgba(0,0,0,.4);-moz-box-shadow:2px 2px 14px rgba(0,0,0,.4);box-shadow:2px 2px 14px rgba(0,0,0,.4)}.p6o-map-container.hover *{cursor:pointer}',"",{version:3,sources:["webpack://./src/index.scss","webpack://./src/map/Map.scss"],names:[],mappings:"AAAA,eACE,SAAA,CACA,QAAA,CACA,gBAAA,CACA,eAAA,CACA,+BAAA,CCLF,mBACE,iBAAA,CACA,YAAA,CAEA,kCACE,iBAAA,CACA,qBAAA,CACA,iBAAA,CDGF,yBCF2B,CDG1B,wBCH0B,CDIxB,sBCJwB,CDKnB,iBCLmB,CDS3B,8CAAA,CACG,2CAAA,CACK,sCAAA,CCLV,2BACE,cAAA",sourcesContent:["html, body, #app {\n  padding:0;\n  margin:0;\n  min-height:100vh;\n  overflow:hidden;\n  font-family:'Ubuntu', sans-serif;\n}\n\n/** Mixins **/\n@mixin rounded-corners($radius) {\n  -webkit-border-radius:$radius;\n   -khtml-border-radius:$radius;\n     -moz-border-radius:$radius;\n          border-radius:$radius;\n}\n\n@mixin box-shadow($x, $y, $radius, $opacity) {\n  -webkit-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n     -moz-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n          box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n}\n\n@import './map/Map';",".p6o-map-container {\n  position:relative;\n  height:100vh;\n\n  .p6o-map-hover {\n    position:absolute;\n    background-color:#fff;\n    padding:10px 12px;\n    @include rounded-corners(2px);\n    @include box-shadow(2px, 2px, 14px, 0.4);\n  }\n\n}\n\n.p6o-map-container.hover * {\n  cursor:pointer;\n}"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},245:e=>{e.exports=function(e){!function(e){if(!e)throw new Error("Eventify cannot use falsy object as events subject");for(var t=["on","fire","off"],n=0;n<t.length;++n)if(e.hasOwnProperty(t[n]))throw new Error("Subject cannot be eventified, since it already has property '"+t[n]+"'")}(e);var t=function(e){var t=Object.create(null);return{on:function(n,r,o){if("function"!=typeof r)throw new Error("callback is expected to be a function");var a=t[n];return a||(a=t[n]=[]),a.push({callback:r,ctx:o}),e},off:function(n,r){if(void 0===n)return t=Object.create(null),e;if(t[n])if("function"!=typeof r)delete t[n];else for(var o=t[n],a=0;a<o.length;++a)o[a].callback===r&&o.splice(a,1);return e},fire:function(n){var r,o=t[n];if(!o)return e;arguments.length>1&&(r=Array.prototype.splice.call(arguments,1));for(var a=0;a<o.length;++a){var i=o[a];i.callback.apply(i.ctx,r)}return e}}}(e);return e.on=t.on,e.off=t.off,e.fire=t.fire,e}},736:(e,t,n)=>{e.exports=function(e){if("uniqueLinkId"in(e=e||{})&&(console.warn("ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\nUse `multigraph` option instead\n","\n","Note: there is also change in default behavior: From now on each graph\nis considered to be not a multigraph by default (each edge is unique)."),e.multigraph=e.uniqueLinkId),void 0===e.multigraph&&(e.multigraph=!1),"function"!=typeof Map)throw new Error("ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph");var t,n=new Map,u=new Map,s={},c=0,f=e.multigraph?function(e,t,n){var r=l(e,t),o=s.hasOwnProperty(r);if(o||C(e,t)){o||(s[r]=0);var a="@"+ ++s[r];r=l(e+a,t+a)}return new i(e,t,n,r)}:function(e,t,n){var r=l(e,t),o=u.get(r);return o?(o.data=n,o):new i(e,t,n,r)},d=[],p=M,h=M,m=M,g=M,v={version:20,addNode:w,addLink:function(e,t,n){m();var r=k(e)||w(e),o=k(t)||w(t),i=f(e,t,n),l=u.has(i.id);return u.set(i.id,i),a(r,i),e!==t&&a(o,i),p(i,l?"update":"add"),g(),i},removeLink:function(e,t){return void 0!==t&&(e=C(e,t)),_(e)},removeNode:x,getNode:k,getNodeCount:E,getLinkCount:S,getEdgeCount:S,getLinksCount:S,getNodesCount:E,getLinks:function(e){var t=k(e);return t?t.links:null},forEachNode:N,forEachLinkedNode:function(e,t,r){var o=k(e);if(o&&o.links&&"function"==typeof t)return r?function(e,t,r){for(var o=e.values(),a=o.next();!a.done;){var i=a.value;if(i.fromId===t&&r(n.get(i.toId),i))return!0;a=o.next()}}(o.links,e,t):function(e,t,r){for(var o=e.values(),a=o.next();!a.done;){var i=a.value,l=i.fromId===t?i.toId:i.fromId;if(r(n.get(l),i))return!0;a=o.next()}}(o.links,e,t)},forEachLink:function(e){if("function"==typeof e)for(var t=u.values(),n=t.next();!n.done;){if(e(n.value))return!0;n=t.next()}},beginUpdate:m,endUpdate:g,clear:function(){m(),N((function(e){x(e.id)})),g()},hasLink:C,hasNode:k,getLink:C};return r(v),t=v.on,v.on=function(){return v.beginUpdate=m=P,v.endUpdate=g=L,p=y,h=b,v.on=t,t.apply(v,arguments)},v;function y(e,t){d.push({link:e,changeType:t})}function b(e,t){d.push({node:e,changeType:t})}function w(e,t){if(void 0===e)throw new Error("Invalid node identifier");m();var r=k(e);return r?(r.data=t,h(r,"update")):(r=new o(e,t),h(r,"add")),n.set(e,r),g(),r}function k(e){return n.get(e)}function x(e){var t=k(e);if(!t)return!1;m();var r=t.links;return r&&(r.forEach(_),t.links=null),n.delete(e),h(t,"remove"),g(),!0}function E(){return n.size}function S(){return u.size}function _(e){if(!e)return!1;if(!u.get(e.id))return!1;m(),u.delete(e.id);var t=k(e.fromId),n=k(e.toId);return t&&t.links.delete(e),n&&n.links.delete(e),p(e,"remove"),g(),!0}function C(e,t){if(void 0!==e&&void 0!==t)return u.get(l(e,t))}function M(){}function P(){c+=1}function L(){0==(c-=1)&&d.length>0&&(v.fire("changed",d),d.length=0)}function N(e){if("function"!=typeof e)throw new Error("Function is expected to iterate over graph nodes. You passed "+e);for(var t=n.values(),r=t.next();!r.done;){if(e(r.value))return!0;r=t.next()}}};var r=n(245);function o(e,t){this.id=e,this.links=null,this.data=t}function a(e,t){e.links?e.links.add(t):e.links=new Set([t])}function i(e,t,n,r){this.fromId=e,this.toId=t,this.data=n,this.id=r}function l(e,t){return e.toString()+"👉 "+t.toString()}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},582:function(e){e.exports=function(){"use strict";function e(e,r,o,a,i){!function e(n,r,o,a,i){for(;a>o;){if(a-o>600){var l=a-o+1,u=r-o+1,s=Math.log(l),c=.5*Math.exp(2*s/3),f=.5*Math.sqrt(s*c*(l-c)/l)*(u-l/2<0?-1:1);e(n,r,Math.max(o,Math.floor(r-u*c/l+f)),Math.min(a,Math.floor(r+(l-u)*c/l+f)),i)}var d=n[r],p=o,h=a;for(t(n,o,r),i(n[a],d)>0&&t(n,o,a);p<h;){for(t(n,p,h),p++,h--;i(n[p],d)<0;)p++;for(;i(n[h],d)>0;)h--}0===i(n[o],d)?t(n,o,h):t(n,++h,a),h<=r&&(o=h+1),r<=h&&(a=h-1)}}(e,r,o||0,a||e.length-1,i||n)}function t(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function n(e,t){return e<t?-1:e>t?1:0}var r=function(e){void 0===e&&(e=9),this._maxEntries=Math.max(4,e),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function o(e,t,n){if(!n)return t.indexOf(e);for(var r=0;r<t.length;r++)if(n(e,t[r]))return r;return-1}function a(e,t){i(e,0,e.children.length,t,e)}function i(e,t,n,r,o){o||(o=h(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var a=t;a<n;a++){var i=e.children[a];l(o,e.leaf?r(i):i)}return o}function l(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function u(e,t){return e.minX-t.minX}function s(e,t){return e.minY-t.minY}function c(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function f(e){return e.maxX-e.minX+(e.maxY-e.minY)}function d(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function p(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function h(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function m(t,n,r,o,a){for(var i=[n,r];i.length;)if(!((r=i.pop())-(n=i.pop())<=o)){var l=n+Math.ceil((r-n)/o/2)*o;e(t,l,n,r,a),i.push(n,l,l,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(e){var t=this.data,n=[];if(!p(e,t))return n;for(var r=this.toBBox,o=[];t;){for(var a=0;a<t.children.length;a++){var i=t.children[a],l=t.leaf?r(i):i;p(e,l)&&(t.leaf?n.push(i):d(e,l)?this._all(i,n):o.push(i))}t=o.pop()}return n},r.prototype.collides=function(e){var t=this.data;if(!p(e,t))return!1;for(var n=[];t;){for(var r=0;r<t.children.length;r++){var o=t.children[r],a=t.leaf?this.toBBox(o):o;if(p(e,a)){if(t.leaf||d(e,a))return!0;n.push(o)}}t=n.pop()}return!1},r.prototype.load=function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0;t<e.length;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(e){return e&&this._insert(e,this.data.height-1),this},r.prototype.clear=function(){return this.data=h([]),this},r.prototype.remove=function(e,t){if(!e)return this;for(var n,r,a,i=this.data,l=this.toBBox(e),u=[],s=[];i||u.length;){if(i||(i=u.pop(),r=u[u.length-1],n=s.pop(),a=!0),i.leaf){var c=o(e,i.children,t);if(-1!==c)return i.children.splice(c,1),u.push(i),this._condense(u),this}a||i.leaf||!d(i,l)?r?(n++,i=r.children[n],a=!1):i=null:(u.push(i),s.push(n),n=0,r=i,i=i.children[0])}return this},r.prototype.toBBox=function(e){return e},r.prototype.compareMinX=function(e,t){return e.minX-t.minX},r.prototype.compareMinY=function(e,t){return e.minY-t.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(e){return this.data=e,this},r.prototype._all=function(e,t){for(var n=[];e;)e.leaf?t.push.apply(t,e.children):n.push.apply(n,e.children),e=n.pop();return t},r.prototype._build=function(e,t,n,r){var o,i=n-t+1,l=this._maxEntries;if(i<=l)return a(o=h(e.slice(t,n+1)),this.toBBox),o;r||(r=Math.ceil(Math.log(i)/Math.log(l)),l=Math.ceil(i/Math.pow(l,r-1))),(o=h([])).leaf=!1,o.height=r;var u=Math.ceil(i/l),s=u*Math.ceil(Math.sqrt(l));m(e,t,n,s,this.compareMinX);for(var c=t;c<=n;c+=s){var f=Math.min(c+s-1,n);m(e,c,f,u,this.compareMinY);for(var d=c;d<=f;d+=u){var p=Math.min(d+u-1,f);o.children.push(this._build(e,d,p,r-1))}}return a(o,this.toBBox),o},r.prototype._chooseSubtree=function(e,t,n,r){for(;r.push(t),!t.leaf&&r.length-1!==n;){for(var o=1/0,a=1/0,i=void 0,l=0;l<t.children.length;l++){var u=t.children[l],s=c(u),f=(d=e,p=u,(Math.max(p.maxX,d.maxX)-Math.min(p.minX,d.minX))*(Math.max(p.maxY,d.maxY)-Math.min(p.minY,d.minY))-s);f<a?(a=f,o=s<o?s:o,i=u):f===a&&s<o&&(o=s,i=u)}t=i||t.children[0]}var d,p;return t},r.prototype._insert=function(e,t,n){var r=n?e:this.toBBox(e),o=[],a=this._chooseSubtree(r,this.data,t,o);for(a.children.push(e),l(a,r);t>=0&&o[t].children.length>this._maxEntries;)this._split(o,t),t--;this._adjustParentBBoxes(r,o,t)},r.prototype._split=function(e,t){var n=e[t],r=n.children.length,o=this._minEntries;this._chooseSplitAxis(n,o,r);var i=this._chooseSplitIndex(n,o,r),l=h(n.children.splice(i,n.children.length-i));l.height=n.height,l.leaf=n.leaf,a(n,this.toBBox),a(l,this.toBBox),t?e[t-1].children.push(l):this._splitRoot(n,l)},r.prototype._splitRoot=function(e,t){this.data=h([e,t]),this.data.height=e.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(e,t,n){for(var r,o,a,l,u,s,f,d=1/0,p=1/0,h=t;h<=n-t;h++){var m=i(e,0,h,this.toBBox),g=i(e,h,n,this.toBBox),v=(o=m,a=g,void 0,void 0,void 0,void 0,l=Math.max(o.minX,a.minX),u=Math.max(o.minY,a.minY),s=Math.min(o.maxX,a.maxX),f=Math.min(o.maxY,a.maxY),Math.max(0,s-l)*Math.max(0,f-u)),y=c(m)+c(g);v<d?(d=v,r=h,p=y<p?y:p):v===d&&y<p&&(p=y,r=h)}return r||n-t},r.prototype._chooseSplitAxis=function(e,t,n){var r=e.leaf?this.compareMinX:u,o=e.leaf?this.compareMinY:s;this._allDistMargin(e,t,n,r)<this._allDistMargin(e,t,n,o)&&e.children.sort(r)},r.prototype._allDistMargin=function(e,t,n,r){e.children.sort(r);for(var o=this.toBBox,a=i(e,0,t,o),u=i(e,n-t,n,o),s=f(a)+f(u),c=t;c<n-t;c++){var d=e.children[c];l(a,e.leaf?o(d):d),s+=f(a)}for(var p=n-t-1;p>=t;p--){var h=e.children[p];l(u,e.leaf?o(h):h),s+=f(u)}return s},r.prototype._adjustParentBBoxes=function(e,t,n){for(var r=n;r>=0;r--)l(t[r],e)},r.prototype._condense=function(e){for(var t=e.length-1,n=void 0;t>=0;t--)0===e[t].children.length?t>0?(n=e[t-1].children).splice(n.indexOf(e[t]),1):this.clear():a(e[t],this.toBBox)},r}()},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,E=60106,S=60107,_=60108,C=60114,M=60109,P=60110,L=60112,N=60113,O=60120,z=60115,T=60116,A=60121,I=60128,R=60129,j=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;x=D("react.element"),E=D("react.portal"),S=D("react.fragment"),_=D("react.strict_mode"),C=D("react.profiler"),M=D("react.provider"),P=D("react.context"),L=D("react.forward_ref"),N=D("react.suspense"),O=D("react.suspense_list"),z=D("react.memo"),T=D("react.lazy"),A=D("react.block"),D("react.scope"),I=D("react.opaque.id"),R=D("react.debug_trace_mode"),j=D("react.offscreen"),F=D("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function Y(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case C:return"Profiler";case _:return"StrictMode";case N:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case M:return(e._context.displayName||"Context")+".Provider";case L:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case z:return Q(e.type);case A:return Q(e._render);case T:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function X(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Z(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=X(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=X(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,X(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+X(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:X(n)}}function se(e,t){var n=X(t.value),r=X(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Me=null,Pe=null;function Le(e){if(e=no(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Me?Pe?Pe.push(e):Pe=[e]:Me=e}function Oe(){if(Me){var e=Me,t=Pe;if(Pe=Me=null,Le(e),t)for(e=0;e<t.length;e++)Le(t[e])}}function ze(e,t){return e(t)}function Te(e,t,n,r,o){return e(t,n,r,o)}function Ae(){}var Ie=ze,Re=!1,je=!1;function Fe(){null===Me&&null===Pe||(Ae(),Oe())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Ue=!1}function $e(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,We=null,He=!1,Ye=null,Qe={onError:function(e){Ve=!0,We=e}};function Xe(e,t,n,r,o,a,i,l,u){Ve=!1,We=null,$e.apply(Qe,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(qe(e)!==e)throw Error(i(188))}function Ge(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ke(o),e;if(a===r)return Ke(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=to(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==ut&&vt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)gt(n),null===n.blockedOn&&ft.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},_t={};function Ct(e){if(St[e])return St[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in _t)return St[e]=n[t];return e}f&&(_t=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Mt=Ct("animationend"),Pt=Ct("animationiteration"),Lt=Ct("animationstart"),Nt=Ct("transitionend"),Ot=new Map,zt=new Map,Tt=["abort","abort",Mt,"animationEnd",Pt,"animationIteration",Lt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),zt.set(r,t),Ot.set(r,o),s(o,[r])}}(0,a.unstable_now)();var It=8;function Rt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=It=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=Rt(u),o=It):0!=(l&=a)&&(r=Rt(l),o=It)}else 0!=(a=n&~i)?(r=Rt(a),o=It):0!==l&&(r=Rt(l),o=It);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Rt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ut(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,Yt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Xt=!0;function qt(e,t,n,r){Re||Ae();var o=Kt,a=Re;Re=!0;try{Te(o,e,t,n,r)}finally{(Re=a)||Fe()}}function Zt(e,t,n,r){Qt(Yt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Xt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Gt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ar(e,t,r,null,n)}}}function Gt(e,t,n,r){var o=_e(r);if(null!==(o=to(o))){var a=qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ze(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),gn=ln(mn),vn=ln(o({},mn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=ln(wn),xn=ln(o({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function Mn(){return Cn}var Pn=o({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Mn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=ln(Pn),Nn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Mn})),zn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=ln(Tn),In=[9,13,27,32],Rn=f&&"CompositionEvent"in window,jn=null;f&&"documentMode"in document&&(jn=document.documentMode);var Fn=f&&"TextEvent"in window&&!jn,Dn=f&&(!Rn||jn&&8<jn&&11>=jn),Un=String.fromCharCode(32),Bn=!1;function $n(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Qn(e,t,n,r){Ne(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Xn=null,qn=null;function Zn(e){Pr(e,0)}function Kn(e){if(K(ro(e)))return e}function Gn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Xn&&(Xn.detachEvent("onpropertychange",or),qn=Xn=null)}function or(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Qn(t,qn,e,_e(e)),e=Zn,Re)e(t);else{Re=!0;try{ze(e,t)}finally{Re=!1,Fe()}}}}function ar(e,t,n){"focusin"===e?(rr(),qn=n,(Xn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function lr(e,t){if("click"===e)return Kn(t)}function ur(e,t){if("input"===e||"change"===e)return Kn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,wr=null,kr=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;kr||null==yr||yr!==G(r)||(r="selectionStart"in(r=yr)&&gr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Rr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(Tt,2);for(var Er="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<Er.length;Sr++)zt.set(Er[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Xe.apply(this,arguments),Ve){if(!Ve)throw Error(i(198));var c=We;Ve=!1,We=null,He||(He=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Mr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Mr(o,l,s),a=u}}}if(He)throw e=Ye,He=!1,Ye=null,e}function Lr(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Nr]||(e[Nr]=!0,l.forEach((function(t){Cr.has(t)||zr(t,!1,e,null),zr(t,!0,e,null)})))}function zr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Cr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Tr(a,e,o,t),i.add(l))}function Tr(e,t,n,r){var o=zt.get(t);switch(void 0===o?2:o){case 0:o=qt;break;case 1:o=Zt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=to(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(je)return e();je=!0;try{Ie(e,t,n)}finally{je=!1,Fe()}}((function(){var r=a,o=_e(n),i=[];e:{var l=Ot.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Ln;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Mt:case Pt:case Lt:u=bn;break;case Nt:u=zn;break;case"scroll":u=hn;break;case"wheel":u=An;break;case"copy":case"cut":case"paste":u=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Nn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Ir(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!to(s)&&!s[Jr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?to(s):null)&&(s!==(f=qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=gn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ro(u),p=null==s?l:ro(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=jr(p))h++;for(p=0,m=d;m;m=jr(m))p++;for(;0<h-p;)c=jr(c),h--;for(;0<p-h;)d=jr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=jr(c),d=jr(d)}c=null}else c=null;null!==u&&Fr(i,l,u,c,!1),null!==s&&null!==f&&Fr(i,f,s,c,!0)}if("select"===(u=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Gn;else if(Yn(l))if(Jn)g=ur;else{g=ir;var v=ar}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=lr);switch(g&&(g=g(e,r))?Qn(i,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?ro(r):window,e){case"focusin":(Yn(v)||"true"===v.contentEditable)&&(yr=v,br=r,wr=null);break;case"focusout":wr=br=yr=null;break;case"mousedown":kr=!0;break;case"contextmenu":case"mouseup":case"dragend":kr=!1,xr(i,n,o);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":xr(i,n,o)}var y;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(v=Rr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=Vn(n)))&&(b.data=y))),(y=Fn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Bn=!0,Un);case"textInput":return(e=t.data)===Un&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Rn&&$n(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Pr(i,t)}))}function Ir(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Ir(e,a,o)),null!=(a=De(e,t))&&r.push(Ir(e,a,o))),e=e.return}return r}function jr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Fr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=De(n,a))&&i.unshift(Ir(n,u,l)):o||null!=(u=De(n,a))&&i.push(Ir(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Ur=null,Br=null;function $r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Xr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,Zr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Zr,Gr="__reactProps$"+Zr,Jr="__reactContainer$"+Zr,eo="__reactEvents$"+Zr;function to(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Xr(e);null!==e;){if(n=e[Kr])return n;e=Xr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Gr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],lo=-1;function uo(e){return{current:e}}function so(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function go(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=e.childContextTypes}function yo(){so(ho),so(po)}function bo(e,t,n){if(po.current!==fo)throw Error(i(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function ko(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,so(ho),so(po),co(po,e)):so(ho),co(ho,n)}var Eo=null,So=null,_o=a.unstable_runWithPriority,Co=a.unstable_scheduleCallback,Mo=a.unstable_cancelCallback,Po=a.unstable_shouldYield,Lo=a.unstable_requestPaint,No=a.unstable_now,Oo=a.unstable_getCurrentPriorityLevel,zo=a.unstable_ImmediatePriority,To=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,Io=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,jo={},Fo=void 0!==Lo?Lo:function(){},Do=null,Uo=null,Bo=!1,$o=No(),Vo=1e4>$o?No:function(){return No()-$o};function Wo(){switch(Oo()){case zo:return 99;case To:return 98;case Ao:return 97;case Io:return 96;case Ro:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return zo;case 98:return To;case 97:return Ao;case 96:return Io;case 95:return Ro;default:throw Error(i(332))}}function Yo(e,t){return e=Ho(e),_o(e,t)}function Qo(e,t,n){return e=Ho(e),Co(e,t,n)}function Xo(){if(null!==Uo){var e=Uo;Uo=null,Mo(e)}qo()}function qo(){if(!Bo&&null!==Do){Bo=!0;var e=0;try{var t=Do;Yo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Co(zo,Xo),t}finally{Bo=!1}}}var Zo=k.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Go=uo(null),Jo=null,ea=null,ta=null;function na(){ta=ea=Jo=null}function ra(e){var t=Go.current;so(Go),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Jo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Jo)throw Error(i(308));ea=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var la=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function sa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function da(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pa(e,t,n,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Fl|=l,e.lanes=l,e.memoizedState=d}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ma=(new r.Component).refs;function ga(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=su(),r=cu(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),fa(e,o),fu(e,r,n)}};function ya(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,a))}function ba(e,t,n){var r=!1,o=fo,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=vo(t)?mo:po.current,a=(r=null!=(r=t.contextTypes))?go(e,o):fo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function ka(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=vo(t)?mo:po.current,o.context=go(e,a)),pa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ga(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),pa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xa=Array.isArray;function Ea(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _a(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ea(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=Ea(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=Ea(e,null,t),n.return=e,n;case E:return(t=Xu(t,e.mode,n)).return=e,t}if(xa(t)||$(t))return(t=Hu(t,e.mode,n,null)).return=e,t;Sa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(xa(n)||$(n))return null!==o?null:f(e,t,n,r,null);Sa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xa(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);Sa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),s}function g(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=d(o,y.value,s))&&(l=a(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;g++,y=u.next())null!==(y=h(m,o,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=a(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===S&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case x:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag){if(a.type===S){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}}else if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=Ea(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===S?((r=Hu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Wu(a.type,a.key,a.props,null,e.mode,u)).ref=Ea(e,r,a),u.return=e,e=u)}return l(e);case E:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Qu(a,e.mode,u)).return=e,e=r),l(e);if(xa(a))return m(e,r,a,u);if($(a))return g(e,r,a,u);if(c&&Sa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var Ca=_a(!0),Ma=_a(!1),Pa={},La=uo(Pa),Na=uo(Pa),Oa=uo(Pa);function za(e){if(e===Pa)throw Error(i(174));return e}function Ta(e,t){switch(co(Oa,t),co(Na,e),co(La,Pa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(La),co(La,t)}function Aa(){so(La),so(Na),so(Oa)}function Ia(e){za(Oa.current);var t=za(La.current),n=pe(t,e.type);t!==n&&(co(Na,e),co(La,n))}function Ra(e){Na.current===e&&(so(La),so(Na))}var ja=uo(0);function Fa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Ua=null,Ba=!1;function $a(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Va(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wa(e){if(Ba){var t=Ua;if(t){var n=t;if(!Va(e,t)){if(!(t=Qr(n.nextSibling))||!Va(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Da=e);$a(Da,n)}Da=e,Ua=Qr(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Da=e}}function Ha(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ya(e){if(e!==Da)return!1;if(!Ba)return Ha(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=Ua;t;)$a(e,t),t=Qr(t.nextSibling);if(Ha(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ua=Qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ua=null}}else Ua=Da?Qr(e.stateNode.nextSibling):null;return!0}function Qa(){Ua=Da=null,Ba=!1}var Xa=[];function qa(){for(var e=0;e<Xa.length;e++)Xa[e]._workInProgressVersionPrimary=null;Xa.length=0}var Za=k.ReactCurrentDispatcher,Ka=k.ReactCurrentBatchConfig,Ga=0,Ja=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Ga=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Za.current=null===e||null===e.memoizedState?zi:Ti,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Za.current=Ai,e=n(r,o)}while(ri)}if(Za.current=Oi,t=null!==ei&&null!==ei.next,Ga=0,ti=ei=Ja=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Ja.memoizedState=ti=e:ti=ti.next=e,ti}function ui(){if(null===ei){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Ja.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Ja.memoizedState=ti=e:ti=ti.next=e}return ti}function si(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ga&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ja.lanes|=c,Fl|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,sr(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fi(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);sr(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ga&e)===e)&&(t._workInProgressVersionPrimary=r,Xa.push(t))),e)return n(t._source);throw Xa.push(t),Error(i(350))}function pi(e,t,n,r){var o=Nl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Za.current,s=u.useState((function(){return di(o,t,n)})),c=s[1],f=s[0];s=ti;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var g=Ja;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!sr(l,e)){e=n(t._source),sr(f,e)||(c(e),e=cu(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-Vt(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(m,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:f}).dispatch=c=Ni.bind(null,Ja,e),s.queue=e,s.baseQueue=null,f=di(o,t,n),s.memoizedState=s.baseState=f),f}function hi(e,t,n){return pi(ui(),e,t,n)}function mi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Ni.bind(null,Ja,e),[t.memoizedState,e]}function gi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vi(e){return e={current:e},li().memoizedState=e}function yi(){return ui().memoizedState}function bi(e,t,n,r){var o=li();Ja.flags|=e,o.memoizedState=gi(1|t,n,void 0,void 0===r?null:r)}function wi(e,t,n,r){var o=ui();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void gi(t,n,a,r)}Ja.flags|=e,o.memoizedState=gi(1|t,n,a,r)}function ki(e,t){return bi(516,4,e,t)}function xi(e,t){return wi(516,4,e,t)}function Ei(e,t){return wi(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,Si.bind(null,t,e),n)}function Ci(){}function Mi(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pi(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Li(e,t){var n=Wo();Yo(98>n?98:n,(function(){e(!0)})),Yo(97<n?97:n,(function(){var n=Ka.transition;Ka.transition=1;try{e(!1),t()}finally{Ka.transition=n}}))}function Ni(e,t,n){var r=su(),o=cu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,sr(u,l))return}catch(e){}fu(e,o,r)}}var Oi={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},zi={readContext:ia,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Si.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ni.bind(null,Ja,e),[r.memoizedState,e]},useRef:vi,useState:mi,useDebugValue:Ci,useDeferredValue:function(e){var t=mi(e),n=t[0],r=t[1];return ki((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=mi(!1),t=e[0];return vi(e=Li.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=mi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,gi(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return mi(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ti={readContext:ia,useCallback:Mi,useContext:ia,useEffect:xi,useImperativeHandle:_i,useLayoutEffect:Ei,useMemo:Pi,useReducer:ci,useRef:yi,useState:function(){return ci(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=ci(si),n=t[0],r=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=ci(si)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return ci(si)[0]},unstable_isNewReconciler:!1},Ai={readContext:ia,useCallback:Mi,useContext:ia,useEffect:xi,useImperativeHandle:_i,useLayoutEffect:Ei,useMemo:Pi,useReducer:fi,useRef:yi,useState:function(){return fi(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=fi(si),n=t[0],r=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=fi(si)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return fi(si)[0]},unstable_isNewReconciler:!1},Ii=k.ReactCurrentOwner,Ri=!1;function ji(e,t,n,r){t.child=null===e?Ma(t,null,n,r):Ca(t,e.child,n,r)}function Fi(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||$u(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ui(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,a):(t.flags|=1,(e=Vu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ui(e,t,n,r,o,a){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,nl(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return Vi(e,t,n,r,a)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return ji(e,t,o,n),t.child}function $i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Vi(e,t,n,r,o){var a=vo(n)?mo:po.current;return a=go(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Wi(e,t,n,r,o){if(vo(n)){var a=!0;ko(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),ka(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ia(s):go(t,s=vo(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&wa(t,i,r,s),la=!1;var d=t.memoizedState;i.state=d,pa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||ho.current||la?("function"==typeof c&&(ga(t,n,c,r),u=t.memoizedState),(l=la||ya(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,sa(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Ko(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ia(u):go(t,u=vo(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&wa(t,i,r,u),la=!1,d=t.memoizedState,i.state=d,pa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||ho.current||la?("function"==typeof p&&(ga(t,n,p,r),h=t.memoizedState),(s=la||ya(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Hi(e,t,n,r,a,o)}function Hi(e,t,n,r,o,a){$i(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&xo(t,n,!1),nl(e,t,a);r=t.stateNode,Ii.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ca(t,e.child,null,a),t.child=Ca(t,null,l,a)):ji(e,t,l,a),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Yi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ta(e,t.containerInfo)}var Qi,Xi,qi,Zi={dehydrated:null,retryLane:0};function Ki(e,t,n){var r,o=t.pendingProps,a=ja.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(ja,1&a),null===e?(void 0!==o.fallback&&Wa(t),e=o.children,a=o.fallback,i?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Zi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Zi,t.lanes=33554432,e):((n=Yu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Vu(i,l),null!==e?r=Vu(e,r):(r=Hu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Zi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Vu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Gi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Yu(t,o,0,null),n=Hu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function el(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(ji(e,t,r.children,n),0!=(2&(r=ja.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(ja,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Fa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Fa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Vu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vo(t.type)&&yo(),null;case 3:return Aa(),so(ho),so(po),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ya(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=za(Oa.current);if(n=t.type,null!==e&&null!=t.stateNode)Xi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=za(La.current),Ya(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Kr]=t,r[Gr]=l,n){case"dialog":Lr("cancel",r),Lr("close",r);break;case"iframe":case"object":case"embed":Lr("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)Lr(_r[e],r);break;case"source":Lr("error",r);break;case"img":case"image":case"link":Lr("error",r),Lr("load",r);break;case"details":Lr("toggle",r);break;case"input":ee(r,l),Lr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Lr("invalid",r);break;case"textarea":ue(r,l),Lr("invalid",r)}for(var s in Ee(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Lr("scroll",r));switch(n){case"input":Z(r),re(r,l,!0);break;case"textarea":Z(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Kr]=t,e[Gr]=r,Qi(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":Lr("cancel",e),Lr("close",e),a=r;break;case"iframe":case"object":case"embed":Lr("load",e),a=r;break;case"video":case"audio":for(a=0;a<_r.length;a++)Lr(_r[a],e);a=r;break;case"source":Lr("error",e),a=r;break;case"img":case"image":case"link":Lr("error",e),Lr("load",e),a=r;break;case"details":Lr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Lr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Lr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Lr("invalid",e);break;default:a=r}Ee(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?ke(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Lr("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":Z(e),re(e,r,!1);break;case"textarea":Z(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+X(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}$r(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=za(Oa.current),za(La.current),Ya(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return so(ja),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ya(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&ja.current)?0===Il&&(Il=3):(0!==Il&&3!==Il||(Il=4),null===Nl||0==(134217727&Fl)&&0==(134217727&Dl)||mu(Nl,zl))),(r||n)&&(t.flags|=4),null);case 4:return Aa(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(so(ja),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==Il||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Fa(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(ja,1&ja.current|2),t.child}e=e.sibling}null!==r.tail&&Vo()>Vl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Fa(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Ba)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-r.renderingStartTime>Vl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Vo(),n.sibling=null,t=ja.current,co(ja,l?1&t|2:1&t),n):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Aa(),so(ho),so(po),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return so(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(ja),null;case 4:return Aa(),null;case 10:return ra(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Qi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,za(La.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Ee(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Lr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ql||(Ql=!0,Xl=r),ll(0,t)},n}function cl(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ju(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Yr(t.stateNode.containerInfo))}throw Error(i(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Au(n,e),Tu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&$r(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(i(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Au(t,n);else{r=t;try{o()}catch(e){ju(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ju(t,e)}break;case 5:dl(t);break;case 4:xl(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):kl(e,n,t)}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function kl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(kl(e,t,n),e=e.sibling;null!==e;)kl(e,t,n),e=e.sibling}function xl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(gl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function El(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?ke(n,u):"dangerouslySetInnerHTML"===l?ge(n,u):"children"===l?ve(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&($l=Vo(),ml(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Cl=Math.ceil,Ml=k.ReactCurrentDispatcher,Pl=k.ReactCurrentOwner,Ll=0,Nl=null,Ol=null,zl=0,Tl=0,Al=uo(0),Il=0,Rl=null,jl=0,Fl=0,Dl=0,Ul=0,Bl=null,$l=0,Vl=1/0;function Wl(){Vl=Vo()+500}var Hl,Yl=null,Ql=!1,Xl=null,ql=null,Zl=!1,Kl=null,Gl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function su(){return 0!=(48&Ll)?Vo():-1!==ou?ou:ou=Vo()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===au&&(au=jl),0!==Zo.transition){0!==iu&&(iu=null!==Bl?Bl.pendingLanes:0),e=au;var t=4186112&~iu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Dt(0!=(4&Ll)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(i(185));if(null===(e=du(e,t)))return null;$t(e,t,n),e===Nl&&(Dl|=t,4===Il&&mu(e,zl));var r=Wo();1===t?0!=(8&Ll)&&0==(48&Ll)?gu(e):(pu(e,n),0===Ll&&(Wl(),Xo())):(0==(4&Ll)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Bl=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Vt(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Rt(s);var f=It;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=jt(e,e===Nl?zl:0),t=It,0===r)null!==n&&(n!==jo&&Mo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==jo&&Mo(n)}15===t?(n=gu.bind(null,e),null===Do?(Do=[n],Uo=Co(zo,qo)):Do.push(n),n=jo):14===t?n=Qo(99,gu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Qo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,iu=au=0,0!=(48&Ll))throw Error(i(327));var t=e.callbackNode;if(zu()&&e.callbackNode!==t)return null;var n=jt(e,e===Nl?zl:0);if(0===n)return null;var r=n,o=Ll;Ll|=16;var a=Eu();for(Nl===e&&zl===r||(Wl(),ku(e,r));;)try{Cu();break}catch(t){xu(e,t)}if(na(),Ml.current=a,Ll=o,null!==Ol?r=0:(Nl=null,zl=0,r=Il),0!=(jl&Dl))ku(e,0);else if(0!==r){if(2===r&&(Ll|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(n=Ft(e))&&(r=Su(e,n))),1===r)throw t=Rl,ku(e,0),mu(e,n),pu(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Lu(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=$l+500-Vo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){su(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Lu.bind(null,e),r);break}Lu(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Vt(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Vo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Cl(n/1960))-n)){e.timeoutHandle=Wr(Lu.bind(null,e),n);break}Lu(e);break;default:throw Error(i(329))}}return pu(e,Vo()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Ul,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function gu(e){if(0!=(48&Ll))throw Error(i(327));if(zu(),e===Nl&&0!=(e.expiredLanes&zl)){var t=zl,n=Su(e,t);0!=(jl&Dl)&&(n=Su(e,t=jt(e,t)))}else n=Su(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Ll|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(t=Ft(e))&&(n=Su(e,t))),1===n)throw n=Rl,ku(e,0),mu(e,t),pu(e,Vo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Lu(e),pu(e,Vo()),null}function vu(e,t){var n=Ll;Ll|=1;try{return e(t)}finally{0===(Ll=n)&&(Wl(),Xo())}}function yu(e,t){var n=Ll;Ll&=-2,Ll|=8;try{return e(t)}finally{0===(Ll=n)&&(Wl(),Xo())}}function bu(e,t){co(Al,Tl),Tl|=t,jl|=t}function wu(){Tl=Al.current,so(Al)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Aa(),so(ho),so(po),qa();break;case 5:Ra(r);break;case 4:Aa();break;case 13:case 19:so(ja);break;case 10:ra(r);break;case 23:case 24:wu()}n=n.return}Nl=e,Ol=Vu(e.current,null),zl=Tl=jl=t,Il=0,Rl=null,Ul=Dl=Fl=0}function xu(e,t){for(;;){var n=Ol;try{if(na(),Za.current=Oi,ni){for(var r=Ja.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Ga=0,ti=ei=Ja=null,ri=!1,Pl.current=null,null===n||null===n.return){Il=1,Rl=t,Ol=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=zl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var g=d.updateQueue;if(null===g){var v=new Set;v.add(s),d.updateQueue=v}else g.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ca(-1,1);y.tag=2,fa(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Fu.bind(null,a,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Il&&(Il=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,da(d,sl(0,a,t));break e;case 1:a=u;var k=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===ql||!ql.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,da(d,cl(d,a,t));break e}}d=d.return}while(null!==d)}Pu(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function Eu(){var e=Ml.current;return Ml.current=Oi,null===e?Oi:e}function Su(e,t){var n=Ll;Ll|=16;var r=Eu();for(Nl===e&&zl===t||ku(e,t);;)try{_u();break}catch(t){xu(e,t)}if(na(),Ll=n,Ml.current=r,null!==Ol)throw Error(i(261));return Nl=null,zl=0,Il}function _u(){for(;null!==Ol;)Mu(Ol)}function Cu(){for(;null!==Ol&&!Po();)Mu(Ol)}function Mu(e){var t=Hl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?Pu(e):Ol=t,Pl.current=null}function Pu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Tl)))return void(Ol=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Tl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(Ol=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Il&&(Il=5)}function Lu(e){var t=Wo();return Yo(99,Nu.bind(null,e,t)),null}function Nu(e,t){do{zu()}while(null!==Kl);if(0!=(48&Ll))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-Vt(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Nl&&(Ol=Nl=null,zl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ll,Ll|=32,Pl.current=null,Ur=Xt,gr(l=mr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,g=l,v=null;t:for(;;){for(var y;g!==u||0!==a&&3!==g.nodeType||(d=f+a),g!==s||0!==c&&3!==g.nodeType||(p=f+c),3===g.nodeType&&(f+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===l)break t;if(v===u&&++h===a&&(d=f),v===s&&++m===c&&(p=f),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Br={focusedElem:l,selectionRange:u},Xt=!1,lu=null,uu=!1,Yl=r;do{try{Ou()}catch(e){if(null===Yl)throw Error(i(330));ju(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);lu=null,Yl=r;do{try{for(l=e;null!==Yl;){var b=Yl.flags;if(16&b&&ve(Yl.stateNode,""),128&b){var w=Yl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl(Yl),Yl.flags&=-3;break;case 6:bl(Yl),Yl.flags&=-3,El(Yl.alternate,Yl);break;case 1024:Yl.flags&=-1025;break;case 1028:Yl.flags&=-1025,El(Yl.alternate,Yl);break;case 4:El(Yl.alternate,Yl);break;case 8:xl(l,u=Yl);var x=u.alternate;vl(u),null!==x&&vl(x)}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(i(330));ju(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);if(k=Br,w=mr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&gr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,x=Math.min(l.start,u),l=void 0===l.end?x:Math.min(l.end,u),!k.extend&&x>l&&(u=l,l=x,x=u),u=pr(b,x),a=pr(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),x>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Xt=!!Ur,Br=Ur=null,e.current=n,Yl=r;do{try{for(b=e;null!==Yl;){var E=Yl.flags;if(36&E&&hl(b,Yl.alternate,Yl),128&E){w=void 0;var S=Yl.ref;if(null!==S){var _=Yl.stateNode;Yl.tag,w=_,"function"==typeof S?S(w):S.current=w}}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(i(330));ju(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);Yl=null,Fo(),Ll=o}else e.current=n;if(Zl)Zl=!1,Kl=e,Gl=t;else for(Yl=r;null!==Yl;)t=Yl.nextEffect,Yl.nextEffect=null,8&Yl.flags&&((E=Yl).sibling=null,E.stateNode=null),Yl=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(Eo,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,Vo()),Ql)throw Ql=!1,e=Xl,Xl=null,e;return 0!=(8&Ll)||Xo(),null}function Ou(){for(;null!==Yl;){var e=Yl.alternate;uu||null===lu||(0!=(8&Yl.flags)?Je(Yl,lu)&&(uu=!0):13===Yl.tag&&_l(e,Yl)&&Je(Yl,lu)&&(uu=!0));var t=Yl.flags;0!=(256&t)&&pl(e,Yl),0==(512&t)||Zl||(Zl=!0,Qo(97,(function(){return zu(),null}))),Yl=Yl.nextEffect}}function zu(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,Yo(e,Iu)}return!1}function Tu(e,t){Jl.push(t,e),Zl||(Zl=!0,Qo(97,(function(){return zu(),null})))}function Au(e,t){eu.push(t,e),Zl||(Zl=!0,Qo(97,(function(){return zu(),null})))}function Iu(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Ll))throw Error(i(331));var t=Ll;Ll|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));ju(a,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));ju(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ll=t,Xo(),!0}function Ru(e,t,n){fa(e,t=sl(0,t=il(n,t),1)),t=su(),null!==(e=du(e,1))&&($t(e,1,t),pu(e,t))}function ju(e,t){if(3===e.tag)Ru(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ru(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=cl(n,e=il(t,e),1);if(fa(n,o),o=su(),null!==(n=du(n,1)))$t(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Fu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=su(),e.pingedLanes|=e.suspendedLanes&n,Nl===e&&(zl&n)===n&&(4===Il||3===Il&&(62914560&zl)===zl&&500>Vo()-$l?ku(e,0):Ul|=n),pu(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===au&&(au=jl),0===(t=Ut(62914560&~au))&&(t=4194304))),n=su(),null!==(e=du(e,t))&&($t(e,t,n),pu(e,n))}function Uu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new Uu(e,t,n,r)}function $u(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)$u(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Hu(n.children,o,a,t);case R:l=8,o|=16;break;case _:l=8,o|=1;break;case C:return(e=Bu(12,n,t,8|o)).elementType=C,e.type=C,e.lanes=a,e;case N:return(e=Bu(13,n,t,o)).type=N,e.elementType=N,e.lanes=a,e;case O:return(e=Bu(19,n,t,o)).elementType=O,e.lanes=a,e;case j:return Yu(n,o,a,t);case F:return(e=Bu(24,n,t,o)).elementType=F,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case M:l=10;break e;case P:l=9;break e;case L:l=11;break e;case z:l=14;break e;case T:l=16,r=null;break e;case A:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Bu(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Hu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function Yu(e,t,n,r){return(e=Bu(23,e,r,t)).elementType=j,e.lanes=n,e}function Qu(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function Xu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Zu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ku(e,t,n,r){var o=t.current,a=su(),l=cu(o);e:if(n){t:{if(qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(vo(s)){n=wo(n,s,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fa(o,t),fu(o,l,a),l}function Gu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function es(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function ts(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=Bu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ua(t),e[Jr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function ns(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Gu(i);l.call(e)}}Ku(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ts(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Gu(i);u.call(e)}}yu((function(){Ku(t,i,e,o)}))}return Gu(i)}function os(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ns(t))throw Error(i(200));return Zu(e,t,null,n)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:Yi(t),Qa();break;case 5:Ia(t);break;case 1:vo(t.type)&&ko(t);break;case 4:Ta(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ki(e,t,n):(co(ja,1&ja.current),null!==(t=nl(e,t,n))?t.sibling:null);co(ja,1&ja.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(ja,ja.current),r)break;return null;case 23:case 24:return t.lanes=0,Bi(e,t,n)}return nl(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=go(t,po.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;ko(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ga(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternals=t,ka(t,r,e,n),t=Hi(null,t,r,!0,a,n)}else t.tag=0,ji(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return $u(e)?1:0;if(null!=e){if((e=e.$$typeof)===L)return 11;if(e===z)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Vi(null,t,o,e,n);break e;case 1:t=Wi(null,t,o,e,n);break e;case 11:t=Fi(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Ko(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Vi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Yi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,sa(e,t),pa(t,r,null,n),(r=t.memoizedState.element)===o)Qa(),t=nl(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Ua=Qr(t.stateNode.containerInfo.firstChild),Da=t,a=Ba=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Xa.push(a);for(n=Ma(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else ji(e,t,r,n),Qa();t=t.child}return t;case 5:return Ia(t),null===e&&Wa(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Vr(r,o)?l=null:null!==a&&Vr(r,a)&&(t.flags|=16),$i(e,t),ji(e,t,l,n),t.child;case 6:return null===e&&Wa(t),null;case 13:return Ki(e,t,n);case 4:return Ta(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ca(t,null,r,n):ji(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return ji(e,t,t.pendingProps,n),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(co(Go,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=sr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=ca(-1,n&-n)).tag=2,fa(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oa(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,r,n),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Di(e,t,o,a=Ko(o.type,a),r,n);case 15:return Ui(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,vo(r)?(e=!0,ko(t)):e=!1,aa(t,n),ba(t,r,o),ka(t,r,o,n),Hi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Bi(e,t,n)}throw Error(i(156,t.tag))},ts.prototype.render=function(e){Ku(e,this._internalRoot,null,null)},ts.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ku(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,su()),es(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,su()),es(e,67108864))},nt=function(e){if(13===e.tag){var t=su(),n=cu(e);fu(e,n,t),es(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));K(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},ze=vu,Te=function(e,t,n,r,o){var a=Ll;Ll|=4;try{return Yo(98,e.bind(null,t,n,r,o))}finally{0===(Ll=a)&&(Wl(),Xo())}},Ae=function(){0==(49&Ll)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Vo())}))}Xo()}(),zu())},Ie=function(e,t){var n=Ll;Ll|=2;try{return e(t)}finally{0===(Ll=n)&&(Wl(),Xo())}};var as={Events:[no,ro,oo,Ne,Oe,zu,{current:!1}]},is={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ls={bundleType:is.bundleType,version:is.version,rendererPackageName:is.rendererPackageName,rendererConfig:is.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:is.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var us=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!us.isDisabled&&us.supportsFiber)try{Eo=us.inject(ls),So=us}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=as,t.createPortal=os,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ll;if(0!=(48&n))return e(t);Ll|=1;try{if(e)return Yo(99,e.bind(null,t))}finally{Ll=n,Xo()}},t.hydrate=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!0,n)},t.render=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ns(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=vu,t.unstable_createPortal=function(e,t){return os(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ns(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rs(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,r(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var _=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function M(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+C(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(_,"$&/")+"/"),M(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+C(l=e[s],s);u+=M(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=M(l=l.value,t,n,c=r+C(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function P(e,t,n){if(null==e)return e;var r=[],o=0;return M(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function L(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function O(){var e=N.current;if(null===e)throw Error(p(321));return e}var z={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!x.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+y;try{g(!0,e)?k.postMessage(null):(m=!1,g=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,k.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>_(i,n))void 0!==u&&0>_(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],M=[],P=1,L=null,N=3,O=!1,z=!1,T=!1;function A(e){for(var t=E(M);null!==t;){if(null===t.callback)S(M);else{if(!(t.startTime<=e))break;S(M),t.sortIndex=t.expirationTime,x(C,t)}t=E(M)}}function I(e){if(T=!1,A(e),!z)if(null!==E(C))z=!0,n(R);else{var t=E(M);null!==t&&r(I,t.startTime-e)}}function R(e,n){z=!1,T&&(T=!1,o()),O=!0;var a=N;try{for(A(n),L=E(C);null!==L&&(!(L.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=L.callback;if("function"==typeof i){L.callback=null,N=L.priorityLevel;var l=i(L.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?L.callback=l:L===E(C)&&S(C),A(n)}else S(C);L=E(C)}if(null!==L)var u=!0;else{var s=E(M);null!==s&&r(I,s.startTime-n),u=!1}return u}finally{L=null,N=a,O=!1}}var j=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){z||O||(z=!0,n(R))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=j,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(M,e),null===E(C)&&e===E(M)&&(T?o():T=!0,r(I,i-l))):(e.sortIndex=u,x(C,e),z||O||(z=!0,n(R))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var u=r(e,o),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,exports:{}};return o[e].call(n.exports,n,n.exports,i),n.exports}i.m=o,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+".peripleo-lanc.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="peripleo-lanc:",i.l=(e,t,o,a)=>{if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,i.nc&&l.setAttribute("nonce",i.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={179:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var a=i.p+i.u(t),l=new Error;i.l(a,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[a,l,u]=n,s=0;if(a.some((t=>0!==e[t]))){for(r in l)i.o(l,r)&&(i.m[r]=l[r]);u&&u(i)}for(t&&t(n);s<a.length;s++)o=a[s],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkperipleo_lanc=self.webpackChunkperipleo_lanc||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=i(294),t=i(935),n=i(736),r=i.n(n),o=i(582),a=i.n(o),l=function(){function e(){}return e.prototype.expandToken=function(e){for(var t=[],n="",r=0,o=e.length;r<o;++r)n+=e.charAt(r),t.push(n);return t},e}(),u=function(){function e(){}return e.prototype.sanitize=function(e){return e?e.toLocaleLowerCase().trim():""},e}();function s(e,t){t=t||[];for(var n=e=e||{},r=0;r<t.length;r++)if(null==(n=n[t[r]]))return null;return n}var c=function(){function e(e){this._uidFieldName=e,this._tokenToIdfCache={},this._tokenMap={}}var t=e.prototype;return t.indexDocument=function(e,t,n){this._tokenToIdfCache={};var r,o=this._tokenMap;"object"!=typeof o[e]?o[e]=r={$numDocumentOccurrences:0,$totalNumOccurrences:1,$uidMap:{}}:(r=o[e]).$totalNumOccurrences++;var a=r.$uidMap;"object"!=typeof a[t]?(r.$numDocumentOccurrences++,a[t]={$document:n,$numTokenOccurrences:1}):a[t].$numTokenOccurrences++},t.search=function(e,t){for(var n={},r=0,o=e.length;r<o;r++){var a,i=e[r],l=this._tokenMap[i];if(!l)return[];if(0===r)for(var u=0,s=(a=Object.keys(l.$uidMap)).length;u<s;u++)n[c=a[u]]=l.$uidMap[c].$document;else for(u=0,s=(a=Object.keys(n)).length;u<s;u++){var c=a[u];"object"!=typeof l.$uidMap[c]&&delete n[c]}}var f=[];for(var c in n)f.push(n[c]);var d=this._createCalculateTfIdf();return f.sort((function(n,r){return d(e,r,t)-d(e,n,t)}))},t._createCalculateIdf=function(){var e=this._tokenMap,t=this._tokenToIdfCache;return function(n,r){if(!t[n]){var o=void 0!==e[n]?e[n].$numDocumentOccurrences:0;t[n]=1+Math.log(r.length/(1+o))}return t[n]}},t._createCalculateTfIdf=function(){var e=this._tokenMap,t=this._uidFieldName,n=this._createCalculateIdf();return function(r,o,a){for(var i=0,l=0,u=r.length;l<u;++l){var c,f=r[l],d=n(f,a);d===1/0&&(d=0),c=t instanceof Array?o&&s(o,t):o&&o[t],i+=(void 0!==e[f]&&void 0!==e[f].$uidMap[c]?e[f].$uidMap[c].$numTokenOccurrences:0)*d}return i}},e}(),f=/[^a-zа-яё0-9\-']+/i,d=function(){function e(){}return e.prototype.tokenize=function(e){return e.split(f).filter((function(e){return e}))},e}();function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(e){if(!e)throw Error("js-search requires a uid field name constructor parameter");this._uidFieldName=e,this._indexStrategy=new l,this._searchIndex=new c(e),this._sanitizer=new u,this._tokenizer=new d,this._documents=[],this._searchableFields=[]}var t,n,r=e.prototype;return r.addDocument=function(e){this.addDocuments([e])},r.addDocuments=function(e){this._documents=this._documents.concat(e),this.indexDocuments_(e,this._searchableFields)},r.addIndex=function(e){this._searchableFields.push(e),this.indexDocuments_(this._documents,[e])},r.search=function(e){var t=this._tokenizer.tokenize(this._sanitizer.sanitize(e));return this._searchIndex.search(t,this._documents)},r.indexDocuments_=function(e,t){this._initialized=!0;for(var n=this._indexStrategy,r=this._sanitizer,o=this._searchIndex,a=this._tokenizer,i=this._uidFieldName,l=0,u=e.length;l<u;l++){var c,f=e[l];c=i instanceof Array?s(f,i):f[i];for(var d=0,p=t.length;d<p;d++){var h,m=t[d];if(null!=(h=m instanceof Array?s(f,m):f[m])&&"string"!=typeof h&&h.toString&&(h=h.toString()),"string"==typeof h)for(var g=a.tokenize(r.sanitize(h)),v=0,y=g.length;v<y;v++)for(var b=g[v],w=n.expandToken(b),k=0,x=w.length;k<x;k++){var E=w[k];o.indexDocument(E,c,f)}}}},t=e,(n=[{key:"indexStrategy",set:function(e){if(this._initialized)throw Error("IIndexStrategy cannot be set after initialization");this._indexStrategy=e},get:function(){return this._indexStrategy}},{key:"sanitizer",set:function(e){if(this._initialized)throw Error("ISanitizer cannot be set after initialization");this._sanitizer=e},get:function(){return this._sanitizer}},{key:"searchIndex",set:function(e){if(this._initialized)throw Error("ISearchIndex cannot be set after initialization");this._searchIndex=e},get:function(){return this._searchIndex}},{key:"tokenizer",set:function(e){if(this._initialized)throw Error("ITokenizer cannot be set after initialization");this._tokenizer=e},get:function(){return this._tokenizer}}])&&p(t.prototype,n),e}();function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t,n){return t&&w(e.prototype,t),n&&w(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E=k((function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),x(this,"index",(function(e){})),x(this,"init",(function(e){var n;if(!(null!==(n=e.data)&&void 0!==n&&n.length)>0)throw"No data";return Promise.all(e.data.map((function(e){var n=e.name,r=e.format,o=e.src;if("LINKED_PLACES"===r)return function(e,t,n){return fetch(t).then((function(e){return e.json()})).then((function(t){console.log("Importing LP: ".concat(e," (").concat(t.features.length," features)")),n.graph.beginUpdate();var r=t.features.map((function(t){var r=function(e,t){var n=g({},e),r=P(e["@id"]);return delete n["@id"],n.id=r,n.title=n.properties.title,n.dataset=t,n.properties.id=r,n.properties.dataset=t,n}(t,e);n.graph.addNode(r.id,r);var o=L(r);return o&&n.spatialIndex.insert(g(g({},o),{},{node:r})),r}));r.filter((function(e){var t;return(null===(t=e.links)||void 0===t?void 0:t.length)>0})).forEach((function(e){return e.links.forEach((function(t){if(t.identifier||t.id){var r=e.id,o=P(t.id||t.identifier);t.id=o,n.graph.addLink(r,o,t)}else console.warn("Link does not declare identifier",t,"on node",e)}))})),n.graph.endUpdate(),n.index(r)}))}(n,o,t);throw"Unsupported format: "+r})))})),x(this,"getNode",(function(e){var n;return null===(n=t.graph.getNode(e))||void 0===n?void 0:n.data})),x(this,"getNodesInBounds",(function(e,n){var r,o,a,i;if(4===e.length){var l=y(e,4);r=l[0],o=l[1],a=l[2],i=l[3]}else{var u=y(e,2),s=y(u[0],2);r=s[0],o=s[1];var c=y(u[1],2);a=c[0],i=c[1]}var f=t.spatialIndex.search({minX:r,minY:o,maxX:a,maxY:i});return(n?f.filter((function(e){return e.node.dataset===n})):f).filter((function(e){return"Point"===e.node.geometry.type||(t=e).minX>r&&t.maxX<a&&t.minY>o&&t.maxY<i;var t})).map((function(e){return e.node}))})),this.graph=r()(),this.spatialIndex=new(a()),this.search=new h("id"),this.search.tokenizer={tokenize:function(e){return e.replace(/[.,'"#!$%^&*;:{}=\-_`~()]/g,"").split(/[\s,-]+/)}},this.search.addIndex("title"),this.search.addIndex("description"),this.search.addIndex("names")})),S=(0,e.createContext)(),_=function(t){var n=t.children,r={store:new E};return e.createElement(S.Provider,{value:r},n)};function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var P=function(e){return e.replace("https://","http://")},L=function(e){if(e.geometry){if("Point"===e.geometry.type){var t=C(e.geometry.coordinates,2),n=t[0],r=t[1];return{minX:n,minY:r,maxX:n,maxY:r}}var o=C(bbox(feature),4);return{minX:o[0],minY:o[1],maxX:o[2],maxY:o[3]}}};const N=e.createContext(null);function O(e){return{longitude:e.center.lng,latitude:e.center.lat,zoom:e.zoom,pitch:e.pitch,bearing:e.bearing,padding:e.padding}}function z(e,t){const n=t.viewState||t;let r=!1;if("longitude"in n&&"latitude"in n){const t=e.center;e.center=new t.constructor(n.longitude,n.latitude),r=r||t!==e.center}if("zoom"in n){const t=e.zoom;e.zoom=n.zoom,r=r||t!==e.zoom}if("bearing"in n){const t=e.bearing;e.bearing=n.bearing,r=r||t!==e.bearing}if("pitch"in n){const t=e.pitch;e.pitch=n.pitch,r=r||t!==e.pitch}return n.padding&&!e.isPaddingEqual(n.padding)&&(r=!0,e.padding=n.padding),r}const T=["type","source","source-layer","minzoom","maxzoom","filter","layout"];function A(e){if(!e)return null;if("string"==typeof e)return e;if("toJS"in e&&(e=e.toJS()),!e.layers)return e;const t={};for(const n of e.layers)t[n.id]=n;const n=e.layers.map((e=>{const n=t[e.ref];let r=null;if("interactive"in e&&(r={...e},delete r.interactive),n){r=r||{...e},delete r.ref;for(const e of T)e in n&&(r[e]=n[e])}return r||e}));return{...e,layers:n}}function I(e,t){if(e===t)return!0;if(!e||!t)return!1;if(Array.isArray(e)){if(!Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!I(e[n],t[n]))return!1;return!0}if(Array.isArray(t))return!1;if("object"==typeof e&&"object"==typeof t){const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const r of n){if(!t.hasOwnProperty(r))return!1;if(!I(e[r],t[r]))return!1}return!0}return!1}const R={mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",click:"onClick",dblclick:"onDblClick",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mouseout:"onMouseOut",contextmenu:"onContextMenu",touchstart:"onTouchStart",touchend:"onTouchEnd",touchmove:"onTouchMove",touchcancel:"onTouchCancel"},j={movestart:"onMoveStart",move:"onMove",moveend:"onMoveEnd",dragstart:"onDragStart",drag:"onDrag",dragend:"onDragEnd",zoomstart:"onZoomStart",zoom:"onZoom",zoomend:"onZoomEnd",rotatestart:"onRotateStart",rotate:"onRotate",rotateend:"onRotateEnd",pitchstart:"onPitchStart",pitch:"onPitch",pitchend:"onPitchEnd"},F={wheel:"onWheel",boxzoomstart:"onBoxZoomStart",boxzoomend:"onBoxZoomEnd",boxzoomcancel:"onBoxZoomCancel",resize:"onResize",load:"onLoad",render:"onRender",idle:"onIdle",remove:"onRemove",data:"onData",styledata:"onStyleData",sourcedata:"onSourceData",error:"onError"},D=["minZoom","maxZoom","minPitch","maxPitch","maxBounds","projection","renderWorldCopies"],U=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch"];class B{constructor(e,t,n){this._map=null,this._internalUpdate=!1,this._inRender=!1,this._hoveredFeatures=null,this._deferredEvents={move:!1,zoom:!1,pitch:!1,rotate:!1},this._onEvent=e=>{const t=this.props[F[e.type]];t&&t(e)},this._onPointerEvent=e=>{"mousemove"!==e.type&&"mouseout"!==e.type||this._updateHover(e);const t=this.props[R[e.type]];if(t){if(this.props.interactiveLayerIds&&"mouseover"!==e.type&&"mouseout"!==e.type){const t=this._hoveredFeatures||this._map.queryRenderedFeatures(e.point,{layers:this.props.interactiveLayerIds});if(!t.length)return;e.features=t}t(e),delete e.features}},this._onCameraEvent=e=>{if(!this._internalUpdate){const t=this.props[j[e.type]];t&&t(e)}e.type in this._deferredEvents&&(this._deferredEvents[e.type]=!1)},this._MapClass=e,this.props=t,this._initialize(n)}get map(){return this._map}get transform(){return this._renderTransform}setProps(e){const t=this.props;this.props=e;const n=this._updateSettings(e,t);n&&(this._renderTransform=this._map.transform.clone());const r=this._updateSize(e),o=this._updateViewState(e,!0);this._updateStyle(e,t),this._updateStyleComponents(e,t),this._updateHandlers(e,t),(n||r||o&&!this._map.isMoving())&&this.redraw()}static reuse(e,t){const n=B.savedMaps.pop();if(!n)return null;const r=n.map,o=r.getContainer();for(t.className=o.className;o.childNodes.length>0;)t.appendChild(o.childNodes[0]);return r._container=t,e.initialViewState&&n._updateViewState(e.initialViewState,!1),r.resize(),n.setProps({...e,styleDiffing:!1}),r.isStyleLoaded()?r.fire("load"):r.once("styledata",(()=>r.fire("load"))),n}_initialize(e){const{props:t}=this,n={...t,...t.initialViewState,accessToken:t.mapboxAccessToken||$()||null,container:e,style:A(t.mapStyle)},r=n.initialViewState||n.viewState||n;if(Object.assign(n,{center:[r.longitude||0,r.latitude||0],zoom:r.zoom||0,pitch:r.pitch||0,bearing:r.bearing||0}),t.gl){const e=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=()=>(HTMLCanvasElement.prototype.getContext=e,t.gl)}const o=new this._MapClass(n);r.padding&&o.setPadding(r.padding),t.cursor&&(o.getCanvas().style.cursor=t.cursor),this._renderTransform=o.transform.clone();const a=o._render;o._render=e=>{this._inRender=!0,a.call(o,e),this._inRender=!1};const i=o._renderTaskQueue.run;o._renderTaskQueue.run=e=>{i.call(o._renderTaskQueue,e),this._onBeforeRepaint()},o.on("render",(()=>this._onAfterRepaint()));const l=o.fire;o.fire=this._fireEvent.bind(this,l),o.on("resize",(()=>{this._renderTransform.resize(o.transform.width,o.transform.height)})),o.on("styledata",(()=>this._updateStyleComponents(this.props,{}))),o.on("sourcedata",(()=>this._updateStyleComponents(this.props,{})));for(const e in R)o.on(e,this._onPointerEvent);for(const e in j)o.on(e,this._onCameraEvent);for(const e in F)o.on(e,this._onEvent);this._map=o}recycle(){B.savedMaps.push(this)}destroy(){this._map.remove()}redraw(){const e=this._map;!this._inRender&&e.style&&(e._frame&&(e._frame.cancel(),e._frame=null),e._render())}_updateSize(e){const{viewState:t}=e;if(t){const e=this._map;if(t.width!==e.transform.width||t.height!==e.transform.height)return e.resize(),!0}return!1}_updateViewState(e,t){if(this._internalUpdate)return!1;const n=this._map,r=this._renderTransform,{zoom:o,pitch:a,bearing:i}=r,l=z(r,{...O(n.transform),...e});if(l&&t){const e=this._deferredEvents;e.move=!0,e.zoom||(e.zoom=o!==r.zoom),e.rotate||(e.rotate=i!==r.bearing),e.pitch||(e.pitch=a!==r.pitch)}return n.isMoving()||z(n.transform,e),l}_updateSettings(e,t){const n=this._map;let r=!1;for(const o of D)o in e&&!I(e[o],t[o])&&(r=!0,n[`set${o[0].toUpperCase()}${o.slice(1)}`](e[o]));return r}_updateStyle(e,t){if(e.cursor!==t.cursor&&(this._map.getCanvas().style.cursor=e.cursor),e.mapStyle!==t.mapStyle){const t={diff:e.styleDiffing};return"localIdeographFontFamily"in e&&(t.localIdeographFontFamily=e.localIdeographFontFamily),this._map.setStyle(A(e.mapStyle),t),!0}return!1}_updateStyleComponents(e,t){const n=this._map;let r=!1;return n.style.loaded()&&("light"in e&&!I(e.light,t.light)&&(r=!0,n.setLight(e.light)),"fog"in e&&!I(e.fog,t.fog)&&(r=!0,n.setFog(e.fog)),"terrain"in e&&!I(e.terrain,t.terrain)&&(e.terrain&&!n.getSource(e.terrain.source)||(r=!0,n.setTerrain(e.terrain)))),r}_updateHandlers(e,t){const n=this._map;let r=!1;for(const o of U){const a=e[o];I(a,t[o])||(r=!0,a?n[o].enable(a):n[o].disable())}return r}_updateHover(e){const{props:t}=this;if(t.interactiveLayerIds&&(t.onMouseMove||t.onMouseEnter||t.onMouseLeave)){const n=e.type,r=this._hoveredFeatures?.length>0;let o;if("mousemove"===n)try{o=this._map.queryRenderedFeatures(e.point,{layers:t.interactiveLayerIds})}catch{o=[]}else o=[];const a=o.length>0;!a&&r&&(e.type="mouseleave",this._onPointerEvent(e)),this._hoveredFeatures=o,a&&!r&&(e.type="mouseenter",this._onPointerEvent(e)),e.type=n}else this._hoveredFeatures=null}_fireEvent(e,t,n){const r=this._map,o=r.transform,a="string"==typeof t?t:t.type;return"move"===a&&this._updateViewState(this.props,!1),a in j&&("object"==typeof t&&(t.viewState=O(o)),this._map.isMoving())?(r.transform=this._renderTransform,e.call(r,t,n),r.transform=o,r):(e.call(r,t,n),r)}_onBeforeRepaint(){const e=this._map;this._internalUpdate=!0;for(const t in this._deferredEvents)this._deferredEvents[t]&&e.fire(t);this._internalUpdate=!1;const t=this._map.transform;this._map.transform=this._renderTransform,this._onAfterRepaint=()=>{this._map.transform=t}}}function $(){let e=null;if("undefined"!=typeof location){const t=/access_token=([^&\/]*)/.exec(location.search);e=t&&t[1]}try{e=e||process.env.MapboxAccessToken}catch{}try{e=e||process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}catch{}return e}B.savedMaps=[];const V=["setMaxBounds","setMinZoom","setMaxZoom","setMinPitch","setMaxPitch","setRenderWorldCopies","setProjection","setStyle","addSource","removeSource","addLayer","removeLayer","setLayerZoomRange","setFilter","setPaintProperty","setLayoutProperty","setLight","setTerrain","setFog","remove"];function W(e,t){if(!e)return null;const n=e.map,r={getMap:()=>n,getCenter:()=>e.transform.center,getZoom:()=>e.transform.zoom,getBearing:()=>e.transform.bearing,getPitch:()=>e.transform.pitch,getPadding:()=>e.transform.padding,getBounds:()=>e.transform.getBounds(),project:n=>e.transform.locationPoint(t.LngLat.convert(n)),unproject:n=>e.transform.pointLocation(t.Point.convert(n))};for(const e of function(e){const t=new Set;let n=e;for(;n;){for(const r of Object.getOwnPropertyNames(n))"_"!==r[0]&&"function"==typeof e[r]&&"fire"!==r&&"setEventedParent"!==r&&t.add(r);n=Object.getPrototypeOf(n)}return Array.from(t)}(n))e in r||V.includes(e)||(r[e]=n[e].bind(n));return r}const H="undefined"!=typeof document?e.useLayoutEffect:e.useEffect,Y=["baseApiUrl","maxParallelImageRequests","workerClass","workerCount","workerUrl"],Q=e.createContext(null),X={minZoom:0,maxZoom:22,minPitch:0,maxPitch:60,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,mapStyle:{version:8,sources:{},layers:[]},styleDiffing:!0,projection:"mercator",renderWorldCopies:!0,onError:e=>console.error(e.error),RTLTextPlugin:"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js"},q=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useContext)(N),[o,a]=(0,e.useState)(null),l=(0,e.useRef)(),{current:u}=(0,e.useRef)({mapLib:null,map:null});(0,e.useEffect)((()=>{const e=t.mapLib;let n,o=!0;return Promise.resolve(e||i.e(613).then(i.t.bind(i,613,23))).then((e=>{if(o){if(e.Map||(e=e.default),!e||!e.Map)throw new Error("Invalid mapLib");if(!e.supported(t))throw new Error("Map is not supported by this browser");!function(e,t){for(const n of Y)n in t&&(e[n]=t[n]);t.RTLTextPlugin&&e.getRTLTextPluginStatus&&"unavailable"===e.getRTLTextPluginStatus()&&e.setRTLTextPlugin(t.RTLTextPlugin,(e=>{e&&console.error(e)}),!1)}(e,t),t.reuseMaps&&(n=B.reuse(t,l.current)),n||(n=new B(e.Map,t,l.current)),u.map=n.map,u.mapLib=e,a(n),r?.onMapMount(W(n,e),t.id)}})).catch((e=>{t.onError({type:"error",target:null,originalEvent:null,error:e})})),()=>{o=!1,n&&(r?.onMapUnmount(t.id),t.reuseMaps?n.recycle():n.destroy())}}),[]),H((()=>{o&&o.setProps(t)})),(0,e.useImperativeHandle)(n,(()=>W(o,u.mapLib)),[o]);const s=(0,e.useMemo)((()=>({position:"relative",width:"100%",height:"100%",...t.style})),[t.style]);return e.createElement("div",{id:t.id,ref:l,style:s},o&&e.createElement(Q.Provider,{value:u},t.children))}));q.displayName="Map",q.defaultProps=X;const Z=q,K=/box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;function G(e,t){if(!e||!t)return;const n=e.style;for(const e in t){const r=t[e];Number.isFinite(r)&&!K.test(e)?n[e]=`${r}px`:n[e]=r}}function J(n){const{map:r,mapLib:o}=(0,e.useContext)(Q),a=(0,e.useRef)({props:n});a.current.props=n;const i=(0,e.useMemo)((()=>{let t=!1;e.Children.forEach(n.children,(e=>{e&&(t=!0)}));const r={...n,element:t?document.createElement("div"):null},l=new o.Marker(r).setLngLat([n.longitude,n.latitude]);return l.on("dragstart",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDragStart?.(t)})),l.on("drag",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDrag?.(t)})),l.on("dragend",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDragEnd?.(t)})),l}),[]);return(0,e.useEffect)((()=>(i.addTo(r),()=>{i.remove()})),[]),(0,e.useEffect)((()=>{G(i.getElement(),n.style)}),[n.style]),i.getLngLat().lng===n.longitude&&i.getLngLat().lat===n.latitude||i.setLngLat([n.longitude,n.latitude]),n.offset&&!function(e,t){const n=Array.isArray(e)?e[0]:e?e.x:0,r=Array.isArray(e)?e[1]:e?e.y:0,o=Array.isArray(t)?t[0]:t?t.x:0,a=Array.isArray(t)?t[1]:t?t.y:0;return n===o&&r===a}(i.getOffset(),n.offset)&&i.setOffset(n.offset),i.isDraggable()!==n.draggable&&i.setDraggable(n.draggable),i.getRotation()!==n.rotation&&i.setRotation(n.rotation),i.getRotationAlignment()!==n.rotationAlignment&&i.setRotationAlignment(n.rotationAlignment),i.getPitchAlignment()!==n.pitchAlignment&&i.setPitchAlignment(n.pitchAlignment),i.getPopup()!==n.popup&&i.setPopup(n.popup),(0,t.createPortal)(n.children,i.getElement())}function ee(e){return new Set(e?e.trim().split(/\s+/):[])}function te(t,n,r){const o=(0,e.useContext)(Q),a=(0,e.useMemo)((()=>t(o)),[]);return(0,e.useEffect)((()=>{const{map:e}=o;return e.hasControl(a)||e.addControl(a,(r||n)?.position),()=>{"function"==typeof n&&n(o),e.hasControl(a)&&e.removeControl(a)}}),[]),a}J.defaultProps={draggable:!1,popup:null,rotation:0,rotationAlignment:"auto",pitchAlignment:"auto"},e.memo(J),e.memo((function(n){const{map:r,mapLib:o}=(0,e.useContext)(Q),a=(0,e.useMemo)((()=>document.createElement("div")),[]),i=(0,e.useRef)({props:n});i.current.props=n;const l=(0,e.useMemo)((()=>{const e={...n},t=new o.Popup(e).setLngLat([n.longitude,n.latitude]);return t.on("open",(e=>{i.current.props.onOpen?.(e)})),t.on("close",(e=>{i.current.props.onClose?.(e)})),t}),[]);if((0,e.useEffect)((()=>(l.setDOMContent(a).addTo(r),()=>{l.isOpen()&&l.remove()})),[]),(0,e.useEffect)((()=>{G(l.getElement(),n.style)}),[n.style]),l.isOpen()&&(l.getLngLat().lng===n.longitude&&l.getLngLat().lat===n.latitude||l.setLngLat([n.longitude,n.latitude]),n.offset&&!I(l.options.offset,n.offset)&&l.setOffset(n.offset),l.options.anchor===n.anchor&&l.options.maxWidth===n.maxWidth||(l.options.anchor=n.anchor,l.setMaxWidth(n.maxWidth)),l.options.className!==n.className)){const e=ee(l.options.className),t=ee(n.className);for(const n of e)t.has(n)||l.removeClassName(n);for(const n of t)e.has(n)||l.addClassName(n);l.options.className=n.className}return(0,t.createPortal)(n.children,a)})),e.memo((function(t){const n=te((({mapLib:e})=>new e.AttributionControl(t)),{position:t.position});return(0,e.useEffect)((()=>{G(n._container,t.style)}),[t.style]),null})),e.memo((function(t){const n=te((({mapLib:e})=>new e.FullscreenControl({container:t.containerId&&document.getElementById(t.containerId)})),{position:t.position});return(0,e.useEffect)((()=>{G(n._controlContainer,t.style)}),[t.style]),null}));const ne=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useRef)({props:t}),o=te((({mapLib:e})=>{const n=new e.GeolocateControl(t);return n.on("geolocate",(e=>{r.current.props.onGeolocate?.(e)})),n.on("error",(e=>{r.current.props.onError?.(e)})),n.on("outofmaxbounds",(e=>{r.current.props.onOutOfMaxBounds?.(e)})),n.on("trackuserlocationstart",(e=>{r.current.props.onTrackUserLocationStart?.(e)})),n.on("trackuserlocationend",(e=>{r.current.props.onTrackUserLocationEnd?.(e)})),n}),{position:t.position});return r.current.props=t,(0,e.useImperativeHandle)(n,(()=>({trigger:()=>o.trigger()})),[]),(0,e.useEffect)((()=>{G(o._container,t.style)}),[t.style]),null}));function re(t){const n=te((({mapLib:e})=>new e.ScaleControl(t)),{position:t.position});return n.options.unit===t.unit&&n.options.maxWidth===t.maxWidth||(n.options.maxWidth=t.maxWidth,n.setUnit(t.unit)),(0,e.useEffect)((()=>{G(n._container,t.style)}),[t.style]),null}function oe(e,t){if(!e)throw new Error(t)}ne.displayName="GeolocateControl",e.memo(ne),e.memo((function(t){const n=te((({mapLib:e})=>new e.NavigationControl(t)),{position:t.position});return(0,e.useEffect)((()=>{G(n._container,t.style)}),[t.style]),null})),re.defaultProps={unit:"metric",maxWidth:100},e.memo(re);let ae=0;const ie=function(t){const{map:n}=(0,e.useContext)(Q),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),a=(0,e.useMemo)((()=>t.id||"jsx-source-"+ae++),[]);(0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),setTimeout((()=>{n.style&&n.style._loaded&&n.getSource(a)&&n.removeSource(a)}),0)}}}),[n]);let i=n&&n.style&&n.getSource(a);return i?function(e,t,n){oe(t.id===n.id,"source id changed"),oe(t.type===n.type,"source type changed");let r="",o=0;for(const e in t)"children"===e||"id"===e||I(n[e],t[e])||(r=e,o++);if(!o)return;const a=t.type;if("geojson"===a)e.setData(t.data);else if("image"===a)e.updateImage({url:t.url,coordinates:t.coordinates});else if("canvas"!==a&&"video"!==a||1!==o||"coordinates"!==r)if("vector"===a&&"setUrl"in e)switch(r){case"url":e.setUrl(t.url);break;case"tiles":e.setTiles(t.tiles)}else console.warn(`Unable to update <Source> prop: ${r}`);else e.setCoordinates(t.coordinates)}(i,t,r.current):i=function(e,t,n){if(e.style&&e.style._loaded){const r={...n};return delete r.id,delete r.children,e.addSource(t,r),e.getSource(t)}return null}(n,a,t),r.current=t,i&&e.Children.map(t.children,(t=>t&&(0,e.cloneElement)(t,{source:a})))||null};let le=0;const ue=function(t){const{map:n}=(0,e.useContext)(Q),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),a=(0,e.useMemo)((()=>t.id||"jsx-layer-"+le++),[]);if((0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),n.style&&n.style._loaded&&n.removeLayer(a)}}}),[n]),n&&n.style&&n.getLayer(a))try{!function(e,t,n,r){if(oe(n.id===r.id,"layer id changed"),oe(n.type===r.type,"layer type changed"),"custom"===n.type||"custom"===r.type)return;const{layout:o={},paint:a={},filter:i,minzoom:l,maxzoom:u,beforeId:s}=n;if(s!==r.beforeId&&e.moveLayer(t,s),o!==r.layout){const n=r.layout||{};for(const r in o)I(o[r],n[r])||e.setLayoutProperty(t,r,o[r]);for(const r in n)o.hasOwnProperty(r)||e.setLayoutProperty(t,r,void 0)}if(a!==r.paint){const n=r.paint||{};for(const r in a)I(a[r],n[r])||e.setPaintProperty(t,r,a[r]);for(const r in n)a.hasOwnProperty(r)||e.setPaintProperty(t,r,void 0)}I(i,r.filter)||e.setFilter(t,i),l===r.minzoom&&u===r.maxzoom||e.setLayerZoomRange(t,l,u)}(n,a,t,r.current)}catch(e){console.warn(e)}else!function(e,t,n){if(e.style&&e.style._loaded&&e.getSource(n.source)){const r={...n,id:t};delete r.beforeId,e.addLayer(r,n.beforeId)}}(n,a,t);return r.current=t,null};var se,ce=1e-6,fe="undefined"!=typeof Float32Array?Float32Array:Array;function de(e,t){const n=function(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3];return e[0]=n[0]*r+n[4]*o+n[8]*a+n[12]*i,e[1]=n[1]*r+n[5]*o+n[9]*a+n[13]*i,e[2]=n[2]*r+n[6]*o+n[10]*a+n[14]*i,e[3]=n[3]*r+n[7]*o+n[11]*a+n[15]*i,e}([],t,e);return function(e,t,n){e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n}(n,n,1/n[3]),n}function pe(e,t,n){return e<t?t:e>n?n:e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),se=new fe(4),fe!=Float32Array&&(se[0]=0,se[1]=0,se[2]=0,se[3]=0);const he=Math.log2||function(e){return Math.log(e)*Math.LOG2E};function me(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],m=t[12],g=t[13],v=t[14],y=t[15],b=n[0],w=n[1],k=n[2],x=n[3];return e[0]=b*r+w*l+k*f+x*m,e[1]=b*o+w*u+k*d+x*g,e[2]=b*a+w*s+k*p+x*v,e[3]=b*i+w*c+k*h+x*y,b=n[4],w=n[5],k=n[6],x=n[7],e[4]=b*r+w*l+k*f+x*m,e[5]=b*o+w*u+k*d+x*g,e[6]=b*a+w*s+k*p+x*v,e[7]=b*i+w*c+k*h+x*y,b=n[8],w=n[9],k=n[10],x=n[11],e[8]=b*r+w*l+k*f+x*m,e[9]=b*o+w*u+k*d+x*g,e[10]=b*a+w*s+k*p+x*v,e[11]=b*i+w*c+k*h+x*y,b=n[12],w=n[13],k=n[14],x=n[15],e[12]=b*r+w*l+k*f+x*m,e[13]=b*o+w*u+k*d+x*g,e[14]=b*a+w*s+k*p+x*v,e[15]=b*i+w*c+k*h+x*y,e}function ge(e,t,n){var r,o,a,i,l,u,s,c,f,d,p,h,m=n[0],g=n[1],v=n[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*v+t[12],e[13]=t[1]*m+t[5]*g+t[9]*v+t[13],e[14]=t[2]*m+t[6]*g+t[10]*v+t[14],e[15]=t[3]*m+t[7]*g+t[11]*v+t[15]):(r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],e[0]=r,e[1]=o,e[2]=a,e[3]=i,e[4]=l,e[5]=u,e[6]=s,e[7]=c,e[8]=f,e[9]=d,e[10]=p,e[11]=h,e[12]=r*m+l*g+f*v+t[12],e[13]=o*m+u*g+d*v+t[13],e[14]=a*m+s*g+p*v+t[14],e[15]=i*m+c*g+h*v+t[15]),e}function ve(e,t,n){var r=n[0],o=n[1],a=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*o,e[5]=t[5]*o,e[6]=t[6]*o,e[7]=t[7]*o,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ye(e,t){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],l=e[5],u=e[6],s=e[7],c=e[8],f=e[9],d=e[10],p=e[11],h=e[12],m=e[13],g=e[14],v=e[15],y=t[0],b=t[1],w=t[2],k=t[3],x=t[4],E=t[5],S=t[6],_=t[7],C=t[8],M=t[9],P=t[10],L=t[11],N=t[12],O=t[13],z=t[14],T=t[15];return Math.abs(n-y)<=ce*Math.max(1,Math.abs(n),Math.abs(y))&&Math.abs(r-b)<=ce*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(o-w)<=ce*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(a-k)<=ce*Math.max(1,Math.abs(a),Math.abs(k))&&Math.abs(i-x)<=ce*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(l-E)<=ce*Math.max(1,Math.abs(l),Math.abs(E))&&Math.abs(u-S)<=ce*Math.max(1,Math.abs(u),Math.abs(S))&&Math.abs(s-_)<=ce*Math.max(1,Math.abs(s),Math.abs(_))&&Math.abs(c-C)<=ce*Math.max(1,Math.abs(c),Math.abs(C))&&Math.abs(f-M)<=ce*Math.max(1,Math.abs(f),Math.abs(M))&&Math.abs(d-P)<=ce*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(p-L)<=ce*Math.max(1,Math.abs(p),Math.abs(L))&&Math.abs(h-N)<=ce*Math.max(1,Math.abs(h),Math.abs(N))&&Math.abs(m-O)<=ce*Math.max(1,Math.abs(m),Math.abs(O))&&Math.abs(g-z)<=ce*Math.max(1,Math.abs(g),Math.abs(z))&&Math.abs(v-T)<=ce*Math.max(1,Math.abs(v),Math.abs(T))}function be(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}function we(e,t,n,r){var o=t[0],a=t[1];return e[0]=o+r*(n[0]-o),e[1]=a+r*(n[1]-a),e}!function(){var e=new fe(2);fe!=Float32Array&&(e[0]=0,e[1]=0)}();function ke(e,t){if(!e)throw new Error(t||"@math.gl/web-mercator: assertion failed.")}!function(){var e=new fe(3);fe!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0)}();const xe=Math.PI,Ee=xe/4,Se=xe/180,_e=180/xe,Ce=512,Me=85.051129;function Pe([e,t]){ke(Number.isFinite(e)),ke(Number.isFinite(t)&&t>=-90&&t<=90,"invalid latitude");const n=t*Se;return[Ce*(e*Se+xe)/(2*xe),Ce*(xe+Math.log(Math.tan(Ee+.5*n)))/(2*xe)]}function Le([e,t]){const n=e/Ce*(2*xe)-xe,r=2*(Math.atan(Math.exp(t/Ce*(2*xe)-xe))-Ee);return[n*_e,r*_e]}function Ne(e){return 2*Math.atan(.5/e)*_e}function Oe(e){return.5/Math.tan(.5*e*Se)}function ze(e,t,n=0){const[r,o,a]=e;if(ke(Number.isFinite(r)&&Number.isFinite(o),"invalid pixel coordinate"),Number.isFinite(a))return de(t,[r,o,a,1]);const i=de(t,[r,o,0,1]),l=de(t,[r,o,1,1]),u=i[2],s=l[2];return we([],i,l,u===s?0:((n||0)-u)/(s-u))}const Te=Math.PI/180;function Ae(e,t,n){const{pixelUnprojectionMatrix:r}=e,o=de(r,[t,0,1,1]),a=de(r,[t,e.height,1,1]),i=Le(we([],o,a,(n*e.distanceScales.unitsPerMeter[2]-o[2])/(a[2]-o[2])));return i[2]=n,i}class Ie{constructor({width:e,height:t,latitude:n=0,longitude:r=0,zoom:o=0,pitch:a=0,bearing:i=0,altitude:l=null,fovy:u=null,position:s=null,nearZMultiplier:c=.02,farZMultiplier:f=1.01}={width:1,height:1}){e=e||1,t=t||1,null===u&&null===l?u=Ne(l=1.5):null===u?u=Ne(l):null===l&&(l=Oe(u));const d=function(e){return Math.pow(2,e)}(o);l=Math.max(.75,l);const p=function({latitude:e,longitude:t,highPrecision:n=!1}){ke(Number.isFinite(e)&&Number.isFinite(t));const r={},o=Math.cos(e*Se),a=512/360,i=a/o,l=12790407194604047e-21/o;if(r.unitsPerMeter=[l,l,l],r.metersPerUnit=[1/l,1/l,1/l],r.unitsPerDegree=[a,i,l],r.degreesPerUnit=[.703125,1/i,1/l],n){const t=Se*Math.tan(e*Se)/o,n=a*t/2,u=12790407194604047e-21*t,s=u/i*l;r.unitsPerDegree2=[0,n,u],r.unitsPerMeter2=[s,0,s]}return r}({longitude:r,latitude:n}),h=Pe([r,n]);h[2]=0,s&&function(e,t,n){e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2]}(h,h,function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}([],s,p.unitsPerMeter)),this.projectionMatrix=function({width:e,height:t,pitch:n,altitude:r,fovy:o,nearZMultiplier:a,farZMultiplier:i}){const{fov:l,aspect:u,near:s,far:c}=function({width:e,height:t,fovy:n=Ne(1.5),altitude:r,pitch:o=0,nearZMultiplier:a=1,farZMultiplier:i=1}){void 0!==r&&(n=Ne(r));const l=.5*n*Se,u=Oe(n),s=o*Se,c=Math.sin(l)*u/Math.sin(Math.min(Math.max(Math.PI/2-s-l,.01),Math.PI-.01));return{fov:2*l,aspect:e/t,focalDistance:u,near:a,far:(Math.sin(s)*c+u)*i}}({width:e,height:t,altitude:r,fovy:o,pitch:n,nearZMultiplier:a,farZMultiplier:i}),f=function(e,t,n,r,o){var a,i=1/Math.tan(t/2);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(a=1/(r-o),e[10]=(o+r)*a,e[14]=2*o*r*a):(e[10]=-1,e[14]=-2*r),e}([],l,u,s,c);return f}({width:e,height:t,pitch:a,fovy:u,nearZMultiplier:c,farZMultiplier:f}),this.viewMatrix=function({height:e,pitch:t,bearing:n,altitude:r,scale:o,center:a=null}){const i=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];return ge(i,i,[0,0,-r]),function(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[4],i=t[5],l=t[6],u=t[7],s=t[8],c=t[9],f=t[10],d=t[11];t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=a*o+s*r,e[5]=i*o+c*r,e[6]=l*o+f*r,e[7]=u*o+d*r,e[8]=s*o-a*r,e[9]=c*o-i*r,e[10]=f*o-l*r,e[11]=d*o-u*r}(i,i,-t*Se),function(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[0],i=t[1],l=t[2],u=t[3],s=t[4],c=t[5],f=t[6],d=t[7];t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*o+s*r,e[1]=i*o+c*r,e[2]=l*o+f*r,e[3]=u*o+d*r,e[4]=s*o-a*r,e[5]=c*o-i*r,e[6]=f*o-l*r,e[7]=d*o-u*r}(i,i,n*Se),ve(i,i,[o/=e,o,o]),a&&ge(i,i,function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}([],a)),i}({height:t,scale:d,center:h,pitch:a,bearing:i,altitude:l}),this.width=e,this.height=t,this.scale=d,this.latitude=n,this.longitude=r,this.zoom=o,this.pitch=a,this.bearing=i,this.altitude=l,this.fovy=u,this.center=h,this.meterOffset=s||[0,0,0],this.distanceScales=p,this._initMatrices(),this.equals=this.equals.bind(this),this.project=this.project.bind(this),this.unproject=this.unproject.bind(this),this.projectPosition=this.projectPosition.bind(this),this.unprojectPosition=this.unprojectPosition.bind(this),Object.freeze(this)}_initMatrices(){const{width:e,height:t,projectionMatrix:n,viewMatrix:r}=this,o=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];me(o,o,n),me(o,o,r),this.viewProjectionMatrix=o;const a=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];ve(a,a,[e/2,-t/2,1]),ge(a,a,[1,-1,0]),me(a,a,o);const i=function(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],d=t[10],p=t[11],h=t[12],m=t[13],g=t[14],v=t[15],y=n*l-r*i,b=n*u-o*i,w=n*s-a*i,k=r*u-o*l,x=r*s-a*l,E=o*s-a*u,S=c*m-f*h,_=c*g-d*h,C=c*v-p*h,M=f*g-d*m,P=f*v-p*m,L=d*v-p*g,N=y*L-b*P+w*M+k*C-x*_+E*S;return N?(N=1/N,e[0]=(l*L-u*P+s*M)*N,e[1]=(o*P-r*L-a*M)*N,e[2]=(m*E-g*x+v*k)*N,e[3]=(d*x-f*E-p*k)*N,e[4]=(u*C-i*L-s*_)*N,e[5]=(n*L-o*C+a*_)*N,e[6]=(g*w-h*E-v*b)*N,e[7]=(c*E-d*w+p*b)*N,e[8]=(i*P-l*C+s*S)*N,e[9]=(r*C-n*P-a*S)*N,e[10]=(h*x-m*w+v*y)*N,e[11]=(f*w-c*x-p*y)*N,e[12]=(l*_-i*M-u*S)*N,e[13]=(n*M-r*_+o*S)*N,e[14]=(m*b-h*k-g*y)*N,e[15]=(c*k-f*b+d*y)*N,e):null}([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],a);if(!i)throw new Error("Pixel project matrix not invertible");this.pixelProjectionMatrix=a,this.pixelUnprojectionMatrix=i}equals(e){return e instanceof Ie&&e.width===this.width&&e.height===this.height&&ye(e.projectionMatrix,this.projectionMatrix)&&ye(e.viewMatrix,this.viewMatrix)}project(e,{topLeft:t=!0}={}){const n=function(e,t){const[n,r,o=0]=e;return ke(Number.isFinite(n)&&Number.isFinite(r)&&Number.isFinite(o)),de(t,[n,r,o,1])}(this.projectPosition(e),this.pixelProjectionMatrix),[r,o]=n,a=t?o:this.height-o;return 2===e.length?[r,a]:[r,a,n[2]]}unproject(e,{topLeft:t=!0,targetZ:n}={}){const[r,o,a]=e,i=t?o:this.height-o,l=n&&n*this.distanceScales.unitsPerMeter[2],u=ze([r,i,a],this.pixelUnprojectionMatrix,l),[s,c,f]=this.unprojectPosition(u);return Number.isFinite(a)?[s,c,f]:Number.isFinite(n)?[s,c,n]:[s,c]}projectPosition(e){const[t,n]=Pe(e);return[t,n,(e[2]||0)*this.distanceScales.unitsPerMeter[2]]}unprojectPosition(e){const[t,n]=Le(e);return[t,n,(e[2]||0)*this.distanceScales.metersPerUnit[2]]}projectFlat(e){return Pe(e)}unprojectFlat(e){return Le(e)}getMapCenterByLngLatPosition({lngLat:e,pos:t}){const n=ze(t,this.pixelUnprojectionMatrix),r=be([],Pe(e),function(e,t){return e[0]=-t[0],e[1]=-t[1],e}([],n));return Le(be([],this.center,r))}getLocationAtPoint({lngLat:e,pos:t}){return this.getMapCenterByLngLatPosition({lngLat:e,pos:t})}fitBounds(e,t={}){const{width:n,height:r}=this,{longitude:o,latitude:a,zoom:i}=function({width:e,height:t,bounds:n,minExtent:r=0,maxZoom:o=24,padding:a=0,offset:i=[0,0]}){const[[l,u],[s,c]]=n;Number.isFinite(a)?a={top:a,bottom:a,left:a,right:a}:ke(Number.isFinite(a.top)&&Number.isFinite(a.bottom)&&Number.isFinite(a.left)&&Number.isFinite(a.right));const f=Pe([l,pe(c,-85.051129,Me)]),d=Pe([s,pe(u,-85.051129,Me)]),p=[Math.max(Math.abs(d[0]-f[0]),r),Math.max(Math.abs(d[1]-f[1]),r)],h=[e-a.left-a.right-2*Math.abs(i[0]),t-a.top-a.bottom-2*Math.abs(i[1])];ke(h[0]>0&&h[1]>0);const m=h[0]/p[0],g=h[1]/p[1],v=(a.right-a.left)/2/m,y=(a.bottom-a.top)/2/g,b=Le([(d[0]+f[0])/2+v,(d[1]+f[1])/2+y]),w=Math.min(o,he(Math.abs(Math.min(m,g))));return ke(Number.isFinite(w)),{longitude:b[0],latitude:b[1],zoom:w}}(Object.assign({width:n,height:r,bounds:e},t));return new Ie({width:n,height:r,longitude:o,latitude:a,zoom:i})}getBounds(e){const t=this.getBoundingRegion(e),n=Math.min(...t.map((e=>e[0]))),r=Math.max(...t.map((e=>e[0])));return[[n,Math.min(...t.map((e=>e[1])))],[r,Math.max(...t.map((e=>e[1])))]]}getBoundingRegion(e={}){return function(e,t=0){const{width:n,height:r,unproject:o}=e,a={targetZ:t},i=o([0,r],a),l=o([n,r],a);let u,s;return(e.fovy?.5*e.fovy*Te:Math.atan(.5/e.altitude))>(90-e.pitch)*Te-.01?(u=Ae(e,0,t),s=Ae(e,n,t)):(u=o([0,0],a),s=o([n,0],a)),[i,l,s,u]}(this,e.z||0)}}function Re(e,t){return e===t}function je(e){return"function"==typeof e?function(){return e}:e}var Fe=[15,15];const De=function(t){var n=t.node;return e.createElement("div",{className:"p6o-map-hover",style:{left:t.x+Fe[0],top:t.y+Fe[1]}},n.title)};function Ue(){return Ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ue.apply(this,arguments)}function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $e(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){Ve(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ve(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function We(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?He(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ye=function(e){return{type:"FeatureCollection",features:e||[]}};const Qe=function(t){var n=(0,e.useRef)(),r=(0,e.useContext)(S).store,o=t.config,a=We((0,e.useState)(),2),i=a[0],l=a[1],u=We(function(t,n,r){var o=r&&r.equalityFn||Re,a=function(t){var n=(0,e.useState)(je(t)),r=n[0],o=n[1];return[r,(0,e.useCallback)((function(e){return o(je(e))}),[])]}(t),i=a[0],l=a[1],u=function(t,n,r){var o=this,a=(0,e.useRef)(null),i=(0,e.useRef)(0),l=(0,e.useRef)(null),u=(0,e.useRef)([]),s=(0,e.useRef)(),c=(0,e.useRef)(),f=(0,e.useRef)(t),d=(0,e.useRef)(!0);f.current=t;var p=!n&&0!==n&&"undefined"!=typeof window;if("function"!=typeof t)throw new TypeError("Expected a function");n=+n||0;var h=!!(r=r||{}).leading,m=!("trailing"in r)||!!r.trailing,g="maxWait"in r,v=g?Math.max(+r.maxWait||0,n):null;(0,e.useEffect)((function(){return d.current=!0,function(){d.current=!1}}),[]);var y=(0,e.useMemo)((function(){var e=function(e){var t=u.current,n=s.current;return u.current=s.current=null,i.current=e,c.current=f.current.apply(n,t)},t=function(e,t){p&&cancelAnimationFrame(l.current),l.current=p?requestAnimationFrame(e):setTimeout(e,t)},r=function(e){if(!d.current)return!1;var t=e-a.current,r=e-i.current;return!a.current||t>=n||t<0||g&&r>=v},y=function(t){return l.current=null,m&&u.current?e(t):(u.current=s.current=null,c.current)},b=function(){var e=Date.now();if(r(e))return y(e);if(d.current){var o=e-a.current,l=e-i.current,u=n-o,s=g?Math.min(u,v-l):u;t(b,s)}},w=function(){for(var f=[],p=0;p<arguments.length;p++)f[p]=arguments[p];var m=Date.now(),v=r(m);if(u.current=f,s.current=o,a.current=m,v){if(!l.current&&d.current)return i.current=a.current,t(b,n),h?e(a.current):c.current;if(g)return t(b,n),e(a.current)}return l.current||t(b,n),c.current};return w.cancel=function(){l.current&&(p?cancelAnimationFrame(l.current):clearTimeout(l.current)),i.current=0,u.current=a.current=s.current=l.current=null},w.isPending=function(){return!!l.current},w.flush=function(){return l.current?y(Date.now()):c.current},w}),[h,g,n,v,m,p]);return y}((0,e.useCallback)((function(e){return l(e)}),[l]),n,r),s=(0,e.useRef)(t);return o(s.current,t)||(u(t),s.current=t),[i,u]}(i,500),1)[0],s=We((0,e.useState)(Ye()),2),c=s[0],f=s[1],d=We((0,e.useState)(),2),p=d[0],h=d[1],m="https://api.maptiler.com/maps/outdoor/style.json?key=".concat(o.api_key);(0,e.useEffect)((function(){f(Ye(r.getNodesInBounds(o.initial_bounds)))}),[t.loaded]),(0,e.useEffect)((function(){var e=$e({width:window.innerWidth,height:window.innerHeight},u),t=new Ie(e).getBounds(),n=r.getNodesInBounds(t);f(Ye(n))}),[u]),(0,e.useEffect)((function(){p?n.current.classList.add("hover"):n.current.classList.remove("hover")}),[p]);var g,v=(0,e.useCallback)((function(e){return l(e.viewState)}),[]),y=(0,e.useCallback)((function(e){var t=e.features,n=e.point,o=t[0].properties.id,a=o===(null==p?void 0:p.id)?$e($e({},p),n):$e({node:r.getNode(o)},n);h(a)}),[]);return e.createElement("div",{className:"p6o-map-container",ref:n},e.createElement(Z,{initialViewState:{bounds:o.initial_bounds},mapStyle:m,interactiveLayerIds:["search-results"],onMove:v,onClick:function(){p&&console.log("clicked",p)},onMouseMove:y,onMouseLeave:function(){return h(null)}},e.createElement(ie,{type:"geojson",data:c},e.createElement(ue,Ue({id:"search-results"},{type:"circle",paint:{"circle-radius":(null==(g={fill:"red",radius:5})?void 0:g.radius)||4,"circle-color":(null==g?void 0:g.fill)||"#fff","circle-stroke-color":(null==g?void 0:g.stroke)||"#000","circle-stroke-width":(null==g?void 0:g.strokeWidth)||1}})))),p&&e.createElement(De,p))};function Xe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ze=function(){var t=(0,e.useContext)(S).store,n=Xe((0,e.useState)(),2),r=n[0],o=n[1],a=Xe((0,e.useState)(!1),2),i=a[0],l=a[1];return(0,e.useEffect)((function(){fetch("peripleo.config.json").then((function(e){return e.json()})).then(o).catch((function(e){console.error("Error loading Peripleo config. Please add a valid `peripleo.config.json` to your application root.")}))}),[]),(0,e.useEffect)((function(){r&&t.init(r).then((function(){return l(!0)}))}),[r]),e.createElement(e.Fragment,null,r&&e.createElement(Qe,{config:r,loaded:i}))};var Ke=i(379),Ge=i.n(Ke),Je=i(795),et=i.n(Je),tt=i(569),nt=i.n(tt),rt=i(565),ot=i.n(rt),at=i(216),it=i.n(at),lt=i(589),ut=i.n(lt),st=i(800),ct={};ct.styleTagTransform=ut(),ct.setAttributes=ot(),ct.insert=nt().bind(null,"head"),ct.domAPI=et(),ct.insertStyleElement=it(),Ge()(st.Z,ct),st.Z&&st.Z.locals&&st.Z.locals,t.render(e.createElement(_,null,e.createElement(Ze,null)),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,