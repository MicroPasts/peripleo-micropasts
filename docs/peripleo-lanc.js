/*! For license information please see peripleo-lanc.js.LICENSE.txt */
(()=>{var e,t,n,r,o={800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'html,body,#app{padding:0;margin:0;min-height:100vh;overflow:hidden;font-size:16px}html *,body *,#app *{font-family:"Quicksand",sans-serif}.p6o-hud{color:#3e3e3e}.p6o-hud .p6o-magic-button{position:absolute;left:20px;top:20px;width:60px;height:60px;font-size:34px;display:flex;align-items:center;justify-content:center;background-color:#f4f4f4;border:1px solid rgba(0,0,0,.2);box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(0,0,0,.14);z-index:98;cursor:pointer;-webkit-border-radius:50%;-khtml-border-radius:50%;-moz-border-radius:50%;border-radius:50%}.p6o-hud .p6o-magic-button:hover{background-color:#fff;box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(255,255,255,.2)}.p6o-hud .p6o-hud-searchpanel{position:absolute;left:50px;top:22px;height:40px;padding-left:40px;box-sizing:border-box;background-color:#fcfcfc;box-shadow:inset 4px 1px 6px #fff,inset -1px -1px 2px rgba(0,0,0,.25),0 0 6px rgba(0,0,0,.1);border-radius:4px;overflow:hidden;z-index:0}.p6o-hud .p6o-hud-searchpanel input{outline:none;border:none;width:100%;height:100%;box-sizing:border-box;font-size:18px;outline:none;border:none;width:100%;height:100%;box-sizing:border-box;background-color:transparent}.p6o-loading{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#1a6dad6b;z-index:1}.p6o-loading .p6o-loading-center{position:absolute;top:0;left:0;width:100vw;height:100vh;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column;font-size:14px}.p6o-loading .p6o-loading-center p{margin:0;padding:10px 0}.p6o-loading .p6o-loading-center .p6o-loading-stage{padding-top:24px}.p6o-loading .p6o-loading-center .p6o-load-progress-outer{border:1px solid #fff;height:2px;width:240px;max-width:80vw;position:relative}.p6o-loading .p6o-loading-center .p6o-load-progress-outer .p6o-load-progress-inner{height:100%;background-color:#fff}.p6o-loading .p6o-loading-bottom{position:absolute;bottom:20px;left:20px;font-size:13px;color:#bfe1ff}@keyframes rotating{from{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-ms-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-ms-transform:rotate(360deg);-o-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes rotating{from{-webkit-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(360deg);-o-transform:rotate(360deg);transform:rotate(360deg)}}.p6o-loading .logo-image{width:80px;height:80px;-webkit-animation:rotating 15s linear infinite;-moz-animation:rotating 15s linear infinite;-ms-animation:rotating 15s linear infinite;-o-animation:rotating 15s linear infinite;animation:rotating 15s linear infinite}.p6o-map-container{position:relative;height:100vh}.p6o-map-container .p6o-map-hover{position:absolute;background-color:#fff;padding:10px 12px;max-width:500px;-webkit-border-radius:2px;-khtml-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-box-shadow:2px 2px 14px rgba(0,0,0,.4);-moz-box-shadow:2px 2px 14px rgba(0,0,0,.4);box-shadow:2px 2px 14px rgba(0,0,0,.4)}.p6o-map-container.hover *{cursor:pointer}.p6o-map-container.loading{filter:blur(4px) grayscale(0.8) brightness(1.2) contrast(0.7)}.p6o-map-container.loading .p6o-hud{display:none}.p6o-welcome-wrapper{position:absolute;top:0;left:0;width:100vw;height:100vh;pointer-events:none;display:flex;justify-content:center;align-items:center;background-color:rgba(0,0,0,.65);z-index:99}.p6o-welcome-wrapper .p6o-welcome{padding:10px;background-color:#fff;pointer-events:all}',"",{version:3,sources:["webpack://./src/index.scss","webpack://./src/hud/HUD.scss","webpack://./src/loading/Loading.scss","webpack://./src/map/Map.scss","webpack://./src/tutorial/Tutorial.scss"],names:[],mappings:"AAAA,eACE,SAAA,CACA,QAAA,CACA,gBAAA,CACA,eAAA,CACA,cAAA,CAEA,qBACE,kCAAA,CCRJ,SACE,aAAA,CAEA,2BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,wBAAA,CACA,+BAAA,CACA,+FAAA,CACA,UAAA,CACA,cAAA,CDFF,yBCG2B,CDF1B,wBCE0B,CDDxB,sBCCwB,CAAA,iBAAA,CAG3B,iCACE,qBAAA,CACA,oGAAA,CAGF,8BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,WAAA,CACA,iBAAA,CACA,qBAAA,CACA,wBAAA,CACA,4FAAA,CACA,iBAAA,CACA,eAAA,CACA,SAAA,CAEA,oCACE,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,4BAAA,CCnDN,aACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,0BAAA,CACA,SAAA,CAEA,iCACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,UAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBAAA,CACA,cAAA,CAEA,mCACE,QAAA,CACA,cAAA,CAGF,oDACE,gBAAA,CAGF,0DACE,qBAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CAEA,mFACE,WAAA,CACA,qBAAA,CAON,iCACE,iBAAA,CACA,WAAA,CACA,SAAA,CACA,cAAA,CACA,aAAA,CAGF,oBAEE,KACE,8BAAA,CACG,2BAAA,CACC,0BAAA,CACC,yBAAA,CACG,sBAAA,CAGV,GACE,gCAAA,CACG,6BAAA,CACC,4BAAA,CACC,2BAAA,CACG,wBAAA,CAAA,CAKZ,4BAEE,KACE,8BAAA,CACK,yBAAA,CACG,sBAAA,CAGV,GACE,gCAAA,CACK,2BAAA,CACG,wBAAA,CAAA,CAKZ,yBACE,UAAA,CACA,WAAA,CAEA,8CAAA,CACG,2CAAA,CACC,0CAAA,CACC,yCAAA,CACG,sCAAA,CCnGZ,mBACE,iBAAA,CACA,YAAA,CAEA,kCACE,iBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CHOF,yBGN2B,CHO1B,wBGP0B,CHQxB,sBGRwB,CHSnB,iBGTmB,CHa3B,8CAAA,CACG,2CAAA,CACK,sCAAA,CGTV,2BACE,cAAA,CAGF,2BACE,6DAAA,CAEA,oCACE,YAAA,CCvBJ,qBACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,mBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,gCAAA,CACA,UAAA,CAEA,kCACE,YAAA,CACA,qBAAA,CACA,kBAAA",sourcesContent:["html, body, #app {\n  padding:0;\n  margin:0;\n  min-height:100vh;\n  overflow:hidden;\n  font-size:16px;\n  \n  * {\n    font-family:'Quicksand', sans-serif;\n  }\n\n}\n\n/** Mixins **/\n@mixin rounded-corners($radius) {\n  -webkit-border-radius:$radius;\n   -khtml-border-radius:$radius;\n     -moz-border-radius:$radius;\n          border-radius:$radius;\n}\n\n@mixin box-shadow($x, $y, $radius, $opacity) {\n  -webkit-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n     -moz-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n          box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n}\n\n@import './hud/HUD';\n@import './loading/Loading';\n@import './map/Map';\n@import './tutorial/Tutorial';",".p6o-hud {\n  color:#3e3e3e;\n\n  .p6o-magic-button {\n    position:absolute;\n    left:20px;\n    top:20px;\n    width:60px;\n    height:60px;\n    font-size:34px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    background-color:#f4f4f4;\n    border:1px solid rgba(0,0,0,0.2);\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(0,0,0,0.14);\n    z-index:98;\n    cursor:pointer;\n    @include rounded-corners(50%);\n  }\n\n  .p6o-magic-button:hover {\n    background-color:#fff;\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(255,255,255,0.2);\n  }\n\n  .p6o-hud-searchpanel {\n    position:absolute;\n    left:50px;\n    top:22px;\n    height:40px;\n    padding-left:40px;\n    box-sizing:border-box;\n    background-color:#fcfCfc;\n    box-shadow:inset 4px 1px 6px #fff, inset -1px -1px 2px rgba(0,0,0,0.25), 0 0 6px rgba(0,0,0,0.1);\n    border-radius:4px;\n    overflow:hidden;\n    z-index:0;\n\n    input {\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      font-size:18px;\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      background-color:transparent;\n    }\n\n  }\n\n}",".p6o-loading {\n  position:absolute;\n  top:0;\n  left:0;\n  width:100vw;\n  height:100vh;\n  background-color:#1a6dad6b;\n  z-index:1;\n\n  .p6o-loading-center {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100vw;\n    height:100vh;\n    color:#fff;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    flex-direction:column;\n    font-size:14px;\n\n    p {\n      margin:0;\n      padding:10px 0;\n    }\n\n    .p6o-loading-stage {\n      padding-top:24px;\n    }\n\n    .p6o-load-progress-outer {\n      border:1px solid #fff;\n      height:2px;\n      width:240px;\n      max-width:80vw;\n      position:relative;\n\n      .p6o-load-progress-inner {\n        height:100%;\n        background-color:#fff;\n      }\n\n    }\n\n  }\n\n  .p6o-loading-bottom {\n    position:absolute;\n    bottom:20px;\n    left:20px;\n    font-size:13px;\n    color:#bfe1ff;\n  }\n\n  @keyframes rotating {\n\n    from {\n      -webkit-transform:rotate(0deg);\n         -moz-transform:rotate(0deg);\n          -ms-transform:rotate(0deg);\n           -o-transform:rotate(0deg);\n              transform:rotate(0deg);\n    }\n\n    to {\n      -webkit-transform:rotate(360deg);\n         -moz-transform:rotate(360deg);\n          -ms-transform:rotate(360deg);\n           -o-transform:rotate(360deg);\n              transform:rotate(360deg);\n    }\n\n  }\n\n  @-webkit-keyframes rotating {\n\n    from {\n      -webkit-transform:rotate(0deg);\n           -o-transform:rotate(0deg);\n              transform:rotate(0deg);\n    }\n\n    to {\n      -webkit-transform:rotate(360deg);\n           -o-transform:rotate(360deg);\n              transform:rotate(360deg);\n    }\n\n  }\n\n  .logo-image {\n    width:80px;\n    height:80px;\n    \n    -webkit-animation:rotating 15s linear infinite;\n       -moz-animation:rotating 15s linear infinite;\n        -ms-animation:rotating 15s linear infinite;\n         -o-animation:rotating 15s linear infinite;\n            animation:rotating 15s linear infinite;\n  }\n\n}",".p6o-map-container {\n  position:relative;\n  height:100vh;\n\n  .p6o-map-hover {\n    position:absolute;\n    background-color:#fff;\n    padding:10px 12px;\n    max-width:500px;\n    @include rounded-corners(2px);\n    @include box-shadow(2px, 2px, 14px, 0.4);\n  }\n\n}\n\n.p6o-map-container.hover * {\n  cursor:pointer;\n}\n\n.p6o-map-container.loading {\n  filter: blur(4px) grayscale(0.8) brightness(1.2) contrast(0.7);\n\n  .p6o-hud {\n    display:none;\n  }\n\n}",".p6o-welcome-wrapper {\n  position:absolute;\n  top:0;\n  left:0;\n  width:100vw;\n  height:100vh;\n  pointer-events:none;\n  display:flex;\n  justify-content:center;\n  align-items:center;\n  background-color:rgba(0,0,0,0.65);\n  z-index:99;\n\n  .p6o-welcome {\n    padding:10px;\n    background-color:#fff;\n    pointer-events:all;\n  }\n\n}"],sourceRoot:""}]);const l=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},681:function(e,t,n){var r,o;o=function(e){var t=["N","E","A","D"];function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function l(e,t,n){l.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function s(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function u(e){var t=typeof e;return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function c(e){var t=0;if(0===e.length)return t;for(var n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t&=t;return t}function f(e){var t=0,n=u(e);if("array"===n)return e.forEach((function(e){t+=f(e)})),t+c("[type: array, hash: "+t+"]");if("object"===n){for(var r in e)if(e.hasOwnProperty(r)){var o="[ type: object, key: "+r+", value hash: "+f(e[r])+"]";t+=c(o)}return t}return t+c("[ type: "+n+" ; value: "+e+"]")}function d(e,t,n,r,s,c,p,h){n=n||[],p=p||[];var m=(s=s||[]).slice(0);if(null!=c){if(r){if("function"==typeof r&&r(m,c))return;if("object"==typeof r){if(r.prefilter&&r.prefilter(m,c))return;if(r.normalize){var v=r.normalize(m,c,e,t);v&&(e=v[0],t=v[1])}}}m.push(c)}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var g,y,b,w,x=typeof e,E=typeof t,A="undefined"!==x||p&&p.length>0&&p[p.length-1].lhs&&Object.getOwnPropertyDescriptor(p[p.length-1].lhs,c),k="undefined"!==E||p&&p.length>0&&p[p.length-1].rhs&&Object.getOwnPropertyDescriptor(p[p.length-1].rhs,c);if(!A&&k)n.push(new i(m,t));else if(!k&&A)n.push(new a(m,e));else if(u(e)!==u(t))n.push(new o(m,e,t));else if("date"===u(e)&&e-t!=0)n.push(new o(m,e,t));else if("object"===x&&null!==e&&null!==t){for(g=p.length-1;g>-1;--g)if(p[g].lhs===e){w=!0;break}if(w)e!==t&&n.push(new o(m,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){for(h&&(e.sort((function(e,t){return f(e)-f(t)})),t.sort((function(e,t){return f(e)-f(t)}))),g=t.length-1,y=e.length-1;g>y;)n.push(new l(m,g,new i(void 0,t[g--])));for(;y>g;)n.push(new l(m,y,new a(void 0,e[y--])));for(;g>=0;--g)d(e[g],t[g],n,r,m,g,p,h)}else{var C=Object.keys(e),S=Object.keys(t);for(g=0;g<C.length;++g)b=C[g],(w=S.indexOf(b))>=0?(d(e[b],t[b],n,r,m,b,p,h),S[w]=null):d(e[b],void 0,n,r,m,b,p,h);for(g=0;g<S.length;++g)(b=S[g])&&d(void 0,t[b],n,r,m,b,p,h)}p.length=p.length-1}}else e!==t&&("number"===x&&isNaN(e)&&isNaN(t)||n.push(new o(m,e,t)))}function p(e,t,n,r,o){var i=[];if(d(e,t,i,r,null,null,null,o),n)for(var a=0;a<i.length;++a)n(i[a]);return i}function h(e,t,n,r){var o=p(e,t,r?function(e){e&&r.push(e)}:void 0,n);return r||(o.length?o:void 0)}function m(e,t,n){if(n.path&&n.path.length){var r,o=e[t],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":m(o[n.path[r]],n.index,n.item);break;case"D":delete o[n.path[r]];break;case"E":case"N":o[n.path[r]]=n.rhs}}else switch(n.kind){case"A":m(e[t],n.index,n.item);break;case"D":e=s(e,t);break;case"E":case"N":e[t]=n.rhs}return e}function v(e,n,r){if(void 0===r&&n&&~t.indexOf(n.kind)&&(r=n),e&&r&&r.kind){for(var o=e,i=-1,a=r.path?r.path.length-1:0;++i<a;)void 0===o[r.path[i]]&&(o[r.path[i]]=void 0!==r.path[i+1]&&"number"==typeof r.path[i+1]?[]:{}),o=o[r.path[i]];switch(r.kind){case"A":r.path&&void 0===o[r.path[i]]&&(o[r.path[i]]=[]),m(r.path?o[r.path[i]]:o,r.index,r.item);break;case"D":delete o[r.path[i]];break;case"E":case"N":o[r.path[i]]=r.rhs}}}function g(e,t,n){if(n.path&&n.path.length){var r,o=e[t],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":g(o[n.path[r]],n.index,n.item);break;case"D":case"E":o[n.path[r]]=n.lhs;break;case"N":delete o[n.path[r]]}}else switch(n.kind){case"A":g(e[t],n.index,n.item);break;case"D":case"E":e[t]=n.lhs;break;case"N":e=s(e,t)}return e}return n(o,r),n(i,r),n(a,r),n(l,r),Object.defineProperties(h,{diff:{value:h,enumerable:!0},orderIndependentDiff:{value:function(e,t,n,r){var o=p(e,t,r?function(e){e&&r.push(e)}:void 0,n,!0);return r||(o.length?o:void 0)},enumerable:!0},observableDiff:{value:p,enumerable:!0},orderIndependentObservableDiff:{value:function(e,t,n,r,o,i,a){return d(e,t,n,r,o,i,a,!0)},enumerable:!0},orderIndepHash:{value:f,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&p(e,t,(function(r){n&&!n(e,t,r)||v(e,t,r)}))},enumerable:!0},applyChange:{value:v,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":g(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return"undefined"!=typeof $conflict},enumerable:!0}}),h.DeepDiff=h,e&&(e.DeepDiff=h),h}(this),void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)},996:e=>{"use strict";var t=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(e,t){return!1!==t.clone&&t.isMergeableObject(e)?l((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function o(e,t,n){return e.concat(t).map((function(e){return r(e,n)}))}function i(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function a(e,t){try{return t in e}catch(e){return!1}}function l(e,n,s){(s=s||{}).arrayMerge=s.arrayMerge||o,s.isMergeableObject=s.isMergeableObject||t,s.cloneUnlessOtherwiseSpecified=r;var u=Array.isArray(n);return u===Array.isArray(e)?u?s.arrayMerge(e,n,s):function(e,t,n){var o={};return n.isMergeableObject(e)&&i(e).forEach((function(t){o[t]=r(e[t],n)})),i(t).forEach((function(i){(function(e,t){return a(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,i)||(a(e,i)&&n.isMergeableObject(t[i])?o[i]=function(e,t){if(!t.customMerge)return l;var n=t.customMerge(e);return"function"==typeof n?n:l}(i,n)(e[i],t[i],n):o[i]=r(t[i],n))})),o}(e,n,s):r(n,s)}l.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return l(e,n,t)}),{})};var s=l;e.exports=s},875:(e,t,n)=>{var r;!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return i}.call(t,n,t,e))||(e.exports=r)}()},63:e=>{"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,o,i;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(o=r;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(i=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=r;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,i[o]))return!1;for(o=r;0!=o--;){var a=i[o];if(!e(t[a],n[a]))return!1}return!0}return t!=t&&n!=n}},245:e=>{e.exports=function(e){!function(e){if(!e)throw new Error("Eventify cannot use falsy object as events subject");for(var t=["on","fire","off"],n=0;n<t.length;++n)if(e.hasOwnProperty(t[n]))throw new Error("Subject cannot be eventified, since it already has property '"+t[n]+"'")}(e);var t=function(e){var t=Object.create(null);return{on:function(n,r,o){if("function"!=typeof r)throw new Error("callback is expected to be a function");var i=t[n];return i||(i=t[n]=[]),i.push({callback:r,ctx:o}),e},off:function(n,r){if(void 0===n)return t=Object.create(null),e;if(t[n])if("function"!=typeof r)delete t[n];else for(var o=t[n],i=0;i<o.length;++i)o[i].callback===r&&o.splice(i,1);return e},fire:function(n){var r,o=t[n];if(!o)return e;arguments.length>1&&(r=Array.prototype.splice.call(arguments,1));for(var i=0;i<o.length;++i){var a=o[i];a.callback.apply(a.ctx,r)}return e}}}(e);return e.on=t.on,e.off=t.off,e.fire=t.fire,e}},736:(e,t,n)=>{e.exports=function(e){if("uniqueLinkId"in(e=e||{})&&(console.warn("ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\nUse `multigraph` option instead\n","\n","Note: there is also change in default behavior: From now on each graph\nis considered to be not a multigraph by default (each edge is unique)."),e.multigraph=e.uniqueLinkId),void 0===e.multigraph&&(e.multigraph=!1),"function"!=typeof Map)throw new Error("ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph");var t,n=new Map,s=new Map,u={},c=0,f=e.multigraph?function(e,t,n){var r=l(e,t),o=u.hasOwnProperty(r);if(o||S(e,t)){o||(u[r]=0);var i="@"+ ++u[r];r=l(e+i,t+i)}return new a(e,t,n,r)}:function(e,t,n){var r=l(e,t),o=s.get(r);return o?(o.data=n,o):new a(e,t,n,r)},d=[],p=O,h=O,m=O,v=O,g={version:20,addNode:w,addLink:function(e,t,n){m();var r=x(e)||w(e),o=x(t)||w(t),a=f(e,t,n),l=s.has(a.id);return s.set(a.id,a),i(r,a),e!==t&&i(o,a),p(a,l?"update":"add"),v(),a},removeLink:function(e,t){return void 0!==t&&(e=S(e,t)),C(e)},removeNode:E,getNode:x,getNodeCount:A,getLinkCount:k,getEdgeCount:k,getLinksCount:k,getNodesCount:A,getLinks:function(e){var t=x(e);return t?t.links:null},forEachNode:L,forEachLinkedNode:function(e,t,r){var o=x(e);if(o&&o.links&&"function"==typeof t)return r?function(e,t,r){for(var o=e.values(),i=o.next();!i.done;){var a=i.value;if(a.fromId===t&&r(n.get(a.toId),a))return!0;i=o.next()}}(o.links,e,t):function(e,t,r){for(var o=e.values(),i=o.next();!i.done;){var a=i.value,l=a.fromId===t?a.toId:a.fromId;if(r(n.get(l),a))return!0;i=o.next()}}(o.links,e,t)},forEachLink:function(e){if("function"==typeof e)for(var t=s.values(),n=t.next();!n.done;){if(e(n.value))return!0;n=t.next()}},beginUpdate:m,endUpdate:v,clear:function(){m(),L((function(e){E(e.id)})),v()},hasLink:S,hasNode:x,getLink:S};return r(g),t=g.on,g.on=function(){return g.beginUpdate=m=P,g.endUpdate=v=T,p=y,h=b,g.on=t,t.apply(g,arguments)},g;function y(e,t){d.push({link:e,changeType:t})}function b(e,t){d.push({node:e,changeType:t})}function w(e,t){if(void 0===e)throw new Error("Invalid node identifier");m();var r=x(e);return r?(r.data=t,h(r,"update")):(r=new o(e,t),h(r,"add")),n.set(e,r),v(),r}function x(e){return n.get(e)}function E(e){var t=x(e);if(!t)return!1;m();var r=t.links;return r&&(r.forEach(C),t.links=null),n.delete(e),h(t,"remove"),v(),!0}function A(){return n.size}function k(){return s.size}function C(e){if(!e)return!1;if(!s.get(e.id))return!1;m(),s.delete(e.id);var t=x(e.fromId),n=x(e.toId);return t&&t.links.delete(e),n&&n.links.delete(e),p(e,"remove"),v(),!0}function S(e,t){if(void 0!==e&&void 0!==t)return s.get(l(e,t))}function O(){}function P(){c+=1}function T(){0==(c-=1)&&d.length>0&&(g.fire("changed",d),d.length=0)}function L(e){if("function"!=typeof e)throw new Error("Function is expected to iterate over graph nodes. You passed "+e);for(var t=n.values(),r=t.next();!r.done;){if(e(r.value))return!0;r=t.next()}}};var r=n(245);function o(e,t){this.id=e,this.links=null,this.data=t}function i(e,t){e.links?e.links.add(t):e.links=new Set([t])}function a(e,t,n,r){this.fromId=e,this.toId=t,this.data=n,this.id=r}function l(e,t){return e.toString()+"👉 "+t.toString()}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,s=o(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(s[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(s[l[f]]=a[l[f]])}}return s}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},582:function(e){e.exports=function(){"use strict";function e(e,r,o,i,a){!function e(n,r,o,i,a){for(;i>o;){if(i-o>600){var l=i-o+1,s=r-o+1,u=Math.log(l),c=.5*Math.exp(2*u/3),f=.5*Math.sqrt(u*c*(l-c)/l)*(s-l/2<0?-1:1);e(n,r,Math.max(o,Math.floor(r-s*c/l+f)),Math.min(i,Math.floor(r+(l-s)*c/l+f)),a)}var d=n[r],p=o,h=i;for(t(n,o,r),a(n[i],d)>0&&t(n,o,i);p<h;){for(t(n,p,h),p++,h--;a(n[p],d)<0;)p++;for(;a(n[h],d)>0;)h--}0===a(n[o],d)?t(n,o,h):t(n,++h,i),h<=r&&(o=h+1),r<=h&&(i=h-1)}}(e,r,o||0,i||e.length-1,a||n)}function t(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function n(e,t){return e<t?-1:e>t?1:0}var r=function(e){void 0===e&&(e=9),this._maxEntries=Math.max(4,e),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function o(e,t,n){if(!n)return t.indexOf(e);for(var r=0;r<t.length;r++)if(n(e,t[r]))return r;return-1}function i(e,t){a(e,0,e.children.length,t,e)}function a(e,t,n,r,o){o||(o=h(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var i=t;i<n;i++){var a=e.children[i];l(o,e.leaf?r(a):a)}return o}function l(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function s(e,t){return e.minX-t.minX}function u(e,t){return e.minY-t.minY}function c(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function f(e){return e.maxX-e.minX+(e.maxY-e.minY)}function d(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function p(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function h(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function m(t,n,r,o,i){for(var a=[n,r];a.length;)if(!((r=a.pop())-(n=a.pop())<=o)){var l=n+Math.ceil((r-n)/o/2)*o;e(t,l,n,r,i),a.push(n,l,l,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(e){var t=this.data,n=[];if(!p(e,t))return n;for(var r=this.toBBox,o=[];t;){for(var i=0;i<t.children.length;i++){var a=t.children[i],l=t.leaf?r(a):a;p(e,l)&&(t.leaf?n.push(a):d(e,l)?this._all(a,n):o.push(a))}t=o.pop()}return n},r.prototype.collides=function(e){var t=this.data;if(!p(e,t))return!1;for(var n=[];t;){for(var r=0;r<t.children.length;r++){var o=t.children[r],i=t.leaf?this.toBBox(o):o;if(p(e,i)){if(t.leaf||d(e,i))return!0;n.push(o)}}t=n.pop()}return!1},r.prototype.load=function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0;t<e.length;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(e){return e&&this._insert(e,this.data.height-1),this},r.prototype.clear=function(){return this.data=h([]),this},r.prototype.remove=function(e,t){if(!e)return this;for(var n,r,i,a=this.data,l=this.toBBox(e),s=[],u=[];a||s.length;){if(a||(a=s.pop(),r=s[s.length-1],n=u.pop(),i=!0),a.leaf){var c=o(e,a.children,t);if(-1!==c)return a.children.splice(c,1),s.push(a),this._condense(s),this}i||a.leaf||!d(a,l)?r?(n++,a=r.children[n],i=!1):a=null:(s.push(a),u.push(n),n=0,r=a,a=a.children[0])}return this},r.prototype.toBBox=function(e){return e},r.prototype.compareMinX=function(e,t){return e.minX-t.minX},r.prototype.compareMinY=function(e,t){return e.minY-t.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(e){return this.data=e,this},r.prototype._all=function(e,t){for(var n=[];e;)e.leaf?t.push.apply(t,e.children):n.push.apply(n,e.children),e=n.pop();return t},r.prototype._build=function(e,t,n,r){var o,a=n-t+1,l=this._maxEntries;if(a<=l)return i(o=h(e.slice(t,n+1)),this.toBBox),o;r||(r=Math.ceil(Math.log(a)/Math.log(l)),l=Math.ceil(a/Math.pow(l,r-1))),(o=h([])).leaf=!1,o.height=r;var s=Math.ceil(a/l),u=s*Math.ceil(Math.sqrt(l));m(e,t,n,u,this.compareMinX);for(var c=t;c<=n;c+=u){var f=Math.min(c+u-1,n);m(e,c,f,s,this.compareMinY);for(var d=c;d<=f;d+=s){var p=Math.min(d+s-1,f);o.children.push(this._build(e,d,p,r-1))}}return i(o,this.toBBox),o},r.prototype._chooseSubtree=function(e,t,n,r){for(;r.push(t),!t.leaf&&r.length-1!==n;){for(var o=1/0,i=1/0,a=void 0,l=0;l<t.children.length;l++){var s=t.children[l],u=c(s),f=(d=e,p=s,(Math.max(p.maxX,d.maxX)-Math.min(p.minX,d.minX))*(Math.max(p.maxY,d.maxY)-Math.min(p.minY,d.minY))-u);f<i?(i=f,o=u<o?u:o,a=s):f===i&&u<o&&(o=u,a=s)}t=a||t.children[0]}var d,p;return t},r.prototype._insert=function(e,t,n){var r=n?e:this.toBBox(e),o=[],i=this._chooseSubtree(r,this.data,t,o);for(i.children.push(e),l(i,r);t>=0&&o[t].children.length>this._maxEntries;)this._split(o,t),t--;this._adjustParentBBoxes(r,o,t)},r.prototype._split=function(e,t){var n=e[t],r=n.children.length,o=this._minEntries;this._chooseSplitAxis(n,o,r);var a=this._chooseSplitIndex(n,o,r),l=h(n.children.splice(a,n.children.length-a));l.height=n.height,l.leaf=n.leaf,i(n,this.toBBox),i(l,this.toBBox),t?e[t-1].children.push(l):this._splitRoot(n,l)},r.prototype._splitRoot=function(e,t){this.data=h([e,t]),this.data.height=e.height+1,this.data.leaf=!1,i(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(e,t,n){for(var r,o,i,l,s,u,f,d=1/0,p=1/0,h=t;h<=n-t;h++){var m=a(e,0,h,this.toBBox),v=a(e,h,n,this.toBBox),g=(o=m,i=v,void 0,void 0,void 0,void 0,l=Math.max(o.minX,i.minX),s=Math.max(o.minY,i.minY),u=Math.min(o.maxX,i.maxX),f=Math.min(o.maxY,i.maxY),Math.max(0,u-l)*Math.max(0,f-s)),y=c(m)+c(v);g<d?(d=g,r=h,p=y<p?y:p):g===d&&y<p&&(p=y,r=h)}return r||n-t},r.prototype._chooseSplitAxis=function(e,t,n){var r=e.leaf?this.compareMinX:s,o=e.leaf?this.compareMinY:u;this._allDistMargin(e,t,n,r)<this._allDistMargin(e,t,n,o)&&e.children.sort(r)},r.prototype._allDistMargin=function(e,t,n,r){e.children.sort(r);for(var o=this.toBBox,i=a(e,0,t,o),s=a(e,n-t,n,o),u=f(i)+f(s),c=t;c<n-t;c++){var d=e.children[c];l(i,e.leaf?o(d):d),u+=f(i)}for(var p=n-t-1;p>=t;p--){var h=e.children[p];l(s,e.leaf?o(h):h),u+=f(s)}return u},r.prototype._adjustParentBBoxes=function(e,t,n){for(var r=n;r>=0;r--)l(t[r],e)},r.prototype._condense=function(e){for(var t=e.length-1,n=void 0;t>=0;t--)0===e[t].children.length?t>0?(n=e[t-1].children).splice(n.indexOf(e[t]),1):this.clear():i(e[t],this.toBBox)},r}()},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,A=60106,k=60107,C=60108,S=60114,O=60109,P=60110,T=60112,L=60113,_=60120,M=60115,N=60116,R=60121,j=60128,I=60129,D=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),A=F("react.portal"),k=F("react.fragment"),C=F("react.strict_mode"),S=F("react.profiler"),O=F("react.provider"),P=F("react.context"),T=F("react.forward_ref"),L=F("react.suspense"),_=F("react.suspense_list"),M=F("react.memo"),N=F("react.lazy"),R=F("react.block"),F("react.scope"),j=F("react.opaque.id"),I=F("react.debug_trace_mode"),D=F("react.offscreen"),z=F("react.legacy_hidden")}var B,V="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function W(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function Y(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case A:return"Portal";case S:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return q(e.type);case R:return q(e._render);case N:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ue(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ae(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Oe=null,Pe=null;function Te(e){if(e=no(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Se(e.stateNode,e.type,t))}}function Le(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function _e(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Me(e,t){return e(t)}function Ne(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var je=Me,Ie=!1,De=!1;function ze(){null===Oe&&null===Pe||(Re(),_e())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(me){Be=!1}function Ue(e,t,n,r,o,i,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var We=!1,He=null,$e=!1,Ye=null,qe={onError:function(e){We=!0,He=e}};function Ge(e,t,n,r,o,i,a,l,s){We=!1,He=null,Ue.apply(qe,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(Xe(e)!==e)throw Error(a(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ke(o),e;if(i===r)return Ke(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,st=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==lt&&gt(lt)&&(lt=null),null!==st&&gt(st)&&(st=null),ut.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function xt(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==lt&&wt(lt,e),null!==st&&wt(st,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var At={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},kt={},Ct={};function St(e){if(kt[e])return kt[e];if(!At[e])return e;var t,n=At[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return kt[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete At.animationend.animation,delete At.animationiteration.animation,delete At.animationstart.animation),"TransitionEvent"in window||delete At.transitionend.transition);var Ot=St("animationend"),Pt=St("animationiteration"),Tt=St("animationstart"),Lt=St("transitionend"),_t=new Map,Mt=new Map,Nt=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Mt.set(r,t),_t.set(r,o),u(o,[r])}}(0,i.unstable_now)();var jt=8;function It(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!=(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!=(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!=(t=4186112&e)?(jt=6,t):0!=(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!=(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=jt=15;else if(0!=(i=134217727&n)){var s=i&~a;0!==s?(r=It(s),o=jt):0!=(l&=i)&&(r=It(l),o=jt)}else 0!=(i=n&~a)?(r=It(i),o=jt):0!==l&&(r=It(l),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(It(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Bt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2,Yt=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Gt=!0;function Xt(e,t,n,r){Ie||Re();var o=Kt,i=Ie;Ie=!0;try{Ne(o,e,t,n,r)}finally{(Ie=i)||ze()}}function Qt(e,t,n,r){qt(Yt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Zt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return st=mt(st,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ut.set(i,mt(ut.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Rr(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Ce(r);if(null!==(o=to(o))){var i=Xe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),vn=ln(mn),gn=ln(o({},mn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),xn=ln(wn),En=ln(o({},fn,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function On(){return Sn}var Pn=o({},pn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=ln(Pn),Ln=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Mn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=ln(Nn),jn=[9,13,27,32],In=f&&"CompositionEvent"in window,Dn=null;f&&"documentMode"in document&&(Dn=document.documentMode);var zn=f&&"TextEvent"in window&&!Dn,Fn=f&&(!In||Dn&&8<Dn&&11>=Dn),Bn=String.fromCharCode(32),Vn=!1;function Un(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function qn(e,t,n,r){Le(r),0<(t=Ir(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Xn=null;function Qn(e){Pr(e,0)}function Kn(e){if(K(ro(e)))return e}function Zn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Gn&&(Gn.detachEvent("onpropertychange",or),Xn=Gn=null)}function or(e){if("value"===e.propertyName&&Kn(Xn)){var t=[];if(qn(t,Xn,e,Ce(e)),e=Qn,Ie)e(t);else{Ie=!0;try{Me(e,t)}finally{Ie=!1,ze()}}}}function ir(e,t,n){"focusin"===e?(rr(),Xn=n,(Gn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Xn)}function lr(e,t){if("click"===e)return Kn(t)}function sr(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,wr=null,xr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xr||null==yr||yr!==Z(r)||(r="selectionStart"in(r=yr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Ir(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Nt,2);for(var Ar="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<Ar.length;kr++)Mt.set(Ar[kr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Cr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,s,u){if(Ge.apply(this,arguments),We){if(!We)throw Error(a(198));var c=He;We=!1,He=null,$e||($e=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&o.isPropagationStopped())break e;Or(o,l,u),i=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,u=l.currentTarget,l=l.listener,s!==i&&o.isPropagationStopped())break e;Or(o,l,u),i=s}}}if($e)throw e=Ye,$e=!1,Ye=null,e}function Tr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Nr(t,e,2,!1),n.add(r))}var Lr="_reactListening"+Math.random().toString(36).slice(2);function _r(e){e[Lr]||(e[Lr]=!0,l.forEach((function(t){Sr.has(t)||Mr(t,!1,e,null),Mr(t,!0,e,null)})))}function Mr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Nr(i,e,o,t),a.add(l))}function Nr(e,t,n,r){var o=Mt.get(t);switch(void 0===o?2:o){case 0:o=Xt;break;case 1:o=Qt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=to(l)))return;if(5===(s=a.tag)||6===s){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{je(e,t,n)}finally{De=!1,ze()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=_t.get(e);if(void 0!==l){var s=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Tn;break;case"focusin":u="focus",s=yn;break;case"focusout":u="blur",s=yn;break;case"beforeblur":case"afterblur":s=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=_n;break;case Ot:case Pt:case Tt:s=bn;break;case Lt:s=Mn;break;case"scroll":s=hn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Ln}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Fe(h,d))&&c.push(jr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Jr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(f=Xe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Ln,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?l:ro(s),p=null==u?l:ro(u),(l=new c(m,h+"leave",s,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",u,n,o)).target=p,c.relatedTarget=f,m=c),f=m,s&&u)e:{for(d=u,h=0,p=c=s;p;p=Dr(p))h++;for(p=0,m=d;m;m=Dr(m))p++;for(;0<h-p;)c=Dr(c),h--;for(;0<p-h;)d=Dr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Dr(c),d=Dr(d)}c=null}else c=null;null!==s&&zr(a,l,s,c,!1),null!==u&&null!==f&&zr(a,f,u,c,!0)}if("select"===(s=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var v=Zn;else if(Yn(l))if(Jn)v=sr;else{v=ar;var g=ir}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=lr);switch(v&&(v=v(e,r))?qn(a,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?ro(r):window,e){case"focusin":(Yn(g)||"true"===g.contentEditable)&&(yr=g,br=r,wr=null);break;case"focusout":wr=br=yr=null;break;case"mousedown":xr=!0;break;case"contextmenu":case"mouseup":case"dragend":xr=!1,Er(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":Er(a,n,o)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Hn=!0)),0<(g=Ir(r,b)).length&&(b=new En(b,e,null,n,o),a.push({event:b,listeners:g}),(y||null!==(y=Wn(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Vn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Vn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!In&&Un(e,t)?(e=nn(),tn=en=Jt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Pr(a,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Fe(e,n))&&r.unshift(jr(e,i,o)),null!=(i=Fe(e,t))&&r.push(jr(e,i,o))),e=e.return}return r}function Dr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Fe(n,i))&&a.unshift(jr(n,s,l)):o||null!=(s=Fe(n,i))&&a.push(jr(n,s,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Fr(){}var Br=null,Vr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Wr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Xr=0,Qr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Qr,Zr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Kr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Zr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],lo=-1;function so(e){return{current:e}}function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function co(e,t){lo++,ao[lo]=e.current,e.current=t}var fo={},po=so(fo),ho=so(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return null!=e.childContextTypes}function yo(){uo(ho),uo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(a(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return o({},n,r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(po),co(po,e)):uo(ho),co(ho,n)}var Ao=null,ko=null,Co=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Oo=i.unstable_cancelCallback,Po=i.unstable_shouldYield,To=i.unstable_requestPaint,Lo=i.unstable_now,_o=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,No=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,jo=i.unstable_LowPriority,Io=i.unstable_IdlePriority,Do={},zo=void 0!==To?To:function(){},Fo=null,Bo=null,Vo=!1,Uo=Lo(),Wo=1e4>Uo?Lo:function(){return Lo()-Uo};function Ho(){switch(_o()){case Mo:return 99;case No:return 98;case Ro:return 97;case jo:return 96;case Io:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return Mo;case 98:return No;case 97:return Ro;case 96:return jo;case 95:return Io;default:throw Error(a(332))}}function Yo(e,t){return e=$o(e),Co(e,t)}function qo(e,t,n){return e=$o(e),So(e,t,n)}function Go(){if(null!==Bo){var e=Bo;Bo=null,Oo(e)}Xo()}function Xo(){if(!Vo&&null!==Fo){Vo=!0;var e=0;try{var t=Fo;Yo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fo=null}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),So(Mo,Go),t}finally{Vo=!1}}}var Qo=x.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Zo=so(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Zo.current;uo(Zo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ia=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var li=!1;function si(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,r){var i=e.updateQueue;li=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?a=c:l.next=c,l=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==a){for(d=i.baseState,l=0,f=c=u=null;;){s=a.lane;var p=a.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,d,s):h))break e;d=o({},d,s);break e;case 2:li=!0}}null!==a.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[a]:s.push(a))}else p={eventTime:p,lane:s,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,l|=s;if(null===(a=a.next)){if(null===(s=i.shared.pending))break;a=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===f&&(u=d),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=f,zl|=l,e.lanes=l,e.memoizedState=d}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),fi(e,i),fs(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),fi(e,i),fs(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=us(),r=cs(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),fi(e,o),fs(e,r,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,i))}function bi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=go(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,si(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=go(t)?mo:po.current,o.context=vo(e,i)),pi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&gi.enqueueReplaceState(o,o.state,null),pi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ei=Array.isArray;function Ai(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ci(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ws(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=qs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ai(e,t,n),r.return=e,r):((r=Hs(n.type,n.key,n.props,null,e.mode,r)).ref=Ai(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=$s(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Hs(t.type,t.key,t.props,null,e.mode,n)).ref=Ai(e,null,t),n.return=e,n;case A:return(t=Gs(t,e.mode,n)).return=e,t}if(Ei(t)||U(t))return(t=$s(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===k?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case A:return n.key===o?c(e,t,n,r):null}if(Ei(n)||U(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===k?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case A:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ei(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function m(o,a,l,s){for(var u=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],s);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),u;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],s))&&(a=i(f,a,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,l,s,u){var c=U(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,g=null,y=s.next();null!==m&&!y.done;v++,y=s.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=s.next())null!==(y=d(o,y.value,u))&&(l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=s.next())null!==(y=h(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===k&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case E:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(i.type===k){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}}else if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=Ai(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===k?((r=$s(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Hs(i.type,i.key,i.props,null,e.mode,s)).ref=Ai(e,r,i),s.return=e,e=s)}return l(e);case A:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gs(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=qs(i,e.mode,s)).return=e,e=r),l(e);if(Ei(i))return m(e,r,i,s);if(U(i))return v(e,r,i,s);if(c&&ki(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var Si=Ci(!0),Oi=Ci(!1),Pi={},Ti=so(Pi),Li=so(Pi),_i=so(Pi);function Mi(e){if(e===Pi)throw Error(a(174));return e}function Ni(e,t){switch(co(_i,t),co(Li,e),co(Ti,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Ti),co(Ti,t)}function Ri(){uo(Ti),uo(Li),uo(_i)}function ji(e){Mi(_i.current);var t=Mi(Ti.current),n=pe(t,e.type);t!==n&&(co(Li,e),co(Ti,n))}function Ii(e){Li.current===e&&(uo(Ti),uo(Li))}var Di=so(0);function zi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Fi=null,Bi=null,Vi=!1;function Ui(e,t){var n=Vs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Wi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Hi(e){if(Vi){var t=Bi;if(t){var n=t;if(!Wi(e,t)){if(!(t=qr(n.nextSibling))||!Wi(e,t))return e.flags=-1025&e.flags|2,Vi=!1,void(Fi=e);Ui(Fi,n)}Fi=e,Bi=qr(t.firstChild)}else e.flags=-1025&e.flags|2,Vi=!1,Fi=e}}function $i(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fi=e}function Yi(e){if(e!==Fi)return!1;if(!Vi)return $i(e),Vi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Wr(t,e.memoizedProps))for(t=Bi;t;)Ui(e,t),t=qr(t.nextSibling);if($i(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Bi=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Bi=null}}else Bi=Fi?qr(e.stateNode.nextSibling):null;return!0}function qi(){Bi=Fi=null,Vi=!1}var Gi=[];function Xi(){for(var e=0;e<Gi.length;e++)Gi[e]._workInProgressVersionPrimary=null;Gi.length=0}var Qi=x.ReactCurrentDispatcher,Ki=x.ReactCurrentBatchConfig,Zi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Zi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Ma:Na,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Qi.current=Ra,e=n(r,o)}while(ra)}if(Qi.current=_a,t=null!==ea&&null!==ea.next,Zi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function la(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function sa(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=sa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=i=null,u=o;do{var c=u.lane;if((Zi&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,i=r):s=s.next=f,Ji.lanes|=c,zl|=c}u=u.next}while(null!==u&&u!==o);null===s?i=r:s.next=l,ur(r,t.memoizedState)||(Ia=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fa(e){var t=sa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ur(i,t.memoizedState)||(Ia=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function da(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Zi&e)===e)&&(t._workInProgressVersionPrimary=r,Gi.push(t))),e)return n(t._source);throw Gi.push(t),Error(a(350))}function pa(e,t,n,r){var o=Ll;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),s=Qi.current,u=s.useState((function(){return da(o,t,n)})),c=u[1],f=u[0];u=ta;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ji;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ur(l,e)){e=n(t._source),ur(f,e)||(c(e),e=cs(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var s=31-Wt(a),u=1<<s;r[s]|=e,a&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cs(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:f}).dispatch=c=La.bind(null,Ji,e),u.queue=e,u.baseQueue=null,f=da(o,t,n),u.memoizedState=u.baseState=f),f}function ha(e,t,n){return pa(sa(),e,t,n)}function ma(e){var t=la();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=La.bind(null,Ji,e),[t.memoizedState,e]}function va(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ga(e){return e={current:e},la().memoizedState=e}function ya(){return sa().memoizedState}function ba(e,t,n,r){var o=la();Ji.flags|=e,o.memoizedState=va(1|t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=sa();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void va(t,n,i,r)}Ji.flags|=e,o.memoizedState=va(1|t,n,i,r)}function xa(e,t){return ba(516,4,e,t)}function Ea(e,t){return wa(516,4,e,t)}function Aa(e,t){return wa(4,2,e,t)}function ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,ka.bind(null,t,e),n)}function Sa(){}function Oa(e,t){var n=sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pa(e,t){var n=sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=Ho();Yo(98>n?98:n,(function(){e(!0)})),Yo(97<n?97:n,(function(){var n=Ki.transition;Ki.transition=1;try{e(!1),t()}finally{Ki.transition=n}}))}function La(e,t,n){var r=us(),o=cs(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=a(l,n);if(i.eagerReducer=a,i.eagerState=s,ur(s,l))return}catch(e){}fs(e,o,r)}}var _a={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Ma={readContext:ai,useCallback:function(e,t){return la().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:xa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=la();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=la();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=La.bind(null,Ji,e),[r.memoizedState,e]},useRef:ga,useState:ma,useDebugValue:Sa,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return xa((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ga(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=la();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(r,e,t,n)},useOpaqueIdentifier:function(){if(Vi){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Xr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,va(5,(function(){n("r:"+(Xr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Xr++).toString(36)),t},unstable_isNewReconciler:!1},Na={readContext:ai,useCallback:Oa,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:Aa,useMemo:Pa,useReducer:ca,useRef:ya,useState:function(){return ca(ua)},useDebugValue:Sa,useDeferredValue:function(e){var t=ca(ua),n=t[0],r=t[1];return Ea((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ca(ua)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ra={readContext:ai,useCallback:Oa,useContext:ai,useEffect:Ea,useImperativeHandle:Ca,useLayoutEffect:Aa,useMemo:Pa,useReducer:fa,useRef:ya,useState:function(){return fa(ua)},useDebugValue:Sa,useDeferredValue:function(e){var t=fa(ua),n=t[0],r=t[1];return Ea((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=fa(ua)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return fa(ua)[0]},unstable_isNewReconciler:!1},ja=x.ReactCurrentOwner,Ia=!1;function Da(e,t,n,r){t.child=null===e?Oi(t,null,n,r):Si(t,e.child,n,r)}function za(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,Da(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Fa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Us(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hs(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ba(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,i):(t.flags|=1,(e=Ws(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ba(e,t,n,r,o,i){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Ia=!1,0==(i&o))return t.lanes=e.lanes,nl(e,t,i);0!=(16384&e.flags)&&(Ia=!0)}return Wa(e,t,n,r,i)}function Va(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bs(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bs(0,e),null;t.memoizedState={baseLanes:0},bs(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bs(0,r);return Da(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Wa(e,t,n,r,o){var i=go(n)?mo:po.current;return i=vo(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,Da(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ha(e,t,n,r,o){if(go(n)){var i=!0;xo(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ai(u):vo(t,u=go(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&wi(t,a,r,u),li=!1;var d=t.memoizedState;a.state=d,pi(t,r,a,o),s=t.memoizedState,l!==r||d!==s||ho.current||li?("function"==typeof c&&(vi(t,n,c,r),s=t.memoizedState),(l=li||yi(t,n,l,r,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ui(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ko(t.type,l),a.props=u,f=t.pendingProps,d=a.context,s="object"==typeof(s=n.contextType)&&null!==s?ai(s):vo(t,s=go(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==s)&&wi(t,a,r,s),li=!1,d=t.memoizedState,a.state=d,pi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||ho.current||li?("function"==typeof p&&(vi(t,n,p,r),h=t.memoizedState),(u=li||yi(t,n,u,r,d,h,s))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return $a(e,t,n,r,i,o)}function $a(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&Eo(t,n,!1),nl(e,t,i);r=t.stateNode,ja.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):Da(e,t,l,i),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Ya(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ni(e,t.containerInfo)}var qa,Ga,Xa,Qa={dehydrated:null,retryLane:0};function Ka(e,t,n){var r,o=t.pendingProps,i=Di.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Di,1&i),null===e?(void 0!==o.fallback&&Hi(t),e=o.children,i=o.fallback,a?(e=Za(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Za(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,t.lanes=33554432,e):((n=Ys({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ws(a,l),null!==e?r=Ws(e,r):(r=$s(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Qa,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Ws(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Za(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Ys(t,o,0,null),n=$s(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function el(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Da(e,t,r.children,n),0!=(2&(r=Di.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Di,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===zi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===zi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,i,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ws(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ws(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Vi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Ri(),uo(ho),uo(po),Xi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Yi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ii(t);var i=Mi(_i.current);if(n=t.type,null!==e&&null!=t.stateNode)Ga(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Mi(Ti.current),Yi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Kr]=t,r[Zr]=l,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<Cr.length;e++)Tr(Cr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,l),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Tr("invalid",r);break;case"textarea":se(r,l),Tr("invalid",r)}for(var u in Ae(n,l),e=null,l)l.hasOwnProperty(u)&&(i=l[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Tr("scroll",r));switch(n){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Fr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Kr]=t,e[Zr]=r,qa(e,t),t.stateNode=e,u=ke(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),i=r;break;case"iframe":case"object":case"embed":Tr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Cr.length;i++)Tr(Cr[i],e);i=r;break;case"source":Tr("error",e),i=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),i=r;break;case"details":Tr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Tr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":se(e,r),i=le(e,r),Tr("invalid",e);break;default:i=r}Ae(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?xe(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Tr("scroll",e):null!=f&&w(e,l,f,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Fr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Xa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Mi(_i.current),Mi(Ti.current),Yi(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return uo(Di),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Yi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Di.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Ll||0==(134217727&zl)&&0==(134217727&Fl)||ms(Ll,Ml))),(r||n)&&(t.flags|=4),null);case 4:return Ri(),null===e&&_r(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(uo(Di),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)rl(r,!1);else{if(0!==jl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=zi(e))){for(t.flags|=64,rl(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Di,1&Di.current|2),t.child}e=e.sibling}null!==r.tail&&Wo()>Wl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=zi(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Vi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=Di.current,co(Di,l?1&t|2:1&t),n):null;case 23:case 24:return ws(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function il(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ri(),uo(ho),uo(po),Xi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ii(e),null;case 13:return uo(Di),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(Di),null;case 4:return Ri(),null;case 10:return ri(e),null;case 23:case 24:return ws(),null;default:return null}}function al(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ga=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Mi(Ti.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Fr)}for(f in Ae(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var u=i[f];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Tr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Xa=function(e,t,n,r){n!==r&&(t.flags|=4)};var sl="function"==typeof WeakMap?WeakMap:Map;function ul(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ql||(ql=!0,Gl=r),ll(0,t)},n}function cl(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xl?Xl=new Set([this]):Xl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ds(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Yr(t.stateNode.containerInfo))}throw Error(a(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rs(n,e),Ns(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))))}throw Error(a(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vl(e,t){if(ko&&"function"==typeof ko.onCommitFiberUnmount)try{ko.onCommitFiberUnmount(Ao,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rs(t,n);else{r=t;try{o()}catch(e){Ds(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ds(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function gl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):xl(e,n,t)}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Fr));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function xl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(xl(e,t,n),e=e.sibling;null!==e;)xl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(vl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function Al(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Zr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),ke(e,o),t=ke(e,r),o=0;o<i.length;o+=2){var l=i[o],s=i[o+1];"style"===l?xe(n,s):"dangerouslySetInnerHTML"===l?ve(n,s):"children"===l?ge(n,s):w(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=Wo(),ml(t.child,!0)),void kl(t);case 19:return void kl(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(a(163))}function kl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Fs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Sl=Math.ceil,Ol=x.ReactCurrentDispatcher,Pl=x.ReactCurrentOwner,Tl=0,Ll=null,_l=null,Ml=0,Nl=0,Rl=so(0),jl=0,Il=null,Dl=0,zl=0,Fl=0,Bl=0,Vl=null,Ul=0,Wl=1/0;function Hl(){Wl=Wo()+500}var $l,Yl=null,ql=!1,Gl=null,Xl=null,Ql=!1,Kl=null,Zl=90,Jl=[],es=[],ts=null,ns=0,rs=null,os=-1,is=0,as=0,ls=null,ss=!1;function us(){return 0!=(48&Tl)?Wo():-1!==os?os:os=Wo()}function cs(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ho()?1:2;if(0===is&&(is=Dl),0!==Qo.transition){0!==as&&(as=null!==Vl?Vl.pendingLanes:0),e=is;var t=4186112&~as;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ho(),e=Ft(0!=(4&Tl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),is)}function fs(e,t,n){if(50<ns)throw ns=0,rs=null,Error(a(185));if(null===(e=ds(e,t)))return null;Ut(e,t,n),e===Ll&&(Fl|=t,4===jl&&ms(e,Ml));var r=Ho();1===t?0!=(8&Tl)&&0==(48&Tl)?vs(e):(ps(e,n),0===Tl&&(Hl(),Go())):(0==(4&Tl)||98!==r&&99!==r||(null===ts?ts=new Set([e]):ts.add(e)),ps(e,n)),Vl=e}function ds(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ps(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Wt(l),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,It(u);var f=jt;i[s]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Dt(e,e===Ll?Ml:0),t=jt,0===r)null!==n&&(n!==Do&&Oo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Do&&Oo(n)}15===t?(n=vs.bind(null,e),null===Fo?(Fo=[n],Bo=So(Mo,Xo)):Fo.push(n),n=Do):14===t?n=qo(99,vs.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=qo(n,hs.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hs(e){if(os=-1,as=is=0,0!=(48&Tl))throw Error(a(327));var t=e.callbackNode;if(Ms()&&e.callbackNode!==t)return null;var n=Dt(e,e===Ll?Ml:0);if(0===n)return null;var r=n,o=Tl;Tl|=16;var i=As();for(Ll===e&&Ml===r||(Hl(),xs(e,r));;)try{Ss();break}catch(t){Es(e,t)}if(ni(),Ol.current=i,Tl=o,null!==_l?r=0:(Ll=null,Ml=0,r=jl),0!=(Dl&Fl))xs(e,0);else if(0!==r){if(2===r&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(n=zt(e))&&(r=ks(e,n))),1===r)throw t=Il,xs(e,0),ms(e,n),ps(e,Wo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Ts(e);break;case 3:if(ms(e,n),(62914560&n)===n&&10<(r=Ul+500-Wo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){us(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Hr(Ts.bind(null,e),r);break}Ts(e);break;case 4:if(ms(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Wt(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Wo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Hr(Ts.bind(null,e),n);break}Ts(e);break;default:throw Error(a(329))}}return ps(e,Wo()),e.callbackNode===t?hs.bind(null,e):null}function ms(e,t){for(t&=~Bl,t&=~Fl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function vs(e){if(0!=(48&Tl))throw Error(a(327));if(Ms(),e===Ll&&0!=(e.expiredLanes&Ml)){var t=Ml,n=ks(e,t);0!=(Dl&Fl)&&(n=ks(e,t=Dt(e,t)))}else n=ks(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(t=zt(e))&&(n=ks(e,t))),1===n)throw n=Il,xs(e,0),ms(e,t),ps(e,Wo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ts(e),ps(e,Wo()),null}function gs(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Go())}}function ys(e,t){var n=Tl;Tl&=-2,Tl|=8;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Go())}}function bs(e,t){co(Rl,Nl),Nl|=t,Dl|=t}function ws(){Nl=Rl.current,uo(Rl)}function xs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==_l)for(n=_l.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Ri(),uo(ho),uo(po),Xi();break;case 5:Ii(r);break;case 4:Ri();break;case 13:case 19:uo(Di);break;case 10:ri(r);break;case 23:case 24:ws()}n=n.return}Ll=e,_l=Ws(e.current,null),Ml=Nl=Dl=t,jl=0,Il=null,Bl=Fl=zl=0}function Es(e,t){for(;;){var n=_l;try{if(ni(),Qi.current=_a,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Zi=0,ta=ea=Ji=null,ra=!1,Pl.current=null,null===n||null===n.return){jl=1,Il=t,_l=null;break}e:{var i=e,a=n.return,l=n,s=t;if(t=Ml,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Di.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(u),d.updateQueue=g}else v.add(u);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ci(-1,1);y.tag=2,fi(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new sl,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var w=zs.bind(null,i,u,l);u.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),s=al(s,l),d=a;do{switch(d.tag){case 3:i=s,d.flags|=4096,t&=-t,d.lanes|=t,di(d,ul(0,i,t));break e;case 1:i=s;var x=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof x.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Xl||!Xl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,di(d,cl(d,i,t));break e}}d=d.return}while(null!==d)}Ps(n)}catch(e){t=e,_l===n&&null!==n&&(_l=n=n.return);continue}break}}function As(){var e=Ol.current;return Ol.current=_a,null===e?_a:e}function ks(e,t){var n=Tl;Tl|=16;var r=As();for(Ll===e&&Ml===t||xs(e,t);;)try{Cs();break}catch(t){Es(e,t)}if(ni(),Tl=n,Ol.current=r,null!==_l)throw Error(a(261));return Ll=null,Ml=0,jl}function Cs(){for(;null!==_l;)Os(_l)}function Ss(){for(;null!==_l&&!Po();)Os(_l)}function Os(e){var t=$l(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===t?Ps(e):_l=t,Pl.current=null}function Ps(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Nl)))return void(_l=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Nl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=il(t)))return n.flags&=2047,void(_l=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(_l=t);_l=t=e}while(null!==t);0===jl&&(jl=5)}function Ts(e){var t=Ho();return Yo(99,Ls.bind(null,e,t)),null}function Ls(e,t){do{Ms()}while(null!==Kl);if(0!=(48&Tl))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-Wt(i),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,i&=~c}if(null!==ts&&0==(24&r)&&ts.has(e)&&ts.delete(e),e===Ll&&(_l=Ll=null,Ml=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Tl,Tl|=32,Pl.current=null,Br=Gt,vr(l=mr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==s||0!==i&&3!==v.nodeType||(d=f+i),v!==u||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===s&&++h===i&&(d=f),g===u&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Vr={focusedElem:l,selectionRange:s},Gt=!1,ls=null,ss=!1,Yl=r;do{try{_s()}catch(e){if(null===Yl)throw Error(a(330));Ds(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);ls=null,Yl=r;do{try{for(l=e;null!==Yl;){var b=Yl.flags;if(16&b&&ge(Yl.stateNode,""),128&b){var w=Yl.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:bl(Yl),Yl.flags&=-3;break;case 6:bl(Yl),Yl.flags&=-3,Al(Yl.alternate,Yl);break;case 1024:Yl.flags&=-1025;break;case 1028:Yl.flags&=-1025,Al(Yl.alternate,Yl);break;case 4:Al(Yl.alternate,Yl);break;case 8:El(l,s=Yl);var E=s.alternate;gl(s),null!==E&&gl(E)}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(a(330));Ds(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);if(x=Vr,w=mr(),b=x.focusedElem,l=x.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&vr(b)&&(w=l.start,void 0===(x=l.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),s=b.textContent.length,E=Math.min(l.start,s),l=void 0===l.end?E:Math.min(l.end,s),!x.extend&&E>l&&(s=l,l=E,E=s),s=pr(b,E),i=pr(b,l),s&&i&&(1!==x.rangeCount||x.anchorNode!==s.node||x.anchorOffset!==s.offset||x.focusNode!==i.node||x.focusOffset!==i.offset)&&((w=w.createRange()).setStart(s.node,s.offset),x.removeAllRanges(),E>l?(x.addRange(w),x.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Gt=!!Br,Vr=Br=null,e.current=n,Yl=r;do{try{for(b=e;null!==Yl;){var A=Yl.flags;if(36&A&&hl(b,Yl.alternate,Yl),128&A){w=void 0;var k=Yl.ref;if(null!==k){var C=Yl.stateNode;Yl.tag,w=C,"function"==typeof k?k(w):k.current=w}}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(a(330));Ds(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);Yl=null,zo(),Tl=o}else e.current=n;if(Ql)Ql=!1,Kl=e,Zl=t;else for(Yl=r;null!==Yl;)t=Yl.nextEffect,Yl.nextEffect=null,8&Yl.flags&&((A=Yl).sibling=null,A.stateNode=null),Yl=t;if(0===(r=e.pendingLanes)&&(Xl=null),1===r?e===rs?ns++:(ns=0,rs=e):ns=0,n=n.stateNode,ko&&"function"==typeof ko.onCommitFiberRoot)try{ko.onCommitFiberRoot(Ao,n,void 0,64==(64&n.current.flags))}catch(e){}if(ps(e,Wo()),ql)throw ql=!1,e=Gl,Gl=null,e;return 0!=(8&Tl)||Go(),null}function _s(){for(;null!==Yl;){var e=Yl.alternate;ss||null===ls||(0!=(8&Yl.flags)?Je(Yl,ls)&&(ss=!0):13===Yl.tag&&Cl(e,Yl)&&Je(Yl,ls)&&(ss=!0));var t=Yl.flags;0!=(256&t)&&pl(e,Yl),0==(512&t)||Ql||(Ql=!0,qo(97,(function(){return Ms(),null}))),Yl=Yl.nextEffect}}function Ms(){if(90!==Zl){var e=97<Zl?97:Zl;return Zl=90,Yo(e,js)}return!1}function Ns(e,t){Jl.push(t,e),Ql||(Ql=!0,qo(97,(function(){return Ms(),null})))}function Rs(e,t){es.push(t,e),Ql||(Ql=!0,qo(97,(function(){return Ms(),null})))}function js(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Tl))throw Error(a(331));var t=Tl;Tl|=32;var n=es;es=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Ds(i,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===i)throw Error(a(330));Ds(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Tl=t,Go(),!0}function Is(e,t,n){fi(e,t=ul(0,t=al(n,t),1)),t=us(),null!==(e=ds(e,1))&&(Ut(e,1,t),ps(e,t))}function Ds(e,t){if(3===e.tag)Is(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Is(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xl||!Xl.has(r))){var o=cl(n,e=al(t,e),1);if(fi(n,o),o=us(),null!==(n=ds(n,1)))Ut(n,1,o),ps(n,o);else if("function"==typeof r.componentDidCatch&&(null===Xl||!Xl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=us(),e.pingedLanes|=e.suspendedLanes&n,Ll===e&&(Ml&n)===n&&(4===jl||3===jl&&(62914560&Ml)===Ml&&500>Wo()-Ul?xs(e,0):Bl|=n),ps(e,t)}function Fs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ho()?1:2:(0===is&&(is=Dl),0===(t=Bt(62914560&~is))&&(t=4194304))),n=us(),null!==(e=ds(e,t))&&(Ut(e,t,n),ps(e,n))}function Bs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vs(e,t,n,r){return new Bs(e,t,n,r)}function Us(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ws(e,t){var n=e.alternate;return null===n?((n=Vs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hs(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Us(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return $s(n.children,o,i,t);case I:l=8,o|=16;break;case C:l=8,o|=1;break;case S:return(e=Vs(12,n,t,8|o)).elementType=S,e.type=S,e.lanes=i,e;case L:return(e=Vs(13,n,t,o)).type=L,e.elementType=L,e.lanes=i,e;case _:return(e=Vs(19,n,t,o)).elementType=_,e.lanes=i,e;case D:return Ys(n,o,i,t);case z:return(e=Vs(24,n,t,o)).elementType=z,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case P:l=9;break e;case T:l=11;break e;case M:l=14;break e;case N:l=16,r=null;break e;case R:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Vs(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function $s(e,t,n,r){return(e=Vs(7,e,r,t)).lanes=n,e}function Ys(e,t,n,r){return(e=Vs(23,e,r,t)).elementType=D,e.lanes=n,e}function qs(e,t,n){return(e=Vs(6,e,null,t)).lanes=n,e}function Gs(e,t,n){return(t=Vs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function Qs(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ks(e,t,n,r){var o=t.current,i=us(),l=cs(o);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(go(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(go(u)){n=wo(n,u,s);break e}}n=s}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),fs(o,l,i),l}function Zs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Js(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Js(e,t),(e=e.alternate)&&Js(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Xs(e,t,null!=n&&!0===n.hydrate),t=Vs(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,si(t),e[Jr]=n.current,_r(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Zs(a);l.call(e)}}Ks(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Zs(a);s.call(e)}}ys((function(){Ks(t,a,e,o)}))}return Zs(a)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return Qs(e,t,null,n)}$l=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Ia=!0;else{if(0==(n&r)){switch(Ia=!1,t.tag){case 3:Ya(t),qi();break;case 5:ji(t);break;case 1:go(t.type)&&xo(t);break;case 4:Ni(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Zo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ka(e,t,n):(co(Di,1&Di.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Di,1&Di.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Di,Di.current),r)break;return null;case 23:case 24:return t.lanes=0,Va(e,t,n)}return nl(e,t,n)}Ia=0!=(16384&e.flags)}else Ia=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,si(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&vi(t,r,l,e),o.updater=gi,t.stateNode=o,o._reactInternals=t,xi(t,r,e,n),t=$a(null,t,r,!0,i,n)}else t.tag=0,Da(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Us(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===M)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=Wa(null,t,o,e,n);break e;case 1:t=Ha(null,t,o,e,n);break e;case 11:t=za(null,t,o,e,n);break e;case 14:t=Fa(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ha(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Ya(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),pi(t,r,null,n),(r=t.memoizedState.element)===o)qi(),t=nl(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Bi=qr(t.stateNode.containerInfo.firstChild),Fi=t,i=Vi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Gi.push(i);for(n=Oi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Da(e,t,r,n),qi();t=t.child}return t;case 5:return ji(t),null===e&&Hi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,Wr(r,o)?l=null:null!==i&&Wr(r,i)&&(t.flags|=16),Ua(e,t),Da(e,t,l,n),t.child;case 6:return null===e&&Hi(t),null;case 13:return Ka(e,t,n);case 4:return Ni(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Da(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Da(e,t,t.pendingProps,n),t.child;case 8:case 12:return Da(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var s=t.type._context;if(co(Zo,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0==(i=ur(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=ci(-1,n&-n)).tag=2,fi(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),oi(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Da(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,Da(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),Fa(e,t,o,i=Ko(o.type,i),r,n);case 15:return Ba(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(r)?(e=!0,xo(t)):e=!1,ii(t,n),bi(t,r,o),xi(t,r,o,n),$a(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Va(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Ks(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ks(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fs(e,4,us()),eu(e,4))},tt=function(e){13===e.tag&&(fs(e,67108864,us()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=us(),n=cs(e);fs(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Me=gs,Ne=function(e,t,n,r,o){var i=Tl;Tl|=4;try{return Yo(98,e.bind(null,t,n,r,o))}finally{0===(Tl=i)&&(Hl(),Go())}},Re=function(){0==(49&Tl)&&(function(){if(null!==ts){var e=ts;ts=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ps(e,Wo())}))}Go()}(),Ms())},je=function(e,t){var n=Tl;Tl|=2;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Go())}};var iu={Events:[no,ro,oo,Le,_e,Ms,{current:!1}]},au={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lu={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var su=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!su.isDisabled&&su.supportsFiber)try{Ao=su.inject(lu),ko=su}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=iu,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Tl;if(0!=(48&n))return e(t);Tl|=1;try{if(e)return Yo(99,e.bind(null,t))}finally{Tl=n,Go()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(ys((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=gs,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},685:e=>{"use strict";e.exports={set:function(e,t,n){if(e&&"object"==typeof e){if("string"==typeof t&&""!==t){var r=t.split(".");return r.reduce((function(e,t,o){const i=Number.isInteger(Number(r[o+1]));return e[t]=e[t]||(i?[]:{}),r.length==o+1&&(e[t]=n),e[t]}),e)}return"number"==typeof t?(e[t]=n,e[t]):e}return e},get:function(e,t){return e&&"object"==typeof e?"string"==typeof t&&""!==t?t.split(".").reduce((function(e,t){return e&&e[t]}),e):"number"==typeof t?e[t]:e:e},has:function(e,t,n){return n=n||{},!(!e||"object"!=typeof e)&&("string"==typeof t&&""!==t?t.split(".").reduce((function(e,t,r,o){return r==o.length-1?n.own?!(!e||!e.hasOwnProperty(t)):!(null===e||"object"!=typeof e||!(t in e)):e&&e[t]}),e):"number"==typeof t&&t in e)},hasOwn:function(e,t,n){return this.has(e,t,n||{own:!0})},isIn:function(e,t,n,r){if(r=r||{},e&&"object"==typeof e){if("string"==typeof t&&""!==t){var o,i=t.split("."),a=!1;return o=!!i.reduce((function(e,t){return a=a||e===n||!!e&&e[t]===n,e&&e[t]}),e),r.validPath?a&&o:a}return!1}return!1}}},288:(e,t,n)=>{"use strict";var r=n(681),o=n(685);function i(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.every((function(e){return"number"==typeof e}))}t.Z=function(e,t){if(!e||!t)throw new Error("Missing required parameters");return{changed:function(n){var i=o.get(e,n),a=o.get(t,n);return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.every(Array.isArray)}(i,a)||function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.every((function(e){if(!e)return!1;var t=Object.getPrototypeOf(e);return"Object"===Object.prototype.toString.call(e).slice(8,-1)&&(null===t||t===Object.getPrototypeOf({}))}))}(i,a)?!!r.diff(i,a):i!==a},changedFrom:function(n,r,i){if(void 0===n)throw new Error("Key parameter is required");var a=void 0!==r&&void 0!==i,l=o.get(e,n),s=o.get(t,n),u=Array.isArray(r)?r.indexOf(l)>=0:l===r,c=Array.isArray(i)?i.indexOf(s)>=0:s===i;return u&&(a?c:!a)},changedTo:function(n,r){if(void 0===n)throw new Error("Key parameter is required");var i=o.get(e,n),a=o.get(t,n),l=Array.isArray(r)?r.indexOf(i)<0:i!==r,s=Array.isArray(r)?r.indexOf(a)>=0:a===r;return l&&s},increased:function(n){if(void 0===n)throw new Error("Key parameter is required");return i(o.get(e,n),o.get(t,n))&&o.get(e,n)<o.get(t,n)},decreased:function(n){if(void 0===n)throw new Error("Key parameter is required");return i(o.get(e,n),o.get(t,n))&&o.get(e,n)>o.get(t,n)}}}},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case v:case m:case s:return e;default:return t}}case o:return t}}}t.Element=r,t.ForwardRef=d,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},864:(e,t,n)=>{"use strict";e.exports=n(921)},494:(e,t)=>{"use strict";var n=function(e,t,n,r){return"boolean"==typeof e?e:"function"==typeof e?e(t,n,r):!(1!=!!e||!e)},r=function(e,t){return Object.hasOwnProperty.call(e,t)},o=function(e,t,n,r){return r?new Error(r):new Error("Required "+e[t]+" `"+t+"` was not specified in `"+n+"`.")};t.Z=function(e,t,i){return function(e,t){if("function"!=typeof e)throw new TypeError("The typeValidator argument must be a function with the signature function(props, propName, componentName).");if(t&&"string"!=typeof t)throw new TypeError("The error message is optional, but must be a string if provided.")}(e,i),function(a,l,s){for(var u=arguments.length,c=Array(3<u?u-3:0),f=3;f<u;f++)c[f-3]=arguments[f];return n(t,a,l,s)?r(a,l)?e.apply(void 0,[a,l,s].concat(c)):o(a,l,s,i):e.apply(void 0,[a,l,s].concat(c))}}},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===r?"."+S(s,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),O(a,t,n,"",(function(e){return e}))):null!=a&&(k(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+S(l=e[u],u);s+=O(l,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=O(l=l.value,t,n,c=r+S(l,u++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function P(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var L={current:null};function _(){var e=L.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)x.call(t,c)&&!E.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return _().useCallback(e,t)},t.useContext=function(e,t){return _().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return _().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return _().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return _().useLayoutEffect(e,t)},t.useMemo=function(e,t){return _().useMemo(e,t)},t.useReducer=function(e,t,n){return _().useReducer(e,t,n)},t.useRef=function(e){return _().useRef(e)},t.useState=function(e){return _().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?x.postMessage(null):(m=!1,v=null)}catch(e){throw x.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,x.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function A(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,s=e[l];if(void 0!==a&&0>C(a,n))void 0!==s&&0>C(s,a)?(e[r]=s,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>C(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],O=[],P=1,T=null,L=3,_=!1,M=!1,N=!1;function R(e){for(var t=A(O);null!==t;){if(null===t.callback)k(O);else{if(!(t.startTime<=e))break;k(O),t.sortIndex=t.expirationTime,E(S,t)}t=A(O)}}function j(e){if(N=!1,R(e),!M)if(null!==A(S))M=!0,n(I);else{var t=A(O);null!==t&&r(j,t.startTime-e)}}function I(e,n){M=!1,N&&(N=!1,o()),_=!0;var i=L;try{for(R(n),T=A(S);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,L=T.priorityLevel;var l=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===A(S)&&k(S),R(n)}else k(S);T=A(S)}if(null!==T)var s=!0;else{var u=A(O);null!==u&&r(j,u.startTime-n),s=!1}return s}finally{T=null,L=i,_=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||_||(M=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return A(S)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:P++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,E(O,e),null===A(S)&&e===A(O)&&(N?o():N=!0,r(j,a-l))):(e.sortIndex=s,E(S,e),M||_||(M=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},339:e=>{var t=new Error("Element already at target scroll position"),n=new Error("Scroll cancelled"),r=Math.min,o=Date.now;function i(e){return function(i,s,u,c){"function"==typeof(u=u||{})&&(c=u,u={}),"function"!=typeof c&&(c=l);var f=o(),d=i[e],p=u.ease||a,h=isNaN(u.duration)?350:+u.duration,m=!1;return d===s?c(t,i[e]):requestAnimationFrame((function t(a){if(m)return c(n,i[e]);var l=o(),u=r(1,(l-f)/h),v=p(u);i[e]=v*(s-d)+d,u<1?requestAnimationFrame(t):requestAnimationFrame((function(){c(null,i[e])}))})),function(){m=!0}}}function a(e){return.5*(1-Math.cos(Math.PI*e))}function l(){}e.exports={left:i("scrollLeft"),top:i("scrollTop")}},274:function(e,t){var n,r;void 0===(r="function"==typeof(n=function(){var e=/(auto|scroll)/,t=function(e,n){return null===e.parentNode?n:t(e.parentNode,n.concat([e]))},n=function(e,t){return getComputedStyle(e,null).getPropertyValue(t)},r=function(t){return e.test(function(e){return n(e,"overflow")+n(e,"overflow-y")+n(e,"overflow-x")}(t))};return function(e){if(e instanceof HTMLElement||e instanceof SVGElement){for(var n=t(e.parentNode,[]),o=0;o<n.length;o+=1)if(r(n[o]))return n[o];return document.scrollingElement||document.documentElement}}})?n.apply(t,[]):n)||(e.exports=r)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=i[u]||0,f="".concat(u," ").concat(c);i[u]=c+1;var d=n(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var s=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,exports:{}};return o[e].call(n.exports,n,n.exports,a),n.exports}a.m=o,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".peripleo-lanc.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="peripleo-lanc:",a.l=(e,t,o,i)=>{if(n[e])n[e].push(t);else{var l,s;if(void 0!==o)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var f=u[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(s=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),s&&document.head.appendChild(l)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={179:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var i=a.p+a.u(t),l=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[i,l,s]=n,u=0;if(i.some((t=>0!==e[t]))){for(r in l)a.o(l,r)&&(a.m[r]=l[r]);s&&s(a)}for(t&&t(n);u<i.length;u++)o=i[u],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkperipleo_lanc=self.webpackChunkperipleo_lanc||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=a(294),t=a(935);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}var r,o=r||(r={});o.Pop="POP",o.Push="PUSH",o.Replace="REPLACE";function i(e){e.preventDefault(),e.returnValue=""}function l(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function s(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function u(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function c(e,t){if(!e)throw new Error(t)}const f=(0,e.createContext)(null),d=(0,e.createContext)(null),p=(0,e.createContext)({outlet:null,matches:[]});function h(t){return function(t){let n=(0,e.useContext)(p).outlet;return n?(0,e.createElement)(b.Provider,{value:t},n):n}(t.context)}function m(e){c(!1)}function v(t){let{basename:n="/",children:o=null,location:i,navigationType:a=r.Pop,navigator:l,static:s=!1}=t;y()&&c(!1);let p=T(n),h=(0,e.useMemo)((()=>({basename:p,navigator:l,static:s})),[p,l,s]);"string"==typeof i&&(i=u(i));let{pathname:m="/",search:v="",hash:g="",state:b=null,key:w="default"}=i,x=(0,e.useMemo)((()=>{let e=O(m,p);return null==e?null:{pathname:e,search:v,hash:g,state:b,key:w}}),[p,m,v,g,b,w]);return null==x?null:(0,e.createElement)(f.Provider,{value:h},(0,e.createElement)(d.Provider,{children:o,value:{location:x,navigationType:a}}))}function g(t){let{children:n,location:r}=t;return function(t,n){y()||c(!1);let{matches:r}=(0,e.useContext)(p),o=r[r.length-1],i=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let l,s=(y()||c(!1),(0,e.useContext)(d).location);if(n){var f;let e="string"==typeof n?u(n):n;"/"===a||(null==(f=e.pathname)?void 0:f.startsWith(a))||c(!1),l=e}else l=s;let m=l.pathname||"/",v=function(e,t,n){void 0===n&&(n="/");let r=O(("string"==typeof t?u(t):t).pathname||"/",n);if(null==r)return null;let o=x(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=C(o[e],r);return i}(t,{pathname:"/"===a?m:m.slice(a.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,i)=>(0,e.createElement)(p.Provider,{children:void 0!==o.route.element?o.route.element:(0,e.createElement)(h,null),value:{outlet:r,matches:n.concat(t.slice(0,i+1))}})),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:P([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:P([a,e.pathnameBase])}))),r)}(w(n),r)}function y(){return null!=(0,e.useContext)(d)}const b=(0,e.createContext)(null);function w(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,w(t.props.children));t.type!==m&&c(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=w(t.props.children)),n.push(r)})),n}function x(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(r)||c(!1),i.relativePath=i.relativePath.slice(r.length));let a=P([r,i.relativePath]),l=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&c(!1),x(e.children,t,l,a)),(null!=e.path||e.index)&&t.push({path:a,score:k(a,e.index),routesMeta:l})})),t}const E=/^:\w+$/,A=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(A)&&(r+=-2),t&&(r+=2),n.filter((e=>!A(e))).reduce(((e,t)=>e+(E.test(t)?3:""===t?1:10)),r)}function C(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,s="/"===o?t:t.slice(o.length)||"/",u=S({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=a.route;i.push({params:r,pathname:P([o,u.pathname]),pathnameBase:P([o,u.pathnameBase]),route:c}),"/"!==u.pathnameBase&&(o=P([o,u.pathnameBase]))}return i}function S(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(l[n]||""),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function O(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const P=e=>e.join("/").replace(/\/\/+/g,"/"),T=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");function L(t){let{basename:o,children:a,window:c}=t,f=(0,e.useRef)();null==f.current&&(f.current=function(e){function t(){var e=u(p.location.hash.substr(1)),t=e.pathname,n=e.search;e=e.hash;var r=h.state||{};return[r.idx,{pathname:void 0===t?"/":t,search:void 0===n?"":n,hash:void 0===e?"":e,state:r.usr||null,key:r.key||"default"}]}function o(){if(m)w.call(m),m=null;else{var e=r.Pop,n=t(),o=n[0];if(n=n[1],w.length){if(null!=o){var i=g-o;i&&(m={action:e,location:n,retry:function(){d(-1*i)}},d(i))}}else f(e)}}function a(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=-1===(n=(t=p.location.href).indexOf("#"))?t:t.slice(0,n)),n+"#"+("string"==typeof e?e:s(e))}function c(e,t){return void 0===t&&(t=null),n({pathname:y.pathname,hash:"",search:""},"string"==typeof e?u(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function f(e){v=e,e=t(),g=e[0],y=e[1],b.call({action:v,location:y})}function d(e){h.go(e)}void 0===e&&(e={});var p=void 0===(e=e.window)?document.defaultView:e,h=p.history,m=null;p.addEventListener("popstate",o),p.addEventListener("hashchange",(function(){s(t()[1])!==s(y)&&o()}));var v=r.Pop,g=(e=t())[0],y=e[1],b=l(),w=l();return null==g&&(g=0,h.replaceState(n({},h.state,{idx:g}),"")),{get action(){return v},get location(){return y},createHref:a,push:function e(t,n){var o=r.Push,i=c(t,n);if(!w.length||(w.call({action:o,location:i,retry:function(){e(t,n)}}),0)){var l=[{usr:i.state,key:i.key,idx:g+1},a(i)];i=l[0],l=l[1];try{h.pushState(i,"",l)}catch(e){p.location.assign(l)}f(o)}},replace:function e(t,n){var o=r.Replace,i=c(t,n);w.length&&(w.call({action:o,location:i,retry:function(){e(t,n)}}),1)||(i=[{usr:i.state,key:i.key,idx:g},a(i)],h.replaceState(i[0],"",i[1]),f(o))},go:d,back:function(){d(-1)},forward:function(){d(1)},listen:function(e){return b.push(e)},block:function(e){var t=w.push(e);return 1===w.length&&p.addEventListener("beforeunload",i),function(){t(),w.length||p.removeEventListener("beforeunload",i)}}}}({window:c}));let d=f.current,[p,h]=(0,e.useState)({action:d.action,location:d.location});return(0,e.useLayoutEffect)((()=>d.listen(h)),[d]),(0,e.createElement)(v,{basename:o,children:a,location:p.location,navigationType:p.action,navigator:d})}var _=function(e,t){return _=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},_(e,t)};function M(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}_(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var N=function(){return N=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},N.apply(this,arguments)};function R(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function j(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function I(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;const D=1/60*1e3,z="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),F="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(z())),D);let B=!0,V=!1,U=!1;const W={delta:0,timestamp:0},H=["read","update","preRender","render","postRender"],$=H.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,i=!1;const a=new WeakSet,l={schedule:(e,i=!1,l=!1)=>{const s=l&&o,u=s?t:n;return i&&a.add(e),-1===u.indexOf(e)&&(u.push(e),s&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),a.delete(e)},process:s=>{if(o)i=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(s),a.has(r)&&(l.schedule(r),e())}o=!1,i&&(i=!1,l.process(s))}}};return l}((()=>V=!0)),e)),{}),Y=H.reduce(((e,t)=>{const n=$[t];return e[t]=(e,t=!1,r=!1)=>(V||K(),n.schedule(e,t,r)),e}),{}),q=H.reduce(((e,t)=>(e[t]=$[t].cancel,e)),{}),G=H.reduce(((e,t)=>(e[t]=()=>$[t].process(W),e)),{}),X=e=>$[e].process(W),Q=e=>{V=!1,W.delta=B?D:Math.max(Math.min(e-W.timestamp,40),1),W.timestamp=e,U=!0,H.forEach(X),U=!1,V&&(B=!1,F(Q))},K=()=>{V=!0,B=!0,U||F(Q)},Z=()=>W,J=Y;function ee(){var t=(0,e.useRef)(!1);return(0,e.useLayoutEffect)((function(){return t.current=!0,function(){t.current=!1}}),[]),t}var te=(0,e.createContext)(null);function ne(t){var n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}var re=0,oe=function(){return re++},ie=function(){return ne(oe)},ae=function(t){var n=t.children,r=t.initial,o=t.isPresent,i=t.onExitComplete,a=t.custom,l=t.presenceAffectsLayout,s=ne(le),u=ie(),c=(0,e.useMemo)((function(){return{id:u,initial:r,isPresent:o,custom:a,onExitComplete:function(e){var t,n;s.set(e,!0);try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(s.values()),o=r.next();!o.done;o=r.next())if(!o.value)return}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}null==i||i()},register:function(e){return s.set(e,!1),function(){return s.delete(e)}}}}),l?void 0:[o]);return(0,e.useMemo)((function(){s.forEach((function(e,t){return s.set(t,!1)}))}),[o]),e.useEffect((function(){!o&&!s.size&&(null==i||i())}),[o]),e.createElement(te.Provider,{value:c},n)};function le(){return new Map}var se=(0,e.createContext)({}),ue="undefined"!=typeof window,ce=ue?e.useLayoutEffect:e.useEffect;function fe(t){return(0,e.useEffect)((function(){return function(){return t()}}),[])}var de=function(e){return e.key||""},pe=function(t){var n=t.children,r=t.custom,o=t.initial,i=void 0===o||o,a=t.onExitComplete,l=t.exitBeforeEnter,s=t.presenceAffectsLayout,u=void 0===s||s,c=j(function(){var t=ee(),n=j((0,e.useState)(0),2),r=n[0],o=n[1],i=(0,e.useCallback)((function(){t.current&&o(r+1)}),[r]);return[(0,e.useCallback)((function(){return J.postRender(i)}),[i]),r]}(),1),f=c[0],d=(0,e.useContext)(se).forceRender;d&&(f=d);var p=ee(),h=function(t){var n=[];return e.Children.forEach(t,(function(t){(0,e.isValidElement)(t)&&n.push(t)})),n}(n),m=h,v=new Set,g=(0,e.useRef)(m),y=(0,e.useRef)(new Map).current,b=(0,e.useRef)(!0);if(ce((function(){b.current=!1,function(e,t){e.forEach((function(e){var n=de(e);t.set(n,e)}))}(h,y),g.current=m})),fe((function(){b.current=!0,y.clear(),v.clear()})),b.current)return e.createElement(e.Fragment,null,m.map((function(t){return e.createElement(ae,{key:de(t),isPresent:!0,initial:!!i&&void 0,presenceAffectsLayout:u},t)})));m=I([],j(m),!1);for(var w=g.current.map(de),x=h.map(de),E=w.length,A=0;A<E;A++){var k=w[A];-1===x.indexOf(k)&&v.add(k)}return l&&v.size&&(m=[]),v.forEach((function(t){if(-1===x.indexOf(t)){var n=y.get(t);if(n){var o=w.indexOf(t);m.splice(o,0,e.createElement(ae,{key:de(n),isPresent:!1,onExitComplete:function(){y.delete(t),v.delete(t);var e=g.current.findIndex((function(e){return e.key===t}));if(g.current.splice(e,1),!v.size){if(g.current=h,!1===p.current)return;f(),a&&a()}},custom:r,presenceAffectsLayout:u},n))}}})),m=m.map((function(t){var n=t.key;return v.has(n)?t:e.createElement(ae,{key:de(t),isPresent:!0,presenceAffectsLayout:u},t)})),e.createElement(e.Fragment,null,v.size?m:m.map((function(t){return(0,e.cloneElement)(t)})))};function he(e,t,n){if(null!==e)for(var r,o,i,a,l,s,u,c,f=0,d=0,p=e.type,h="FeatureCollection"===p,m="Feature"===p,v=h?e.features.length:1,g=0;g<v;g++){l=(c=!!(u=h?e.features[g].geometry:m?e.geometry:e)&&"GeometryCollection"===u.type)?u.geometries.length:1;for(var y=0;y<l;y++){var b=0,w=0;if(null!==(a=c?u.geometries[y]:u)){s=a.coordinates;var x=a.type;switch(f=!n||"Polygon"!==x&&"MultiPolygon"!==x?0:1,x){case null:break;case"Point":if(!1===t(s,d,g,b,w))return!1;d++,b++;break;case"LineString":case"MultiPoint":for(r=0;r<s.length;r++){if(!1===t(s[r],d,g,b,w))return!1;d++,"MultiPoint"===x&&b++}"LineString"===x&&b++;break;case"Polygon":case"MultiLineString":for(r=0;r<s.length;r++){for(o=0;o<s[r].length-f;o++){if(!1===t(s[r][o],d,g,b,w))return!1;d++}"MultiLineString"===x&&b++,"Polygon"===x&&w++}"Polygon"===x&&b++;break;case"MultiPolygon":for(r=0;r<s.length;r++){for(w=0,o=0;o<s[r].length;o++){for(i=0;i<s[r][o].length-f;i++){if(!1===t(s[r][o][i],d,g,b,w))return!1;d++}w++}b++}break;case"GeometryCollection":for(r=0;r<a.geometries.length;r++)if(!1===he(a.geometries[r],t,n))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function me(e){var t=[1/0,1/0,-1/0,-1/0];return he(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}me.default=me;const ve=me;var ge=a(736),ye=a.n(ge),be=a(582),we=a.n(be),xe=function(){function e(){}return e.prototype.expandToken=function(e){for(var t=[],n="",r=0,o=e.length;r<o;++r)n+=e.charAt(r),t.push(n);return t},e}(),Ee=function(){function e(){}return e.prototype.sanitize=function(e){return e?e.toLocaleLowerCase().trim():""},e}();function Ae(e,t){t=t||[];for(var n=e=e||{},r=0;r<t.length;r++)if(null==(n=n[t[r]]))return null;return n}var ke=function(){function e(e){this._uidFieldName=e,this._tokenToIdfCache={},this._tokenMap={}}var t=e.prototype;return t.indexDocument=function(e,t,n){this._tokenToIdfCache={};var r,o=this._tokenMap;"object"!=typeof o[e]?o[e]=r={$numDocumentOccurrences:0,$totalNumOccurrences:1,$uidMap:{}}:(r=o[e]).$totalNumOccurrences++;var i=r.$uidMap;"object"!=typeof i[t]?(r.$numDocumentOccurrences++,i[t]={$document:n,$numTokenOccurrences:1}):i[t].$numTokenOccurrences++},t.search=function(e,t){for(var n={},r=0,o=e.length;r<o;r++){var i,a=e[r],l=this._tokenMap[a];if(!l)return[];if(0===r)for(var s=0,u=(i=Object.keys(l.$uidMap)).length;s<u;s++)n[c=i[s]]=l.$uidMap[c].$document;else for(s=0,u=(i=Object.keys(n)).length;s<u;s++){var c=i[s];"object"!=typeof l.$uidMap[c]&&delete n[c]}}var f=[];for(var c in n)f.push(n[c]);var d=this._createCalculateTfIdf();return f.sort((function(n,r){return d(e,r,t)-d(e,n,t)}))},t._createCalculateIdf=function(){var e=this._tokenMap,t=this._tokenToIdfCache;return function(n,r){if(!t[n]){var o=void 0!==e[n]?e[n].$numDocumentOccurrences:0;t[n]=1+Math.log(r.length/(1+o))}return t[n]}},t._createCalculateTfIdf=function(){var e=this._tokenMap,t=this._uidFieldName,n=this._createCalculateIdf();return function(r,o,i){for(var a=0,l=0,s=r.length;l<s;++l){var u,c=r[l],f=n(c,i);f===1/0&&(f=0),u=t instanceof Array?o&&Ae(o,t):o&&o[t],a+=(void 0!==e[c]&&void 0!==e[c].$uidMap[u]?e[c].$uidMap[u].$numTokenOccurrences:0)*f}return a}},e}(),Ce=/[^a-zа-яё0-9\-']+/i,Se=function(){function e(){}return e.prototype.tokenize=function(e){return e.split(Ce).filter((function(e){return e}))},e}();function Oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Pe=function(){function e(e){if(!e)throw Error("js-search requires a uid field name constructor parameter");this._uidFieldName=e,this._indexStrategy=new xe,this._searchIndex=new ke(e),this._sanitizer=new Ee,this._tokenizer=new Se,this._documents=[],this._searchableFields=[]}var t,n,r=e.prototype;return r.addDocument=function(e){this.addDocuments([e])},r.addDocuments=function(e){this._documents=this._documents.concat(e),this.indexDocuments_(e,this._searchableFields)},r.addIndex=function(e){this._searchableFields.push(e),this.indexDocuments_(this._documents,[e])},r.search=function(e){var t=this._tokenizer.tokenize(this._sanitizer.sanitize(e));return this._searchIndex.search(t,this._documents)},r.indexDocuments_=function(e,t){this._initialized=!0;for(var n=this._indexStrategy,r=this._sanitizer,o=this._searchIndex,i=this._tokenizer,a=this._uidFieldName,l=0,s=e.length;l<s;l++){var u,c=e[l];u=a instanceof Array?Ae(c,a):c[a];for(var f=0,d=t.length;f<d;f++){var p,h=t[f];if(null!=(p=h instanceof Array?Ae(c,h):c[h])&&"string"!=typeof p&&p.toString&&(p=p.toString()),"string"==typeof p)for(var m=i.tokenize(r.sanitize(p)),v=0,g=m.length;v<g;v++)for(var y=m[v],b=n.expandToken(y),w=0,x=b.length;w<x;w++){var E=b[w];o.indexDocument(E,u,c)}}}},t=e,(n=[{key:"indexStrategy",set:function(e){if(this._initialized)throw Error("IIndexStrategy cannot be set after initialization");this._indexStrategy=e},get:function(){return this._indexStrategy}},{key:"sanitizer",set:function(e){if(this._initialized)throw Error("ISanitizer cannot be set after initialization");this._sanitizer=e},get:function(){return this._sanitizer}},{key:"searchIndex",set:function(e){if(this._initialized)throw Error("ISearchIndex cannot be set after initialization");this._searchIndex=e},get:function(){return this._searchIndex}},{key:"tokenizer",set:function(e){if(this._initialized)throw Error("ITokenizer cannot be set after initialization");this._tokenizer=e},get:function(){return this._tokenizer}}])&&Oe(t.prototype,n),e}();function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){_e(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Me(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function je(e,t,n){return t&&Re(e.prototype,t),n&&Re(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var De=function(e){var t;return null===(t=e.geometry)||void 0===t?void 0:t.type},ze=je((function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Ie(this,"loadDataset",(function(e,n){var r=e.name,o=e.format,i=e.src;return"LINKED_PLACES"===o?function(e,t,n){return fetch(t).then((function(e){return e.json()})).then((function(t){console.log("Importing LP: ".concat(e," (").concat(t.features.length," features)")),n.graph.beginUpdate();var r=t.features.map((function(t){var r=function(e,t){var n=Le({},e),r=We(e["@id"]);return delete n["@id"],n.id=r,n.title=n.properties.title,n.dataset=t,n.properties.id=r,n.properties.dataset=t,n}(t,e);n.graph.addNode(r.id,r);var o=He(r);return o&&n.spatialIndex.insert(Le(Le({},o),{},{node:r})),r})),o=r.filter((function(e){var t;return(null===(t=e.links)||void 0===t?void 0:t.length)>0})).reduce((function(e,t){return e+t.links.reduce((function(e,r){if(r.identifier||r.id){var o=t.id,i=We(r.id||r.identifier);return r.id=i,n.graph.addLink(o,i,r),e+1}return console.warn("Link does not declare identifier",r,"on node",t),e}),0)}),0);return n.graph.endUpdate(),console.log("Indexing..."),console.time("Took"),n.index(r),console.timeEnd("Took"),{nodes:r.length,edges:o}}))}(r,i,t):new Promise((function(e,t){return t(new Error("Unsupported format: "+o))}))})),Ie(this,"index",(function(e){return t.searchIndex.addDocuments(e.map((function(e){return function(e){var t,n;return{id:e.id,dataset:e.dataset,title:e.title,description:null===(t=e.properties)||void 0===t?void 0:t.description,names:e.name?[e.name]:null===(n=e.names)||void 0===n?void 0:n.map((function(e){return e.toponym}))}}(e)})))})),Ie(this,"countNodes",(function(){var e=0;return t.graph.forEachNode((function(){e+=1})),e})),Ie(this,"countEdges",(function(){var e=0;return t.graph.forEachLink((function(){e+=1})),e})),Ie(this,"getNode",(function(e){var n;return null===(n=t.graph.getNode(e))||void 0===n?void 0:n.data})),Ie(this,"getNodesInBounds",(function(e,n){var r,o,i,a;if(4===e.length){var l=Me(e,4);r=l[0],o=l[1],i=l[2],a=l[3]}else{var s=Me(e,2),u=Me(s[0],2);r=u[0],o=u[1];var c=Me(s[1],2);i=c[0],a=c[1]}var f=t.spatialIndex.search({minX:r,minY:o,maxX:i,maxY:a}),d=n?f.filter((function(e){return e.node.dataset===n})):f;return d.filter((function(e){return"Point"===e.node.geometry.type||function(e){return e.minX>r&&e.maxX<i&&e.minY>o&&e.maxY<a}(e)})).map((function(e){return e.node}))})),Ie(this,"search",(function(e){return t.searchIndex.search(e).map((function(e){return t.getNode(e.id)}))})),Ie(this,"searchMappable",(function(e){return t.search(e).filter(De)})),this.graph=ye()(),this.spatialIndex=new(we()),this.searchIndex=new Pe("id"),this.searchIndex.tokenizer={tokenize:function(e){return e.replace(/[.,'"#!$%^&*;:{}=\-_`~()]/g,"").split(/[\s,-]+/)}},this.searchIndex.addIndex("title"),this.searchIndex.addIndex("description"),this.searchIndex.addIndex("names")})),Fe=(0,e.createContext)(),Be=function(t){var n=t.children,r={store:new ze};return e.createElement(Fe.Provider,{value:r},n)};function Ve(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ue(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var We=function(e){return e.replace("https://","http://")},He=function(e){if(e.geometry){if("Point"===e.geometry.type){var t=Ve(e.geometry.coordinates,2),n=t[0],r=t[1];return{minX:n,minY:r,maxX:n,maxY:r}}try{var o=Ve(ve(e),4);return{minX:o[0],minY:o[1],maxX:o[2],maxY:o[3]}}catch(t){console.error("Error parsing geometry for node",e)}}},$e=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},Ye={measureLayout:$e(["layout","layoutId","drag"]),animation:$e(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:$e(["exit"]),drag:$e(["drag","dragControls"]),focus:$e(["whileFocus"]),hover:$e(["whileHover","onHoverStart","onHoverEnd"]),tap:$e(["whileTap","onTap","onTapStart","onTapCancel"]),pan:$e(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:$e(["whileInView","onViewportEnter","onViewportLeave"])},qe=(0,e.createContext)({strict:!1}),Ge=Object.keys(Ye),Xe=Ge.length,Qe=(0,e.createContext)({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),Ke=(0,e.createContext)({}),Ze={current:null},Je=!1;function et(t,n,r,o){var i,a,l=(0,e.useContext)(qe),s=(0,e.useContext)(Ke).visualElement,u=(0,e.useContext)(te),c=(!Je&&function(){if(Je=!0,"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return Ze.current=e.matches};e.addListener(t),t()}else Ze.current=!1}(),i=j((0,e.useState)(Ze.current),1)[0],"never"!==(a=(0,e.useContext)(Qe).reducedMotion)&&("always"===a||i)),f=(0,e.useRef)(void 0);o||(o=l.renderer),!f.current&&o&&(f.current=o(t,{visualState:n,parent:s,props:r,presenceId:null==u?void 0:u.id,blockInitialAnimation:!1===(null==u?void 0:u.initial),shouldReduceMotion:c}));var d=f.current;return ce((function(){null==d||d.syncRender()})),(0,e.useEffect)((function(){var e;null===(e=null==d?void 0:d.animationState)||void 0===e||e.animateChanges()})),ce((function(){return function(){return null==d?void 0:d.notifyUnmount()}}),[]),d}function tt(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function nt(e){return Array.isArray(e)}function rt(e){return"string"==typeof e||nt(e)}function ot(e,t,n,r,o){var i;return void 0===r&&(r={}),void 0===o&&(o={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),"string"==typeof t&&(t=null===(i=e.variants)||void 0===i?void 0:i[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),t}function it(e,t,n){var r=e.getProps();return ot(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function at(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||rt(e.initial)||rt(e.animate)||rt(e.whileHover)||rt(e.whileDrag)||rt(e.whileTap)||rt(e.whileFocus)||rt(e.exit)}function lt(e){return Boolean(at(e)||e.variants)}function st(e){return Array.isArray(e)?e.join(" "):e}const ut=(e,t,n)=>-n*e+n*t+e;function ct(e,t){return t?e*(1e3/t):0}function ft(e,t){-1===e.indexOf(t)&&e.push(t)}function dt(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var pt=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return ft(this.subscriptions,e),function(){return dt(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var i=this.subscriptions[o];i&&i(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),ht=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new pt,this.velocityUpdateSubscribers=new pt,this.renderSubscribers=new pt,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=Z(),o=r.delta,i=r.timestamp;n.lastUpdated!==i&&(n.timeDelta=o,n.lastUpdated=i,J.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return J.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?ct(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function mt(e){return new ht(e)}var vt=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)};const gt=(e,t,n)=>Math.min(Math.max(n,e),t);function yt(e,t){return e*Math.sqrt(1-t*t)}const bt=["duration","bounce"],wt=["stiffness","damping","mass"];function xt(e,t){return t.some((t=>void 0!==e[t]))}function Et(e){var{from:t=0,to:n=1,restSpeed:r=2,restDelta:o}=e,i=R(e,["from","to","restSpeed","restDelta"]);const a={done:!1,value:t};let{stiffness:l,damping:s,mass:u,velocity:c,duration:f,isResolvedFromDuration:d}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!xt(e,wt)&&xt(e,bt)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,i,a=1-t;a=gt(.05,1,a),e=gt(.01,10,e/1e3),a<1?(o=t=>{const r=t*a,o=r*e;return.001-(r-n)/yt(t,a)*Math.exp(-o)},i=t=>{const r=t*a*e,i=r*n+n,l=Math.pow(a,2)*Math.pow(t,2)*e,s=Math.exp(-r),u=yt(Math.pow(t,2),a);return(.001-o(t)>0?-1:1)*((i-l)*s)/u}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,i=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(o,i,5/e);if(e*=1e3,isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*a*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(i),p=At,h=At;function m(){const e=c?-c/1e3:0,r=n-t,i=s/(2*Math.sqrt(l*u)),a=Math.sqrt(l/u)/1e3;if(void 0===o&&(o=Math.min(Math.abs(n-t)/100,.4)),i<1){const t=yt(a,i);p=o=>{const l=Math.exp(-i*a*o);return n-l*((e+i*a*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},h=n=>{const o=Math.exp(-i*a*n);return i*a*o*(Math.sin(t*n)*(e+i*a*r)/t+r*Math.cos(t*n))-o*(Math.cos(t*n)*(e+i*a*r)-t*r*Math.sin(t*n))}}else if(1===i)p=t=>n-Math.exp(-a*t)*(r+(e+a*r)*t);else{const t=a*Math.sqrt(i*i-1);p=o=>{const l=Math.exp(-i*a*o),s=Math.min(t*o,300);return n-l*((e+i*a*r)*Math.sinh(s)+t*r*Math.cosh(s))/t}}}return m(),{next:e=>{const t=p(e);if(d)a.done=e>=f;else{const i=1e3*h(e),l=Math.abs(i)<=r,s=Math.abs(n-t)<=o;a.done=l&&s}return a.value=a.done?n:t,a},flipTarget:()=>{c=-c,[t,n]=[n,t],m()}}}Et.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const At=e=>0,kt=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Ct=(e,t)=>n=>Math.max(Math.min(n,t),e),St=e=>e%1?Number(e.toFixed(5)):e,Ot=/(-)?([\d]*\.?[\d])+/g,Pt=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,Tt=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function Lt(e){return"string"==typeof e}const _t={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Mt=Object.assign(Object.assign({},_t),{transform:Ct(0,1)}),Nt=Object.assign(Object.assign({},_t),{default:1}),Rt=(e,t)=>n=>Boolean(Lt(n)&&Tt.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),jt=(e,t,n)=>r=>{if(!Lt(r))return r;const[o,i,a,l]=r.match(Ot);return{[e]:parseFloat(o),[t]:parseFloat(i),[n]:parseFloat(a),alpha:void 0!==l?parseFloat(l):1}},It=Ct(0,255),Dt=Object.assign(Object.assign({},_t),{transform:e=>Math.round(It(e))}),zt={test:Rt("rgb","red"),parse:jt("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Dt.transform(e)+", "+Dt.transform(t)+", "+Dt.transform(n)+", "+St(Mt.transform(r))+")"},Ft={test:Rt("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:zt.transform},Bt=e=>({test:t=>Lt(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Vt=Bt("deg"),Ut=Bt("%"),Wt=Bt("px"),Ht=Bt("vh"),$t=Bt("vw"),Yt=Object.assign(Object.assign({},Ut),{parse:e=>Ut.parse(e)/100,transform:e=>Ut.transform(100*e)}),qt={test:Rt("hsl","hue"),parse:jt("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Ut.transform(St(t))+", "+Ut.transform(St(n))+", "+St(Mt.transform(r))+")"};function Gt(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function Xt({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,i=0,a=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;o=Gt(l,r,e+1/3),i=Gt(l,r,e),a=Gt(l,r,e-1/3)}else o=i=a=n;return{red:Math.round(255*o),green:Math.round(255*i),blue:Math.round(255*a),alpha:r}}const Qt=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},Kt=[Ft,zt,qt],Zt=e=>Kt.find((t=>t.test(e))),Jt=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,en=(e,t)=>{let n=Zt(e),r=Zt(t);Jt(e),Jt(t);let o=n.parse(e),i=r.parse(t);n===qt&&(o=Xt(o),n=zt),r===qt&&(i=Xt(i),r=zt);const a=Object.assign({},o);return e=>{for(const t in a)"alpha"!==t&&(a[t]=Qt(o[t],i[t],e));return a.alpha=ut(o.alpha,i.alpha,e),n.transform(a)}},tn={test:e=>zt.test(e)||Ft.test(e)||qt.test(e),parse:e=>zt.test(e)?zt.parse(e):qt.test(e)?qt.parse(e):Ft.parse(e),transform:e=>Lt(e)?e:e.hasOwnProperty("red")?zt.transform(e):qt.transform(e)},nn="${c}",rn="${n}";function on(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(Pt);r&&(n=r.length,e=e.replace(Pt,nn),t.push(...r.map(tn.parse)));const o=e.match(Ot);return o&&(e=e.replace(Ot,rn),t.push(...o.map(_t.parse))),{values:t,numColors:n,tokenised:e}}function an(e){return on(e).values}function ln(e){const{values:t,numColors:n,tokenised:r}=on(e),o=t.length;return e=>{let t=r;for(let r=0;r<o;r++)t=t.replace(r<n?nn:rn,r<n?tn.transform(e[r]):St(e[r]));return t}}const sn=e=>"number"==typeof e?0:e,un={test:function(e){var t,n,r,o;return isNaN(e)&&Lt(e)&&(null!==(n=null===(t=e.match(Ot))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(o=null===(r=e.match(Pt))||void 0===r?void 0:r.length)&&void 0!==o?o:0)>0},parse:an,createTransformer:ln,getAnimatableNone:function(e){const t=an(e);return ln(e)(t.map(sn))}},cn=e=>"number"==typeof e,fn=(e,t)=>n=>t(e(n)),dn=(...e)=>e.reduce(fn);function pn(e,t){return cn(e)?n=>ut(e,t,n):tn.test(e)?en(e,t):gn(e,t)}const hn=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>pn(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},mn=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=pn(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function vn(e){const t=un.parse(e),n=t.length;let r=0,o=0,i=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?i++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:i}}const gn=(e,t)=>{const n=un.createTransformer(t),r=vn(e),o=vn(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&r.numNumbers>=o.numNumbers?dn(hn(r.parsed,o.parsed),n):n=>`${n>0?t:e}`},yn=(e,t)=>n=>ut(e,t,n);function bn(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const i=e.length;t.length,!r||!Array.isArray(r)||r.length,e[0]>e[i-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const a=function(e,t,n){const r=[],o=n||("number"==typeof(i=e[0])?yn:"string"==typeof i?tn.test(i)?en:gn:Array.isArray(i)?hn:"object"==typeof i?mn:void 0);var i;const a=e.length-1;for(let n=0;n<a;n++){let i=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;i=dn(e,i)}r.push(i)}return r}(t,r,o),l=2===i?function([e,t],[n]){return r=>n(kt(e,t,r))}(e,a):function(e,t){const n=e.length,r=n-1;return o=>{let i=0,a=!1;if(o<=e[0]?a=!0:o>=e[r]&&(i=r-1,a=!0),!a){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);i=t-1}const l=kt(e[i],e[i+1],o);return t[i](l)}}(e,a);return n?t=>l(gt(e[0],e[i-1],t)):l}const wn=e=>t=>1-e(1-t),xn=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,En=e=>t=>t*t*((e+1)*t-e),An=e=>e,kn=(2,e=>Math.pow(e,2));const Cn=wn(kn),Sn=xn(kn),On=e=>1-Math.sin(Math.acos(e)),Pn=wn(On),Tn=xn(Pn),Ln=En(1.525),_n=wn(Ln),Mn=xn(Ln),Nn=(e=>{const t=En(1.525);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))})(),Rn=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},jn=wn(Rn);function In(e,t){return e.map((()=>t||Sn)).splice(0,e.length-1)}function Dn({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const i={done:!1,value:e},a=Array.isArray(t)?t:[e,t],l=function(e,t){return e.map((e=>e*t))}(r&&r.length===a.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(a),o);function s(){return bn(l,a,{ease:Array.isArray(n)?n:In(a,n)})}let u=s();return{next:e=>(i.value=u(e),i.done=e>=o,i),flipTarget:()=>{a.reverse(),u=s()}}}const zn={keyframes:Dn,spring:Et,decay:function({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:i}){const a={done:!1,value:t};let l=n*e;const s=t+l,u=void 0===i?s:i(s);return u!==s&&(l=u-t),{next:e=>{const t=-l*Math.exp(-e/r);return a.done=!(t>o||t<-o),a.value=a.done?u:u+t,a},flipTarget:()=>{}}}};function Fn(e,t,n=0){return e-t-n}const Bn=e=>{const t=({delta:t})=>e(t);return{start:()=>J.update(t,!0),stop:()=>q.update(t)}};function Vn(e){var t,n,{from:r,autoplay:o=!0,driver:i=Bn,elapsed:a=0,repeat:l=0,repeatType:s="loop",repeatDelay:u=0,onPlay:c,onStop:f,onComplete:d,onRepeat:p,onUpdate:h}=e,m=R(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,g,y,{to:b}=m,w=0,x=m.duration,E=!1,A=!0;const k=function(e){if(Array.isArray(e.to))return Dn;if(zn[e.type])return zn[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?Dn:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?Et:Dn}(m);(null===(n=(t=k).needsInterpolation)||void 0===n?void 0:n.call(t,r,b))&&(y=bn([0,100],[r,b],{clamp:!1}),r=0,b=100);const C=k(Object.assign(Object.assign({},m),{from:r,to:b}));return o&&(null==c||c(),v=i((function(e){if(A||(e=-e),a+=e,!E){const e=C.next(Math.max(0,a));g=e.value,y&&(g=y(g)),E=A?e.done:a<=0}null==h||h(g),E&&(0===w&&(null!=x||(x=a)),w<l?function(e,t,n,r){return r?e>=t+n:e<=-n}(a,x,u,A)&&(w++,"reverse"===s?(A=w%2==0,a=function(e,t,n=0,r=!0){return r?Fn(t+-e,t,n):t-(e-t)+n}(a,x,u,A)):(a=Fn(a,x,u),"mirror"===s&&C.flipTarget()),E=!1,p&&p()):(v.stop(),d&&d()))})),v.start()),{stop:()=>{null==f||f(),v.stop()}}}var Un=function(e){return 1e3*e};const Wn=(e,t)=>1-3*t+3*e,Hn=(e,t)=>3*t-6*e,$n=e=>3*e,Yn=(e,t,n)=>((Wn(t,n)*e+Hn(t,n))*e+$n(t))*e,qn=(e,t,n)=>3*Wn(t,n)*e*e+2*Hn(t,n)*e+$n(t),Gn=.1;function Xn(e,t,n,r){if(e===t&&n===r)return An;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=Yn(t*Gn,e,n);return i=>0===i||1===i?i:Yn(function(t){let r=0,i=1;for(;10!==i&&o[i]<=t;++i)r+=Gn;--i;const a=r+(t-o[i])/(o[i+1]-o[i])*Gn,l=qn(a,e,n);return l>=.001?function(e,t,n,r){for(let o=0;o<8;++o){const o=qn(t,n,r);if(0===o)return t;t-=(Yn(t,n,r)-e)/o}return t}(t,a,e,n):0===l?a:function(e,t,n,r,o){let i,a,l=0;do{a=t+(n-t)/2,i=Yn(a,r,o)-e,i>0?n=a:t=a}while(Math.abs(i)>1e-7&&++l<10);return a}(t,r,r+Gn,e,n)}(i),t,r)}var Qn={linear:An,easeIn:kn,easeInOut:Sn,easeOut:Cn,circIn:On,circInOut:Tn,circOut:Pn,backIn:Ln,backInOut:Mn,backOut:_n,anticipate:Nn,bounceIn:jn,bounceInOut:e=>e<.5?.5*(1-Rn(1-2*e)):.5*Rn(2*e-1)+.5,bounceOut:Rn},Kn=function(e){if(Array.isArray(e)){e.length;var t=j(e,4);return Xn(t[0],t[1],t[2],t[3])}return"string"==typeof e?("Invalid easing type '".concat(e,"'"),Qn[e]):e},Zn=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!un.test(t)||t.startsWith("url(")))},Jn=function(e){return Array.isArray(e)},er=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},tr=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},nr=function(){return{type:"keyframes",ease:"linear",duration:.3}},rr=function(e){return{type:"keyframes",duration:.8,values:e}},or={x:er,y:er,z:er,rotate:er,rotateX:er,rotateY:er,rotateZ:er,scaleX:tr,scaleY:tr,scale:tr,opacity:nr,backgroundColor:nr,color:nr,default:tr};const ir=new Set(["brightness","contrast","saturate","opacity"]);function ar(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Ot)||[];if(!r)return e;const o=n.replace(r,"");let i=ir.has(t)?1:0;return r!==n&&(i*=100),t+"("+i+o+")"}const lr=/([a-z-]*)\(.*?\)/g,sr=Object.assign(Object.assign({},un),{getAnimatableNone:e=>{const t=e.match(lr);return t?t.map(ar).join(" "):e}});var ur=N(N({},_t),{transform:Math.round}),cr={borderWidth:Wt,borderTopWidth:Wt,borderRightWidth:Wt,borderBottomWidth:Wt,borderLeftWidth:Wt,borderRadius:Wt,radius:Wt,borderTopLeftRadius:Wt,borderTopRightRadius:Wt,borderBottomRightRadius:Wt,borderBottomLeftRadius:Wt,width:Wt,maxWidth:Wt,height:Wt,maxHeight:Wt,size:Wt,top:Wt,right:Wt,bottom:Wt,left:Wt,padding:Wt,paddingTop:Wt,paddingRight:Wt,paddingBottom:Wt,paddingLeft:Wt,margin:Wt,marginTop:Wt,marginRight:Wt,marginBottom:Wt,marginLeft:Wt,rotate:Vt,rotateX:Vt,rotateY:Vt,rotateZ:Vt,scale:Nt,scaleX:Nt,scaleY:Nt,scaleZ:Nt,skew:Vt,skewX:Vt,skewY:Vt,distance:Wt,translateX:Wt,translateY:Wt,translateZ:Wt,x:Wt,y:Wt,z:Wt,perspective:Wt,transformPerspective:Wt,opacity:Mt,originX:Yt,originY:Yt,originZ:Wt,zIndex:ur,fillOpacity:Mt,strokeOpacity:Mt,numOctaves:ur},fr=N(N({},cr),{color:tn,backgroundColor:tn,outlineColor:tn,fill:tn,stroke:tn,borderColor:tn,borderTopColor:tn,borderRightColor:tn,borderBottomColor:tn,borderLeftColor:tn,filter:sr,WebkitFilter:sr}),dr=function(e){return fr[e]};function pr(e,t){var n,r=dr(e);return r!==sr&&(r=un),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var hr=function(e){return Jn(e)?e[e.length-1]||0:e};function mr(e,t,n){var r,o,i,a;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=I([],j(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=R(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=N(N({},e),(o=n,i=t.to,a=Jn(i)?rr:or[o]||or.default,N({to:i},a(i))))),N(N({},t),function(e){var t=e.ease,n=e.times,r=e.yoyo,o=e.flip,i=e.loop,a=R(e,["ease","times","yoyo","flip","loop"]),l=N({},a);return n&&(l.offset=n),a.duration&&(l.duration=Un(a.duration)),a.repeatDelay&&(l.repeatDelay=Un(a.repeatDelay)),t&&(l.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(Kn):Kn(t)),"tween"===a.type&&(l.type="keyframes"),(r||i||o)&&(r?l.repeatType="reverse":i?l.repeatType="loop":o&&(l.repeatType="mirror"),l.repeat=i||r||o||a.repeat),"spring"!==a.type&&(l.type="keyframes"),l}(e))}function vr(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function gr(e){return"number"==typeof e?0:pr("",e)}function yr(e,t){return e[t]||e.default||e}function br(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var i,a,l=function(e,t,n,r,o){var i,a=yr(r,e),l=null!==(i=a.from)&&void 0!==i?i:t.get(),s=Zn(e,n);"none"===l&&s&&"string"==typeof n?l=pr(e,n):vr(l)&&"string"==typeof n?l=gr(n):!Array.isArray(n)&&vr(n)&&"string"==typeof l&&(n=gr(l));var u=Zn(e,l);return"You are trying to animate ".concat(e,' from "').concat(l,'" to "').concat(n,'". ').concat(l," is not an animatable value - to enable this animation set ").concat(l," to a value animatable to ").concat(n," via the `style` property."),u&&s&&!1!==a.type?function(){var r={from:l,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===a.type||"decay"===a.type?function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:i=750,bounceStiffness:a=500,bounceDamping:l=10,restDelta:s=1,modifyTarget:u,driver:c,onUpdate:f,onComplete:d,onStop:p}){let h;function m(e){return void 0!==n&&e<n||void 0!==r&&e>r}function v(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function g(e){null==h||h.stop(),h=Vn(Object.assign(Object.assign({},e),{driver:c,onUpdate:t=>{var n;null==f||f(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:d,onStop:p}))}function y(e){g(Object.assign({type:"spring",stiffness:a,damping:l,restDelta:s},e))}if(m(e))y({from:e,velocity:t,to:v(e)});else{let r=o*t+e;void 0!==u&&(r=u(r));const a=v(r),l=a===n?-1:1;let c,f;const d=e=>{c=f,f=e,t=ct(e-c,Z().delta),(1===l&&e>a||-1===l&&e<a)&&y({from:e,to:a,velocity:t})};g({type:"decay",from:e,velocity:t,timeConstant:i,power:o,restDelta:s,modifyTarget:u,onUpdate:m(r)?d:void 0})}return{stop:()=>null==h?void 0:h.stop()}}(N(N({},r),a)):Vn(N(N({},mr(a,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=a.onUpdate)||void 0===t||t.call(a,e)},onComplete:function(){var e;r.onComplete(),null===(e=a.onComplete)||void 0===e||e.call(a)}}))}:function(){var e,r,i=hr(n);return t.set(i),o(),null===(e=null==a?void 0:a.onUpdate)||void 0===e||e.call(a,i),null===(r=null==a?void 0:a.onComplete)||void 0===r||r.call(a),{stop:function(){}}}}(e,t,n,r,o),s=function(e,t){var n,r;return null!==(r=null!==(n=(yr(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(r,e),u=function(){return a=l()};return s?i=window.setTimeout(u,Un(s)):u(),function(){clearTimeout(i),null==a||a.stop()}}))}var wr=["TopLeft","TopRight","BottomLeft","BottomRight"],xr=wr.length,Er=function(e){return"string"==typeof e?parseFloat(e):e},Ar=function(e){return"number"==typeof e||Wt.test(e)};function kr(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var Cr=Or(0,.5,Pn),Sr=Or(.5,.95,An);function Or(e,t,n){return function(r){return r<e?0:r>t?1:n(kt(e,t,r))}}function Pr(e,t){e.min=t.min,e.max=t.max}function Tr(e,t){Pr(e.x,t.x),Pr(e.y,t.y)}function Lr(e){return void 0===e||1===e}function _r(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Lr(t)||!Lr(n)||!Lr(r)}function Mr(e){return _r(e)||Nr(e.x)||Nr(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function Nr(e){return e&&"0%"!==e}function Rr(e,t,n){return n+t*(e-n)}function jr(e,t,n,r,o){return void 0!==o&&(e=Rr(e,o,r)),Rr(e,n,r)+t}function Ir(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=jr(e.min,t,n,r,o),e.max=jr(e.max,t,n,r,o)}function Dr(e,t){var n=t.x,r=t.y;Ir(e.x,n.translate,n.scale,n.originPoint),Ir(e.y,r.translate,r.scale,r.originPoint)}function zr(e,t){e.min=e.min+t,e.max=e.max+t}function Fr(e,t,n){var r=j(n,3),o=r[0],i=r[1],a=r[2],l=void 0!==t[a]?t[a]:.5,s=ut(e.min,e.max,l);Ir(e,t[o],t[i],s,t.scale)}var Br=["x","scaleX","originX"],Vr=["y","scaleY","originY"];function Ur(e,t){Fr(e.x,t,Br),Fr(e.y,t,Vr)}const Wr=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),Hr=e=>Wr(e)&&e.hasOwnProperty("z"),$r=(e,t)=>Math.abs(e-t);function Yr(e,t){if(cn(e)&&cn(t))return $r(e,t);if(Wr(e)&&Wr(t)){const n=$r(e.x,t.x),r=$r(e.y,t.y),o=Hr(e)&&Hr(t)?$r(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}function qr(e){return e.max-e.min}function Gr(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),Yr(e,t)<n}function Xr(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=ut(t.min,t.max,e.origin),e.scale=qr(n)/qr(t),(Gr(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=ut(n.min,n.max,e.origin)-e.originPoint,(Gr(e.translate)||isNaN(e.translate))&&(e.translate=0)}function Qr(e,t,n,r){Xr(e.x,t.x,n.x,null==r?void 0:r.originX),Xr(e.y,t.y,n.y,null==r?void 0:r.originY)}function Kr(e,t,n){e.min=n.min+t.min,e.max=e.min+qr(t)}function Zr(e,t,n){e.min=t.min-n.min,e.max=e.min+qr(t)}function Jr(e,t,n){Zr(e.x,t.x,n.x),Zr(e.y,t.y,n.y)}function eo(e,t,n,r,o){return e=Rr(e-=t,1/n,r),void 0!==o&&(e=Rr(e,1/o,r)),e}function to(e,t,n,r,o){var i=j(n,3),a=i[0],l=i[1],s=i[2];!function(e,t,n,r,o,i,a){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===i&&(i=e),void 0===a&&(a=e),Ut.test(t)&&(t=parseFloat(t),t=ut(a.min,a.max,t/100)-a.min),"number"==typeof t){var l=ut(i.min,i.max,r);e===i&&(l-=t),e.min=eo(e.min,t,n,l,o),e.max=eo(e.max,t,n,l,o)}}(e,t[a],t[l],t[s],t.scale,r,o)}var no=["x","scaleX","originX"],ro=["y","scaleY","originY"];function oo(e,t,n,r){to(e.x,t,no,null==n?void 0:n.x,null==r?void 0:r.x),to(e.y,t,ro,null==n?void 0:n.y,null==r?void 0:r.y)}function io(e){return 0===e.translate&&1===e.scale}function ao(e){return io(e.x)&&io(e.y)}function lo(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var so=function(){function e(){this.members=[]}return e.prototype.add=function(e){ft(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(dt(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var o=this.members[r];if(!1!==o.isPresent){t=o;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,o,i;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(i=null===(r=e.resumingFrom)||void 0===r?void 0:(o=r.options).onExitComplete)||void 0===i||i.call(o)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),uo={};function co(e,t,n){var r=e.x.translate/t.x,o=e.y.translate/t.y,i="translate3d(".concat(r,"px, ").concat(o,"px, 0) ");if(n){var a=n.rotate,l=n.rotateX,s=n.rotateY;a&&(i+="rotate(".concat(a,"deg) ")),l&&(i+="rotateX(".concat(l,"deg) ")),s&&(i+="rotateY(".concat(s,"deg) "))}return"translate3d(0px, 0px, 0) scale(1, 1)"===(i+="scale(".concat(e.x.scale,", ").concat(e.y.scale,")"))?"none":i}function fo(e){return[e("x"),e("y")]}var po=["","X","Y","Z"],ho=["transformPerspective","x","y","z"];function mo(e,t){return ho.indexOf(e)-ho.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return po.forEach((function(t){return ho.push(e+t)}))}));var vo=new Set(ho);function go(e){return vo.has(e)}var yo=new Set(["originX","originY","originZ"]);function bo(e){return yo.has(e)}var wo=function(e,t){return e.depth-t.depth},xo=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){ft(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){dt(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(wo),this.isDirty=!1,this.children.forEach(e)},e}();function Eo(e){var t,n=vt(e)?e.get():e;return t=n,Boolean(t&&"object"==typeof t&&t.mix&&t.toValue)?n.toValue():n}var Ao={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function ko(e){var t=e.attachResizeListener,n=e.defaultParent,r=e.measureScroll,o=e.resetTransform;return function(){function e(e,t,r){var o=this;void 0===t&&(t={}),void 0===r&&(r=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){o.isUpdating&&(o.isUpdating=!1,o.clearAllSnapshots())},this.updateProjection=function(){o.nodes.forEach(_o),o.nodes.forEach(Mo)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=r?r.root||r:this,this.path=r?I(I([],j(r.path),!1),[r],!1):[],this.parent=r,this.depth=r?r.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var i=0;i<this.path.length;i++)this.path[i].shouldResetTransform=!0;this.root===this&&(this.nodes=new xo)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new pt),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.eventHandlers.get(e);null==r||r.notify.apply(r,I([],j(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var r,o=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var i=this.options,a=i.layoutId,l=i.layout,s=i.visualElement;if(s&&!s.getInstance()&&s.mount(e),this.root.nodes.add(this),null===(r=this.parent)||void 0===r||r.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(l||a)&&(this.isLayoutDirty=!0),t){var u,c=function(){return o.root.updateBlockedByResize=!1};t(e,(function(){o.root.updateBlockedByResize=!0,clearTimeout(u),u=window.setTimeout(c,250),Ao.hasAnimatedSinceResize&&(Ao.hasAnimatedSinceResize=!1,o.nodes.forEach(Lo))}))}a&&this.root.registerSharedNode(a,this),!1!==this.options.animate&&s&&(a||l)&&this.addEventListener("didUpdate",(function(e){var t,n,r,i,a,l=e.delta,u=e.hasLayoutChanged,c=e.hasRelativeTargetChanged,f=e.layout;if(o.isTreeAnimationBlocked())return o.target=void 0,void(o.relativeTarget=void 0);var d=null!==(n=null!==(t=o.options.transition)&&void 0!==t?t:s.getDefaultTransition())&&void 0!==n?n:zo,p=s.getProps().onLayoutAnimationComplete,h=!o.targetLayout||!lo(o.targetLayout,f)||c,m=!u&&c;if((null===(r=o.resumeFrom)||void 0===r?void 0:r.instance)||m||u&&(h||!o.currentAnimation)){o.resumeFrom&&(o.resumingFrom=o.resumeFrom,o.resumingFrom.resumingFrom=void 0),o.setAnimationOrigin(l,m);var v=N(N({},yr(d,"layout")),{onComplete:p});s.shouldReduceMotion&&(v.delay=0,v.type=!1),o.startAnimation(v)}else u||0!==o.animationProgress||o.finishAnimation(),o.isLead()&&(null===(a=(i=o.options).onExitComplete)||void 0===a||a.call(i));o.targetLayout=f}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,q.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach(No))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var o=0;o<this.path.length;o++){var i=this.path[o];i.shouldResetTransform=!0,i.updateScroll()}var a=this.options,l=a.layoutId,s=a.layout;if(void 0!==l||s){var u=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==u?void 0:u(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Po);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Fo),this.potentialNodes.clear()),this.nodes.forEach(To),this.nodes.forEach(Co),this.nodes.forEach(So),this.clearAllSnapshots(),G.update(),G.preRender(),G.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(Oo),this.sharedNodes.forEach(Ro)},e.prototype.scheduleUpdateProjection=function(){J.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;J.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));Vo(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();Vo(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.scroll=r(this.instance))},e.prototype.resetTransform=function(){var e;if(o){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!ao(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,i=null==r?void 0:r(this.latestValues,""),a=i!==this.prevTransformTemplateValue;t&&(n||Mr(this.latestValues)||a)&&(o(this.instance,i),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(zr(t.x,n.x),zr(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};Tr(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],o=r.scroll,i=r.options;r!==this.root&&o&&i.layoutScroll&&(zr(t.x,o.x),zr(t.y,o.y))}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};Tr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];!t&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Ur(n,{x:-o.scroll.x,y:-o.scroll.y}),Mr(o.latestValues)&&Ur(n,o.latestValues)}return Mr(this.latestValues)&&Ur(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};Tr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];if(o.instance&&Mr(o.latestValues)){_r(o.latestValues)&&o.updateSnapshot();var i={x:{min:0,max:0},y:{min:0,max:0}};Tr(i,o.measure()),oo(n,o.latestValues,null===(t=o.snapshot)||void 0===t?void 0:t.layout,i)}}return Mr(this.latestValues)&&oo(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=N(N(N({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,o=this.options,i=o.layout,a=o.layoutId;this.layout&&(i||a)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Jr(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),Tr(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,Kr(t.x,n.x,r.x),Kr(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):Tr(this.target,this.layout.actual),Dr(this.target,this.targetDelta)):Tr(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Jr(this.relativeTargetOrigin,this.target,this.relativeParent.target),Tr(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Mr(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var o=this.getLead();Tr(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var o,i;void 0===r&&(r=!1);var a=n.length;if(a){var l,s;t.x=t.y=1;for(var u=0;u<a;u++)s=(l=n[u]).projectionDelta,"contents"!==(null===(i=null===(o=l.instance)||void 0===o?void 0:o.style)||void 0===i?void 0:i.display)&&(r&&l.options.layoutScroll&&l.scroll&&l!==l.root&&Ur(e,{x:-l.scroll.x,y:-l.scroll.y}),s&&(t.x*=s.x.scale,t.y*=s.y.scale,Dr(e,s)),r&&Mr(l.latestValues)&&Ur(e,l.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);var i=o.target;if(i){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var a=this.treeScale.x,l=this.treeScale.y,s=this.projectionTransform;Qr(this.projectionDelta,this.layoutCorrected,i,this.latestValues),this.projectionTransform=co(this.projectionDelta,this.treeScale),this.projectionTransform===s&&this.treeScale.x===a&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",i))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,r=this;void 0===t&&(t=!1);var o=this.snapshot,i=(null==o?void 0:o.latestValues)||{},a=N({},this.latestValues),l={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var s={x:{min:0,max:0},y:{min:0,max:0}},u=null==o?void 0:o.isShared,c=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,f=Boolean(u&&!c&&!0===this.options.crossfade&&!this.path.some(Do));this.animationProgress=0,this.mixTargetDelta=function(t){var n,o,d,p,h,m=t/1e3;jo(l.x,e.x,m),jo(l.y,e.y,m),r.setTargetDelta(l),r.relativeTarget&&r.relativeTargetOrigin&&r.layout&&(null===(n=r.relativeParent)||void 0===n?void 0:n.layout)&&(Jr(s,r.layout.actual,r.relativeParent.layout.actual),o=r.relativeTarget,d=r.relativeTargetOrigin,p=s,h=m,Io(o.x,d.x,p.x,h),Io(o.y,d.y,p.y,h)),u&&(r.animationValues=a,function(e,t,n,r,o,i){var a,l,s,u;o?(e.opacity=ut(0,null!==(a=n.opacity)&&void 0!==a?a:1,Cr(r)),e.opacityExit=ut(null!==(l=t.opacity)&&void 0!==l?l:1,0,Sr(r))):i&&(e.opacity=ut(null!==(s=t.opacity)&&void 0!==s?s:1,null!==(u=n.opacity)&&void 0!==u?u:1,r));for(var c=0;c<xr;c++){var f="border".concat(wr[c],"Radius"),d=kr(t,f),p=kr(n,f);void 0===d&&void 0===p||(d||(d=0),p||(p=0),0===d||0===p||Ar(d)===Ar(p)?(e[f]=Math.max(ut(Er(d),Er(p),r),0),(Ut.test(p)||Ut.test(d))&&(e[f]+="%")):e[f]=p)}(t.rotate||n.rotate)&&(e.rotate=ut(t.rotate||0,n.rotate||0,r))}(a,i,r.latestValues,m,f,c)),r.root.scheduleUpdateProjection(),r.scheduleRender(),r.animationProgress=m},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,r=this;null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(q.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=J.update((function(){Ao.hasAnimatedSinceResize=!0,r.currentAnimation=function(e,t,n){void 0===n&&(n={});var r=vt(0)?0:mt(0);return br("",r,1e3,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}(0,0,N(N({},e),{onUpdate:function(t){var n;r.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),r.completeAnimation()}})),r.resumingFrom&&(r.resumingFrom.currentAnimation=r.currentAnimation),r.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,o=e.latestValues;t&&n&&r&&(Tr(t,n),Ur(t,o),Qr(this.projectionDeltaWithTransform,this.layoutCorrected,t,o))},e.prototype.registerSharedNode=function(e,t){var n,r,o;this.sharedNodes.has(e)||this.sharedNodes.set(e,new so),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(o=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===o?void 0:o.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,o=t.preserveFollowOpacity,i=this.getStack();i&&i.promote(this,o),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<po.length;r++){var o="rotate"+po[r];e.getStaticValue(o)&&(t=!0,n[o]=e.getStaticValue(o),e.setStaticValue(o,0))}if(t){for(var o in null==e||e.syncRender(),n)e.setStaticValue(o,n[o]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,o,i,a;void 0===e&&(e={});var l={};if(!this.instance||this.isSVG)return l;if(!this.isVisible)return{visibility:"hidden"};l.visibility="";var s=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=Eo(e.pointerEvents)||"",l.transform=s?s(this.latestValues,""):"none",l;var u=this.getLead();if(!this.projectionDelta||!this.layout||!u.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=Eo(e.pointerEvents)||""),this.hasProjected&&!Mr(this.latestValues)&&(c.transform=s?s({},""):"none",this.hasProjected=!1),c}var f=u.animationValues||u.latestValues;this.applyTransformsToTarget(),l.transform=co(this.projectionDeltaWithTransform,this.treeScale,f),s&&(l.transform=s(f,l.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in l.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),u.animationValues?l.opacity=u===this?null!==(o=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:l.opacity=u===this?null!==(i=f.opacity)&&void 0!==i?i:"":null!==(a=f.opacityExit)&&void 0!==a?a:0,uo)if(void 0!==f[m]){var v=uo[m],g=v.correct,y=v.applyTo,b=g(f[m],u);if(y)for(var w=y.length,x=0;x<w;x++)l[y[x]]=b;else l[m]=b}return this.options.layoutId&&(l.pointerEvents=u===this?Eo(e.pointerEvents)||"":"none"),l},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(Po),this.root.sharedNodes.clear()},e}()}function Co(e){e.updateLayout()}function So(e){var t,n,r,o,i=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&i&&e.hasListeners("didUpdate")){var a=e.layout,l=a.actual,s=a.measured;"size"===e.options.animationType?fo((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=qr(t);t.min=l[e].min,t.max=t.min+n})):"position"===e.options.animationType&&fo((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=qr(l[e]);t.max=t.min+n}));var u={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};Qr(u,l,i.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};i.isShared?Qr(c,e.applyTransform(s,!0),i.measured):Qr(c,l,i.layout);var f=!ao(u),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};Jr(v,i.layout,h.layout);var g={x:{min:0,max:0},y:{min:0,max:0}};Jr(g,l,m.actual),lo(v,g)||(d=!0)}}e.notifyListeners("didUpdate",{layout:l,snapshot:i,delta:c,layoutDelta:u,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(o=(r=e.options).onExitComplete)||void 0===o||o.call(r));e.options.transition=void 0}function Oo(e){e.clearSnapshot()}function Po(e){e.clearMeasurements()}function To(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function Lo(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function _o(e){e.resolveTargetDelta()}function Mo(e){e.calcProjection()}function No(e){e.resetRotation()}function Ro(e){e.removeLeadSnapshot()}function jo(e,t,n){e.translate=ut(t.translate,0,n),e.scale=ut(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Io(e,t,n,r){e.min=ut(t.min,n.min,r),e.max=ut(t.max,n.max,r)}function Do(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var zo={duration:.45,ease:[.4,0,.1,1]};function Fo(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var o=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));o&&e.mount(o,!0)}function Bo(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function Vo(e){Bo(e.x),Bo(e.y)}var Uo=1,Wo=(0,e.createContext)({}),Ho=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return M(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(e.Component);function $o(t){var n=t.preloadedFeatures,r=t.createVisualElement,o=t.projectionNodeConstructor,i=t.useRender,a=t.useVisualState,l=t.Component;return n&&function(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?Ye.projectionNodeConstructor=e[t]:Ye[t].Component=e[t])}(n),(0,e.forwardRef)((function(t,n){var s=function(t){var n,r=t.layoutId,o=null===(n=(0,e.useContext)(se))||void 0===n?void 0:n.id;return o&&void 0!==r?o+"-"+r:r}(t);t=N(N({},t),{layoutId:s});var u=(0,e.useContext)(Qe),c=null,f=function(t){var n=function(e,t){if(at(e)){var n=e.initial,r=e.animate;return{initial:!1===n||rt(n)?n:void 0,animate:rt(r)?r:void 0}}return!1!==e.inherit?t:{}}(t,(0,e.useContext)(Ke)),r=n.initial,o=n.animate;return(0,e.useMemo)((function(){return{initial:r,animate:o}}),[st(r),st(o)])}(t),d=u.isStatic?void 0:ne((function(){if(Ao.hasEverUpdated)return Uo++})),p=a(t,u.isStatic);return!u.isStatic&&ue&&(f.visualElement=et(l,p,N(N({},u),t),r),function(t,n,r,o){var i,a=n.layoutId,l=n.layout,s=n.drag,u=n.dragConstraints,c=n.layoutScroll,f=(0,e.useContext)(Wo);o&&r&&!(null==r?void 0:r.projection)&&(r.projection=new o(t,r.getLatestValues(),null===(i=r.parent)||void 0===i?void 0:i.projection),r.projection.setOptions({layoutId:a,layout:l,alwaysMeasureLayout:Boolean(s)||u&&tt(u),visualElement:r,scheduleRender:function(){return r.scheduleRender()},animationType:"string"==typeof l?l:"both",initialPromotionConfig:f,layoutScroll:c}))}(d,t,f.visualElement,o||Ye.projectionNodeConstructor),c=function(t,n,r){var o=[];if((0,e.useContext)(qe),!n)return null;for(var i=0;i<Xe;i++){var a=Ge[i],l=Ye[a],s=l.isEnabled,u=l.Component;s(t)&&u&&o.push(e.createElement(u,N({key:a},t,{visualElement:n})))}return o}(t,f.visualElement)),e.createElement(Ho,{visualElement:f.visualElement,props:N(N({},u),t)},c,e.createElement(Ke.Provider,{value:f},i(l,t,d,function(t,n,r){return(0,e.useCallback)((function(e){var o;e&&(null===(o=t.mount)||void 0===o||o.call(t,e)),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):tt(r)&&(r.current=e))}),[n])}(p,f.visualElement,n),p,u.isStatic,f.visualElement)))}))}function Yo(e){function t(t,n){return void 0===n&&(n={}),$o(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var qo=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function Go(e){return"string"==typeof e&&!e.includes("-")&&!!(qo.indexOf(e)>-1||/[A-Z]/.test(e))}function Xo(e,t){var n=t.layout,r=t.layoutId;return go(e)||bo(e)||(n||void 0!==r)&&(!!uo[e]||"opacity"===e)}var Qo={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Ko(e){return e.startsWith("--")}var Zo=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function Jo(e,t,n,r){var o,i=e.style,a=e.vars,l=e.transform,s=e.transformKeys,u=e.transformOrigin;s.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(Ko(p))a[p]=h;else{var m=cr[p],v=Zo(h,m);if(go(p)){if(c=!0,l[p]=v,s.push(p),!d)continue;h!==(null!==(o=m.default)&&void 0!==o?o:0)&&(d=!1)}else bo(p)?(u[p]=v,f=!0):i[p]=v}}c?i.transform=function(e,t,n,r){var o=e.transform,i=e.transformKeys,a=t.enableHardwareAcceleration,l=void 0===a||a,s=t.allowTransformNone,u=void 0===s||s,c="";i.sort(mo);for(var f=!1,d=i.length,p=0;p<d;p++){var h=i[p];c+="".concat(Qo[h]||h,"(").concat(o[h],") "),"z"===h&&(f=!0)}return!f&&l?c+="translateZ(0)":c=c.trim(),r?c=r(o,n?"":c):u&&n&&(c="none"),c}(e,n,d,r):r?i.transform=r({},""):!t.transform&&i.transform&&(i.transform="none"),f&&(i.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,i=e.originZ,a=void 0===i?0:i;return"".concat(n," ").concat(o," ").concat(a)}(u))}function ei(e,t,n){for(var r in t)vt(t[r])||Xo(r,n)||(e[r]=t[r])}function ti(t,n,r){var o={},i=function(t,n,r){var o={};return ei(o,t.style||{},t),Object.assign(o,function(t,n,r){var o=t.transformTemplate;return(0,e.useMemo)((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};Jo(e,n,{enableHardwareAcceleration:!r},o);var t=e.style;return N(N({},e.vars),t)}),[n])}(t,n,r)),t.transformValues&&(o=t.transformValues(o)),o}(t,n,r);return Boolean(t.drag)&&!1!==t.dragListener&&(o.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===t.drag?"none":"pan-".concat("x"===t.drag?"y":"x")),o.style=i,o}var ni=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function ri(e){return ni.has(e)}var oi,ii=function(e){return!ri(e)};try{(oi=require("@emotion/is-prop-valid").default)&&(ii=function(e){return e.startsWith("on")?!ri(e):oi(e)})}catch(e){}function ai(e,t,n){return"string"==typeof e?e:Wt.transform(t+n*e)}var li={offset:"stroke-dashoffset",array:"stroke-dasharray"},si={offset:"strokeDashoffset",array:"strokeDasharray"};function ui(e,t,n,r){var o=t.attrX,i=t.attrY,a=t.originX,l=t.originY,s=t.pathLength,u=t.pathSpacing,c=void 0===u?1:u,f=t.pathOffset,d=void 0===f?0:f;Jo(e,R(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,r),e.attrs=e.style,e.style={};var p=e.attrs,h=e.style,m=e.dimensions;p.transform&&(m&&(h.transform=p.transform),delete p.transform),m&&(void 0!==a||void 0!==l||h.transform)&&(h.transformOrigin=function(e,t,n){var r=ai(t,e.x,e.width),o=ai(n,e.y,e.height);return"".concat(r," ").concat(o)}(m,void 0!==a?a:.5,void 0!==l?l:.5)),void 0!==o&&(p.x=o),void 0!==i&&(p.y=i),void 0!==s&&function(e,t,n,r,o){void 0===n&&(n=1),void 0===r&&(r=0),void 0===o&&(o=!0),e.pathLength=1;var i=o?li:si;e[i.offset]=Wt.transform(-r);var a=Wt.transform(t),l=Wt.transform(n);e[i.array]="".concat(a," ").concat(l)}(p,s,c,d,!1)}var ci=function(){return N(N({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function fi(t,n){var r=(0,e.useMemo)((function(){var e=ci();return ui(e,n,{enableHardwareAcceleration:!1},t.transformTemplate),N(N({},e.attrs),{style:N({},e.style)})}),[n]);if(t.style){var o={};ei(o,t.style,t),r.style=N(N({},o),r.style)}return r}function di(t){return void 0===t&&(t=!1),function(n,r,o,i,a,l){var s=a.latestValues,u=(Go(n)?fi:ti)(r,s,l),c=function(e,t,n){var r={};for(var o in e)(ii(o)||!0===n&&ri(o)||!t&&!ri(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof n,t),f=N(N(N({},c),u),{ref:i});return o&&(f["data-projection-id"]=o),(0,e.createElement)(n,f)}}var pi=/([a-z])([A-Z])/g,hi=function(e){return e.replace(pi,"$1-$2").toLowerCase()};function mi(e,t,n,r){var o=t.style,i=t.vars;for(var a in Object.assign(e.style,o,r&&r.getProjectionStyles(n)),i)e.style.setProperty(a,i[a])}var vi=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function gi(e,t){for(var n in mi(e,t),t.attrs)e.setAttribute(vi.has(n)?n:hi(n),t.attrs[n])}function yi(e){var t=e.style,n={};for(var r in t)(vt(t[r])||Xo(r,e))&&(n[r]=t[r]);return n}function bi(e){var t=yi(e);for(var n in e)vt(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function wi(e){return"object"==typeof e&&"function"==typeof e.start}function xi(e,t,n,r){var o=e.scrapeMotionValuesFromProps,i=e.createRenderState,a=e.onMount,l={latestValues:Ai(t,n,r,o),renderState:i()};return a&&(l.mount=function(e){return a(t,e,l)}),l}var Ei=function(t){return function(n,r){var o=(0,e.useContext)(Ke),i=(0,e.useContext)(te);return r?xi(t,n,o,i):ne((function(){return xi(t,n,o,i)}))}};function Ai(e,t,n,r){var o={},i=!1===(null==n?void 0:n.initial),a=r(e);for(var l in a)o[l]=Eo(a[l]);var s=e.initial,u=e.animate,c=at(e),f=lt(e);t&&f&&!c&&!1!==e.inherit&&(null!=s||(s=t.initial),null!=u||(u=t.animate));var d=i||!1===s,p=d?u:s;return p&&"boolean"!=typeof p&&!wi(p)&&(Array.isArray(p)?p:[p]).forEach((function(t){var n=ot(e,t);if(n){var r=n.transitionEnd;n.transition;var i=R(n,["transitionEnd","transition"]);for(var a in i){var l=i[a];Array.isArray(l)&&(l=l[d?l.length-1:0]),null!==l&&(o[a]=l)}for(var a in r)o[a]=r[a]}})),o}var ki,Ci={useVisualState:Ei({scrapeMotionValuesFromProps:bi,createRenderState:ci,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}ui(r,o,{enableHardwareAcceleration:!1},e.transformTemplate),gi(t,r)}})},Si={useVisualState:Ei({scrapeMotionValuesFromProps:yi,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function Oi(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function Pi(t,n,r,o){(0,e.useEffect)((function(){var e=t.current;if(r&&e)return Oi(e,n,r,o)}),[t,n,r,o])}function Ti(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Li(e){return!!e.touches}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.InView="whileInView",e.Exit="exit"}(ki||(ki={}));var _i={pageX:0,pageY:0};function Mi(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||_i;return{x:n[t+"X"],y:n[t+"Y"]}}function Ni(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Ri(e,t){return void 0===t&&(t="page"),{point:Li(e)?Mi(e,t):Ni(e,t)}}var ji=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Ri(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},Ii={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Di={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function zi(e){return ue&&null===window.onpointerdown?e:ue&&null===window.ontouchstart?Di[e]:ue&&null===window.onmousedown?Ii[e]:e}function Fi(e,t,n,r){return Oi(e,zi(t),ji(n,"pointerdown"===t),r)}function Bi(e,t,n,r){return Pi(e,zi(t),n&&ji(n,"pointerdown"===t),r)}function Vi(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Ui=Vi("dragHorizontal"),Wi=Vi("dragVertical");function Hi(e){var t=!1;if("y"===e)t=Wi();else if("x"===e)t=Ui();else{var n=Ui(),r=Wi();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function $i(){var e=Hi(!0);return!e||(e(),!1)}function Yi(e,t,n){return function(r,o){var i;Ti(r)&&!$i()&&(null===(i=e.animationState)||void 0===i||i.setActive(ki.Hover,t),null==n||n(r,o))}}var qi=function(e,t){return!!t&&(e===t||qi(e,t.parentElement))},Gi=new WeakMap,Xi=new WeakMap,Qi=function(e){var t;null===(t=Gi.get(e.target))||void 0===t||t(e)},Ki=function(e){e.forEach(Qi)};var Zi={some:0,all:1};function Ji(t,n,r,o){var i=o.root,a=o.margin,l=o.amount,s=void 0===l?"some":l,u=o.once;(0,e.useEffect)((function(){if(t){var e={root:null==i?void 0:i.current,rootMargin:a,threshold:"number"==typeof s?s:Zi[s]};return function(e,t,n){var r=function(e){var t=e.root,n=R(e,["root"]),r=t||document;Xi.has(r)||Xi.set(r,{});var o=Xi.get(r),i=JSON.stringify(n);return o[i]||(o[i]=new IntersectionObserver(Ki,N({root:t},n))),o[i]}(t);return Gi.set(e,n),r.observe(e),function(){Gi.delete(e),r.unobserve(e)}}(r.getInstance(),e,(function(e){var t,o=e.isIntersecting;if(n.isInView!==o&&(n.isInView=o,!u||o||!n.hasEnteredView)){o&&(n.hasEnteredView=!0),null===(t=r.animationState)||void 0===t||t.setActive(ki.InView,o);var i=r.getProps(),a=o?i.onViewportEnter:i.onViewportLeave;null==a||a(e)}}))}}),[t,i,a,s])}function ea(t,n,r,o){var i=o.fallback,a=void 0===i||i;(0,e.useEffect)((function(){t&&a&&requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var t=r.getProps().onViewportEnter;null==t||t(null),null===(e=r.animationState)||void 0===e||e.setActive(ki.InView,!0)}))}),[t])}var ta=function(e){return function(t){return e(t),null}},na={inView:ta((function(t){var n=t.visualElement,r=t.whileInView,o=t.onViewportEnter,i=t.onViewportLeave,a=t.viewport,l=void 0===a?{}:a,s=(0,e.useRef)({hasEnteredView:!1,isInView:!1}),u=Boolean(r||o||i);l.once&&s.current.hasEnteredView&&(u=!1),("undefined"==typeof IntersectionObserver?ea:Ji)(u,s.current,n,l)})),tap:ta((function(t){var n=t.onTap,r=t.onTapStart,o=t.onTapCancel,i=t.whileTap,a=t.visualElement,l=n||r||o||i,s=(0,e.useRef)(!1),u=(0,e.useRef)(null);function c(){var e;null===(e=u.current)||void 0===e||e.call(u),u.current=null}function f(){var e;return c(),s.current=!1,null===(e=a.animationState)||void 0===e||e.setActive(ki.Tap,!1),!$i()}function d(e,t){f()&&(qi(a.getInstance(),e.target)?null==n||n(e,t):null==o||o(e,t))}function p(e,t){f()&&(null==o||o(e,t))}Bi(a,"pointerdown",l?function(e,t){var n;c(),s.current||(s.current=!0,u.current=dn(Fi(window,"pointerup",d),Fi(window,"pointercancel",p)),null===(n=a.animationState)||void 0===n||n.setActive(ki.Tap,!0),null==r||r(e,t))}:void 0),fe(c)})),focus:ta((function(e){var t=e.whileFocus,n=e.visualElement;Pi(n,"focus",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(ki.Focus,!0)}:void 0),Pi(n,"blur",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(ki.Focus,!1)}:void 0)})),hover:ta((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,o=e.visualElement;Bi(o,"pointerenter",t||r?Yi(o,!0,t):void 0),Bi(o,"pointerleave",n||r?Yi(o,!1,n):void 0)}))};function ra(){var t=(0,e.useContext)(te);if(null===t)return[!0,null];var n=t.isPresent,r=t.onExitComplete,o=t.register,i=ie();return(0,e.useEffect)((function(){return o(i)}),[]),!n&&r?[!1,function(){return null==r?void 0:r(i)}]:[!0]}function oa(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var ia=function(e){return function(t){return t.test(e)}},aa=[_t,Wt,Ut,Vt,$t,Ht,{test:function(e){return"auto"===e},parse:function(e){return e}}],la=function(e){return aa.find(ia(e))},sa=I(I([],j(aa),!1),[tn,un],!1),ua=function(e){return sa.find(ia(e))};function ca(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,mt(n))}function fa(e,t){if(t)return(t[e]||t.default||t).from}function da(e,t,n){var r;void 0===n&&(n={});var o=it(e,t,n.custom),i=(o||{}).transition,a=void 0===i?e.getDefaultTransition()||{}:i;n.transitionOverride&&(a=n.transitionOverride);var l=o?function(){return pa(e,o,n)}:function(){return Promise.resolve()},s=(null===(r=e.variantChildren)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var o=a.delayChildren,i=void 0===o?0:o,l=a.staggerChildren,s=a.staggerDirection;return function(e,t,n,r,o,i){void 0===n&&(n=0),void 0===r&&(r=0),void 0===o&&(o=1);var a=[],l=(e.variantChildren.size-1)*r,s=1===o?function(e){return void 0===e&&(e=0),e*r}:function(e){return void 0===e&&(e=0),l-e*r};return Array.from(e.variantChildren).sort(ha).forEach((function(e,r){a.push(da(e,t,N(N({},i),{delay:n+s(r)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(a)}(e,t,i+r,l,s,n)}:function(){return Promise.resolve()},u=a.when;if(u){var c=j("beforeChildren"===u?[l,s]:[s,l],2),f=c[0],d=c[1];return f().then(d)}return Promise.all([l(),s(n.delay)])}function pa(e,t,n){var r,o=void 0===n?{}:n,i=o.delay,a=void 0===i?0:i,l=o.transitionOverride,s=o.type,u=e.makeTargetAnimatable(t),c=u.transition,f=void 0===c?e.getDefaultTransition():c,d=u.transitionEnd,p=R(u,["transition","transitionEnd"]);l&&(f=l);var h=[],m=s&&(null===(r=e.animationState)||void 0===r?void 0:r.getState()[s]);for(var v in p){var g=e.getValue(v),y=p[v];if(!(!g||void 0===y||m&&ma(m,v))){var b=N({delay:a},f);e.shouldReduceMotion&&go(v)&&(b=N(N({},b),{type:!1,delay:0}));var w=br(v,g,y,b);h.push(w)}}return Promise.all(h).then((function(){d&&function(e,t){var n=it(e,t),r=n?e.makeTargetAnimatable(n,!1):{},o=r.transitionEnd,i=void 0===o?{}:o;r.transition;var a=R(r,["transitionEnd","transition"]);for(var l in a=N(N({},a),i))ca(e,l,hr(a[l]))}(e,d)}))}function ha(e,t){return e.sortNodePosition(t)}function ma(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}var va=[ki.Animate,ki.InView,ki.Focus,ki.Hover,ki.Tap,ki.Drag,ki.Exit],ga=I([],j(va),!1).reverse(),ya=va.length;function ba(e){var t,n=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return function(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var o=t.map((function(t){return da(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=da(e,t,n);else{var i="function"==typeof t?it(e,t,n.custom):t;r=pa(e,i,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}(e,n,r)})))}}(e),r=((t={})[ki.Animate]=wa(!0),t[ki.InView]=wa(),t[ki.Hover]=wa(),t[ki.Tap]=wa(),t[ki.Drag]=wa(),t[ki.Focus]=wa(),t[ki.Exit]=wa(),t),o={},i=!0,a=function(t,n){var r=it(e,n);if(r){r.transition;var o=r.transitionEnd,i=R(r,["transition","transitionEnd"]);t=N(N(N({},t),i),o)}return t};function l(t,l){for(var s,u=e.getProps(),c=e.getVariantContext(!0)||{},f=[],d=new Set,p={},h=1/0,m=function(n){var o=ga[n],m=r[o],v=null!==(s=u[o])&&void 0!==s?s:c[o],g=rt(v),y=o===l?m.isActive:null;!1===y&&(h=n);var b=v===c[o]&&v!==u[o]&&g;if(b&&i&&e.manuallyAnimateOnMount&&(b=!1),m.protectedKeys=N({},p),!m.isActive&&null===y||!v&&!m.prevProp||wi(v)||"boolean"==typeof v)return"continue";var w=function(e,t){return"string"==typeof t?t!==e:!!nt(t)&&!oa(t,e)}(m.prevProp,v),x=w||o===l&&m.isActive&&!b&&g||n>h&&g,E=Array.isArray(v)?v:[v],A=E.reduce(a,{});!1===y&&(A={});var k=m.prevResolvedValues,C=void 0===k?{}:k,S=N(N({},C),A),O=function(e){x=!0,d.delete(e),m.needsAnimating[e]=!0};for(var P in S){var T=A[P],L=C[P];p.hasOwnProperty(P)||(T!==L?Jn(T)&&Jn(L)?!oa(T,L)||w?O(P):m.protectedKeys[P]=!0:void 0!==T?O(P):d.add(P):void 0!==T&&d.has(P)?O(P):m.protectedKeys[P]=!0)}m.prevProp=v,m.prevResolvedValues=A,m.isActive&&(p=N(N({},p),A)),i&&e.blockInitialAnimation&&(x=!1),x&&!b&&f.push.apply(f,I([],j(E.map((function(e){return{animation:e,options:N({type:o},t)}}))),!1))},v=0;v<ya;v++)m(v);if(o=N({},p),d.size){var g={};d.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(g[t]=n)})),f.push({animation:g})}var y=Boolean(f.length);return i&&!1===u.initial&&!e.manuallyAnimateOnMount&&(y=!1),i=!1,y?n(f):Promise.resolve()}return{isAnimated:function(e){return void 0!==o[e]},animateChanges:l,setActive:function(t,n,o){var i;return r[t].isActive===n?Promise.resolve():(null===(i=e.variantChildren)||void 0===i||i.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n,l(o,t))},setAnimateFunction:function(t){n=t(e)},getState:function(){return r}}}function wa(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var xa={animation:ta((function(t){var n=t.visualElement,r=t.animate;n.animationState||(n.animationState=ba(n)),wi(r)&&(0,e.useEffect)((function(){return r.subscribe(n)}),[r])})),exit:ta((function(t){var n=t.custom,r=t.visualElement,o=j(ra(),2),i=o[0],a=o[1],l=(0,e.useContext)(te);(0,e.useEffect)((function(){var e,t;r.isPresent=i;var o=null===(e=r.animationState)||void 0===e?void 0:e.setActive(ki.Exit,!i,{custom:null!==(t=null==l?void 0:l.custom)&&void 0!==t?t:n});!i&&(null==o||o.then(a))}),[i])}))},Ea=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=Ca(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=Yr(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,i=Z().timestamp;r.history.push(N(N({},o),{timestamp:i}));var a=r.handlers,l=a.onStart,s=a.onMove;t||(l&&l(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),s&&s(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=Aa(t,r.transformPagePoint),Ti(e)&&0===e.buttons?r.handlePointerUp(e,t):J.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers,o=n.onEnd,i=n.onSessionEnd,a=Ca(Aa(t,r.transformPagePoint),r.history);r.startEvent&&o&&o(e,a),i&&i(e,a)},!(Li(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var i=Aa(Ri(e),this.transformPagePoint),a=i.point,l=Z().timestamp;this.history=[N(N({},a),{timestamp:l})];var s=t.onSessionStart;s&&s(e,Ca(i,this.history)),this.removeListeners=dn(Fi(window,"pointermove",this.handlePointerMove),Fi(window,"pointerup",this.handlePointerUp),Fi(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),q.update(this.updatePoint)},e}();function Aa(e,t){return t?{point:t(e.point)}:e}function ka(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Ca(e,t){var n=e.point;return{point:n,delta:ka(n,Oa(t)),offset:ka(n,Sa(t)),velocity:Pa(t,.1)}}function Sa(e){return e[0]}function Oa(e){return e[e.length-1]}function Pa(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Oa(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Un(t)));)n--;if(!r)return{x:0,y:0};var i=(o.timestamp-r.timestamp)/1e3;if(0===i)return{x:0,y:0};var a={x:(o.x-r.x)/i,y:(o.y-r.y)/i};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function Ta(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function La(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=j([o,r],2))[0],o=n[1]),{min:r,max:o}}var _a=.35;function Ma(e,t,n){return{min:Na(e,t),max:Na(e,n)}}function Na(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function Ra(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function ja(e,t){return Ra(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var Ia=new WeakMap,Da=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,t){var n=this,r=(void 0===t?{}:t).snapToCursor,o=void 0!==r&&r;!1!==this.visualElement.isPresent&&(this.panSession=new Ea(e,{onSessionStart:function(e){n.stopAnimation(),o&&n.snapToCursor(Ri(e,"page").point)},onStart:function(e,t){var r,o=n.getProps(),i=o.drag,a=o.dragPropagation,l=o.onDragStart;(!i||a||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=Hi(i),n.openGlobalLock))&&(n.isDragging=!0,n.currentDirection=null,n.resolveConstraints(),n.visualElement.projection&&(n.visualElement.projection.isAnimationBlocked=!0,n.visualElement.projection.target=void 0),fo((function(e){var t,r,o=n.getAxisMotionValue(e).get()||0;if(Ut.test(o)){var i=null===(r=null===(t=n.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===r?void 0:r.actual[e];i&&(o=qr(i)*(parseFloat(o)/100))}n.originPoint[e]=o})),null==l||l(e,t),null===(r=n.visualElement.animationState)||void 0===r||r.setActive(ki.Drag,!0))},onMove:function(e,t){var r=n.getProps(),o=r.dragPropagation,i=r.dragDirectionLock,a=r.onDirectionLock,l=r.onDrag;if(o||n.openGlobalLock){var s=t.offset;if(i&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(s),void(null!==n.currentDirection&&(null==a||a(n.currentDirection)));n.updateAxis("x",t.point,s),n.updateAxis("y",t.point,s),n.visualElement.syncRender(),null==l||l(e,t)}},onSessionEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var o=this.getProps().onDragEnd;null==o||o(e,t)}},e.prototype.cancel=function(){var e,t;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(ki.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r,o,i,a,l,s=this.getProps().drag;if(n&&za(e,s,this.currentDirection)){var u=this.getAxisMotionValue(e),c=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(r=c,o=this.constraints[e],i=this.elastic[e],a=o.min,l=o.max,void 0!==a&&r<a?r=i?ut(a,r,i.min):Math.max(r,a):void 0!==l&&r>l&&(r=i?ut(l,r,i.max):Math.min(r,l)),c=r),u.set(c)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,o=(this.visualElement.projection||{}).layout,i=this.constraints;n&&tt(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!o)&&function(e,t){var n=t.top,r=t.left,o=t.bottom,i=t.right;return{x:Ta(e.x,r,i),y:Ta(e.y,n,o)}}(o.actual,n),this.elastic=function(e){return void 0===e&&(e=_a),!1===e?e=0:!0===e&&(e=_a),{x:Ma(e,"left","right"),y:Ma(e,"top","bottom")}}(r),i!==this.constraints&&o&&this.constraints&&!this.hasMutatedConstraints&&fo((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!tt(t))return!1;var r=t.current,o=this.visualElement.projection;if(!o||!o.layout)return!1;var i=function(e,t,n){var r=ja(e,n),o=t.scroll;return o&&(zr(r.x,o.x),zr(r.y,o.y)),r}(r,o.root,this.visualElement.getTransformPagePoint()),a=function(e,t){return{x:La(e.x,t.x),y:La(e.y,t.y)}}(o.layout.actual,i);if(n){var l=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(a));this.hasMutatedConstraints=!!l,l&&(a=Ra(l))}return a},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),r=n.drag,o=n.dragMomentum,i=n.dragElastic,a=n.dragTransition,l=n.dragSnapToOrigin,s=n.onDragTransitionEnd,u=this.constraints||{},c=fo((function(n){var s;if(za(n,r,t.currentDirection)){var c=null!==(s=null==u?void 0:u[n])&&void 0!==s?s:{};l&&(c={min:0,max:0});var f=i?200:1e6,d=i?40:1e7,p=N(N({type:"inertia",velocity:o?e[n]:0,bounceStiffness:f,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10},a),c);return t.startAxisValueAnimation(n,p)}}));return Promise.all(c).then(s)},e.prototype.startAxisValueAnimation=function(e,t){return br(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;fo((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;fo((function(n){if(za(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,o=t.getAxisMotionValue(n);if(r&&r.layout){var i=r.layout.actual[n],a=i.min,l=i.max;o.set(e[n]-ut(a,l,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,o=n.dragConstraints,i=this.visualElement.projection;if(tt(o)&&i&&this.constraints){this.stopAnimation();var a={x:0,y:0};fo((function(e){var n=t.getAxisMotionValue(e);if(n){var r=n.get();a[e]=function(e,t){var n=.5,r=qr(e),o=qr(t);return o>r?n=kt(t.min,t.max-r,e.min):r>o&&(n=kt(e.min,e.max-o,t.min)),gt(0,1,n)}({min:r,max:r},t.constraints[e])}}));var l=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=l?l({},""):"none",null===(e=i.root)||void 0===e||e.updateScroll(),i.updateLayout(),this.resolveConstraints(),fo((function(e){if(za(e,r,null)){var n=t.getAxisMotionValue(e),o=t.constraints[e],i=o.min,l=o.max;n.set(ut(i,l,a[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;Ia.set(this.visualElement,this);var n=Fi(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=function(){tt(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},o=this.visualElement.projection,i=o.addEventListener("measure",r);o&&!o.layout&&(null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout()),r();var a=Oi(window,"resize",(function(){t.scalePositionWithinConstraints()}));return o.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(fo((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){a(),n(),i()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,i=e.dragPropagation,a=void 0!==i&&i,l=e.dragConstraints,s=void 0!==l&&l,u=e.dragElastic,c=void 0===u?_a:u,f=e.dragMomentum,d=void 0===f||f;return N(N({},e),{drag:n,dragDirectionLock:o,dragPropagation:a,dragConstraints:s,dragElastic:c,dragMomentum:d})},e}();function za(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Fa={pan:ta((function(t){var n=t.onPan,r=t.onPanStart,o=t.onPanEnd,i=t.onPanSessionStart,a=t.visualElement,l=n||r||o||i,s=(0,e.useRef)(null),u=(0,e.useContext)(Qe).transformPagePoint,c={onSessionStart:i,onStart:r,onMove:n,onEnd:function(e,t){s.current=null,o&&o(e,t)}};(0,e.useEffect)((function(){null!==s.current&&s.current.updateHandlers(c)})),Bi(a,"pointerdown",l&&function(e){s.current=new Ea(e,c,{transformPagePoint:u})}),fe((function(){return s.current&&s.current.end()}))})),drag:ta((function(t){var n=t.dragControls,r=t.visualElement,o=ne((function(){return new Da(r)}));(0,e.useEffect)((function(){return n&&n.subscribe(o)}),[o,n]),(0,e.useEffect)((function(){return o.addListeners()}),[o])}))},Ba=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"],Va=function(e){var t=e.treeType,n=void 0===t?"":t,r=e.build,o=e.getBaseTarget,i=e.makeTargetAnimatable,a=e.measureViewportBox,l=e.render,s=e.readValueFromInstance,u=e.removeValueFromRenderState,c=e.sortNodePosition,f=e.scrapeMotionValuesFromProps;return function(e,t){var d=e.parent,p=e.props,h=e.presenceId,m=e.blockInitialAnimation,v=e.visualState,g=e.shouldReduceMotion;void 0===t&&(t={});var y,b,w=!1,x=v.latestValues,E=v.renderState,A=function(){var e=Ba.map((function(){return new pt})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Ba.forEach((function(r){var o,i="on"+r,a=e[i];null===(o=t[r])||void 0===o||o.call(t),a&&(t[r]=n[i](a))}))}};return e.forEach((function(e,t){n["on"+Ba[t]]=function(t){return e.add(t)},n["notify"+Ba[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,I([],j(t),!1))}})),n}(),k=new Map,C=new Map,S={},O=N({},x);function P(){y&&w&&(T(),l(y,E,p.style,B.projection))}function T(){r(B,E,x,t,p)}function L(){A.notifyUpdate(x)}function _(e,t){var n=t.onChange((function(t){x[e]=t,p.onUpdate&&J.update(L,!1,!0)})),r=t.onRenderRequest(B.scheduleRender);C.set(e,(function(){n(),r()}))}var M=f(p);for(var R in M){var D=M[R];void 0!==x[R]&&vt(D)&&D.set(x[R],!1)}var z=at(p),F=lt(p),B=N(N({treeType:n,current:null,depth:d?d.depth+1:0,parent:d,children:new Set,presenceId:h,shouldReduceMotion:g,variantChildren:F?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==d?void 0:d.isMounted()),blockInitialAnimation:m,isMounted:function(){return Boolean(y)},mount:function(e){w=!0,y=B.current=e,B.projection&&B.projection.mount(e),F&&d&&!z&&(b=null==d?void 0:d.addVariantChild(B)),k.forEach((function(e,t){return _(t,e)})),null==d||d.children.add(B),B.setProps(p)},unmount:function(){var e;null===(e=B.projection)||void 0===e||e.unmount(),q.update(L),q.render(P),C.forEach((function(e){return e()})),null==b||b(),null==d||d.children.delete(B),A.clearAllListeners(),y=void 0,w=!1},addVariantChild:function(e){var t,n=B.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return c&&n===e.treeType?c(B.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return F?B:null==d?void 0:d.getClosestVariantNode()},getLayoutId:function(){return p.layoutId},getInstance:function(){return y},getStaticValue:function(e){return x[e]},setStaticValue:function(e,t){return x[e]=t},getLatestValues:function(){return x},setVisibility:function(e){B.isVisible!==e&&(B.isVisible=e,B.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),i(B,e,p,t)},measureViewportBox:function(){return a(y,p)},addValue:function(e,t){B.hasValue(e)&&B.removeValue(e),k.set(e,t),x[e]=t.get(),_(e,t)},removeValue:function(e){var t;k.delete(e),null===(t=C.get(e))||void 0===t||t(),C.delete(e),delete x[e],u(e,E)},hasValue:function(e){return k.has(e)},getValue:function(e,t){var n=k.get(e);return void 0===n&&void 0!==t&&(n=mt(t),B.addValue(e,n)),n},forEachValue:function(e){return k.forEach(e)},readValue:function(e){var n;return null!==(n=x[e])&&void 0!==n?n:s(y,e,t)},setBaseTarget:function(e,t){O[e]=t},getBaseTarget:function(e){if(o){var t=o(p,e);if(void 0!==t&&!vt(t))return t}return O[e]}},A),{build:function(){return T(),E},scheduleRender:function(){J.render(P,!1,!0)},syncRender:P,setProps:function(e){(e.transformTemplate||p.transformTemplate)&&B.scheduleRender(),p=e,A.updatePropListeners(e),S=function(e,t,n){var r;for(var o in t){var i=t[o],a=n[o];if(vt(i))e.addValue(o,i);else if(vt(a))e.addValue(o,mt(i));else if(a!==i)if(e.hasValue(o)){var l=e.getValue(o);!l.hasAnimated&&l.set(i)}else e.addValue(o,mt(null!==(r=e.getStaticValue(o))&&void 0!==r?r:i))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}(B,f(p),S)},getProps:function(){return p},getVariant:function(e){var t;return null===(t=p.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return p.transition},getTransformPagePoint:function(){return p.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==d?void 0:d.getVariantContext();if(!z){var t=(null==d?void 0:d.getVariantContext())||{};return void 0!==p.initial&&(t.initial=p.initial),t}for(var n={},r=0;r<Wa;r++){var o=Ua[r],i=p[o];(rt(i)||!1===i)&&(n[o]=i)}return n}});return B}},Ua=I(["initial"],j(va),!1),Wa=Ua.length;function Ha(e){return"string"==typeof e&&e.startsWith("var(--")}var $a=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Ya(e,t,n){void 0===n&&(n=1),'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.');var r=j(function(e){var t=$a.exec(e);if(!t)return[,];var n=j(t,3);return[n[1],n[2]]}(e),2),o=r[0],i=r[1];if(o){var a=window.getComputedStyle(t).getPropertyValue(o);return a?a.trim():Ha(i)?Ya(i,t,n+1):i}}var qa,Ga=new Set(["width","height","top","left","right","bottom","x","y"]),Xa=function(e){return Ga.has(e)},Qa=function(e,t){e.set(t,!1),e.set(t)},Ka=function(e){return e===_t||e===Wt};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(qa||(qa={}));var Za=function(e,t){return parseFloat(e.split(", ")[t])},Ja=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var i=o.match(/^matrix3d\((.+)\)$/);if(i)return Za(i[1],t);var a=o.match(/^matrix\((.+)\)$/);return a?Za(a[1],e):0}},el=new Set(["x","y","z"]),tl=ho.filter((function(e){return!el.has(e)})),nl={width:function(e,t){var n=e.x,r=t.paddingLeft,o=void 0===r?"0":r,i=t.paddingRight,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},height:function(e,t){var n=e.y,r=t.paddingTop,o=void 0===r?"0":r,i=t.paddingBottom,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:Ja(4,13),y:Ja(5,14)};function rl(e,t,n,r){return function(e){return Object.keys(e).some(Xa)}(t)?function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=N({},t),r=N({},r);var o=Object.keys(t).filter(Xa),i=[],a=!1,l=[];if(o.forEach((function(o){var s=e.getValue(o);if(e.hasValue(o)){var u,c=n[o],f=la(c),d=t[o];if(Jn(d)){var p=d.length,h=null===d[0]?1:0;c=d[h],f=la(c);for(var m=h;m<p;m++)u?la(d[m]):(u=la(d[m]))===f||Ka(f)&&Ka(u)}else u=la(d);if(f!==u)if(Ka(f)&&Ka(u)){var v=s.get();"string"==typeof v&&s.set(parseFloat(v)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&u===Wt&&(t[o]=d.map(parseFloat))}else(null==f?void 0:f.transform)&&(null==u?void 0:u.transform)&&(0===c||0===d)?0===c?s.set(u.transform(c)):t[o]=f.transform(d):(a||(i=function(e){var t=[];return tl.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),a=!0),l.push(o),r[o]=void 0!==r[o]?r[o]:t[o],Qa(s,d))}})),l.length){var s=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),i=getComputedStyle(o),a=i.display,l={};"none"===a&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){l[e]=nl[e](r,i)})),t.syncRender();var s=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);Qa(r,l[n]),e[n]=nl[n](s,i)})),e}(t,e,l);return i.length&&i.forEach((function(t){var n=j(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.syncRender(),{target:s,transitionEnd:r}}return{target:t,transitionEnd:r}}(e,t,n,r):{target:t,transitionEnd:r}}var ol={treeType:"dom",readValueFromInstance:function(e,t){if(go(t)){var n=dr(t);return n&&n.default||0}var r,o=(r=e,window.getComputedStyle(r));return(Ko(t)?o.getPropertyValue(t):o[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return ja(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,r){var o=n.transformValues;void 0===r&&(r=!0);var i=t.transition,a=t.transitionEnd,l=R(t,["transition","transitionEnd"]),s=function(e,t,n){var r,o,i={};for(var a in e)i[a]=null!==(r=fa(a,t))&&void 0!==r?r:null===(o=n.getValue(a))||void 0===o?void 0:o.get();return i}(l,i||{},e);if(o&&(a&&(a=o(a)),l&&(l=o(l)),s&&(s=o(s))),r){!function(e,t,n){var r,o,i,a,l=Object.keys(t).filter((function(t){return!e.hasValue(t)})),s=l.length;if(s)for(var u=0;u<s;u++){var c=l[u],f=t[c],d=null;Array.isArray(f)&&(d=f[0]),null===d&&(d=null!==(o=null!==(r=n[c])&&void 0!==r?r:e.readValue(c))&&void 0!==o?o:t[c]),null!=d&&("string"==typeof d&&(/^\-?\d*\.?\d+$/.test(d)||/^0[^.\s]+$/.test(d))?d=parseFloat(d):!ua(d)&&un.test(f)&&(d=pr(c,f)),e.addValue(c,mt(d)),null!==(i=(a=n)[c])&&void 0!==i||(a[c]=d),e.setBaseTarget(c,d))}}(e,l,s);var u=function(e,t,n,r){var o=function(e,t,n){var r,o=R(t,[]),i=e.getInstance();if(!(i instanceof Element))return{target:o,transitionEnd:n};for(var a in n&&(n=N({},n)),e.forEachValue((function(e){var t=e.get();if(Ha(t)){var n=Ya(t,i);n&&e.set(n)}})),o){var l=o[a];if(Ha(l)){var s=Ya(l,i);s&&(o[a]=s,n&&(null!==(r=n[a])&&void 0!==r||(n[a]=l)))}}return{target:o,transitionEnd:n}}(e,t,r);return rl(e,t=o.target,n,r=o.transitionEnd)}(e,l,s,a);a=u.transitionEnd,l=u.target}return N({transition:i,transitionEnd:a},l)},scrapeMotionValuesFromProps:yi,build:function(e,t,n,r,o){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),Jo(t,n,r,o.transformTemplate)},render:mi},il=Va(ol),al=Va(N(N({},ol),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return go(t)?(null===(n=dr(t))||void 0===n?void 0:n.default)||0:(t=vi.has(t)?t:hi(t),e.getAttribute(t))},scrapeMotionValuesFromProps:bi,build:function(e,t,n,r,o){ui(t,n,r,o.transformTemplate)},render:gi})),ll=function(e,t){return Go(e)?al(t,{enableHardwareAcceleration:!1}):il(t,{enableHardwareAcceleration:!0})};function sl(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var ul={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!Wt.test(e))return e;e=parseFloat(e)}var n=sl(e,t.target.x),r=sl(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},cl="_$css",fl={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,o=e,i=e.includes("var("),a=[];i&&(e=e.replace($a,(function(e){return a.push(e),cl})));var l=un.parse(e);if(l.length>5)return o;var s=un.createTransformer(e),u="number"!=typeof l[0]?1:0,c=r.x.scale*n.x,f=r.y.scale*n.y;l[0+u]/=c,l[1+u]/=f;var d=ut(c,f,.5);"number"==typeof l[2+u]&&(l[2+u]/=d),"number"==typeof l[3+u]&&(l[3+u]/=d);var p=s(l);if(i){var h=0;p=p.replace(cl,(function(){var e=a[h];return h++,e}))}return p}},dl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return M(t,e),t.prototype.componentDidMount=function(){var e,t=this,n=this.props,r=n.visualElement,o=n.layoutGroup,i=n.switchLayoutGroup,a=n.layoutId,l=r.projection;e=pl,Object.assign(uo,e),l&&((null==o?void 0:o.group)&&o.group.add(l),(null==i?void 0:i.register)&&a&&i.register(l),l.root.didUpdate(),l.addEventListener("animationComplete",(function(){t.safeToRemove()})),l.setOptions(N(N({},l.options),{onExitComplete:function(){return t.safeToRemove()}}))),Ao.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,o=n.visualElement,i=n.drag,a=n.isPresent,l=o.projection;return l?(l.isPresent=a,i||e.layoutDependency!==r||void 0===r?l.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?l.promote():l.relegate()||J.postRender((function(){var e;(null===(e=l.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,o=t.projection;o&&(o.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(o),(null==r?void 0:r.deregister)&&r.deregister(o))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(e.Component),pl={borderRadius:N(N({},ul),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:ul,borderTopRightRadius:ul,borderBottomLeftRadius:ul,borderBottomRightRadius:ul,boxShadow:fl},hl={measureLayout:function(t){var n=j(ra(),2),r=n[0],o=n[1],i=(0,e.useContext)(se);return e.createElement(dl,N({},t,{layoutGroup:i,switchLayoutGroup:(0,e.useContext)(Wo),isPresent:r,safeToRemove:o}))}},ml=ko({attachResizeListener:function(e,t){return e.addEventListener("resize",t,{passive:!0}),function(){return e.removeEventListener("resize",t)}},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}}}),vl={current:void 0},gl=ko({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!vl.current){var e=new ml(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),vl.current=e}return vl.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"}}),yl=N(N(N(N({},xa),na),Fa),hl),bl=Yo((function(e,t){return function(e,t,n,r,o){var i=t.forwardMotionProps,a=void 0!==i&&i,l=Go(e)?Ci:Si;return N(N({},l),{preloadedFeatures:n,useRender:di(a),createVisualElement:r,projectionNodeConstructor:o,Component:e})}(e,t,yl,ll,gl)}));const wl=function(t){return e.createElement("div",{className:"p6o-load-progress-outer"},e.createElement("div",{className:"p6o-load-progress-inner",style:{width:t.progress?"".concat(100*t.progress,"%"):"0"}}))},xl=function(t){var n,r=t.state.stage;n="LOADING_CONFIG"===r?"Loading configuration data":"LOADING_DATA"===r&&t.state.dataset?"Loading: ".concat(t.state.dataset,"..."):"LOADING_DATA"===r?"Preparing map":"ERROR"===r?"An error occurred (".concat(t.state.cause,")"):"Almost ready!";var o=t.state.nodes||0,i=t.state.edges||0;return e.createElement(bl.div,{className:"p6o-loading",initial:{opacity:1},animate:{opacity:1},transition:{duration:.25},exit:{opacity:0}},e.createElement("div",{className:"p6o-loading-center"},e.createElement("img",{className:"logo-image",src:"startup-logo.svg"}),e.createElement("p",{className:"p6o-loading-stage"},n),e.createElement(wl,{progress:t.state.progress}),e.createElement("p",{className:"p6o-loading-store"},o+i>0?e.createElement(e.Fragment,null,(t.state.nodes||0).toLocaleString("en")," nodes, ",(t.state.edges||0).toLocaleString("en")," edges"):e.createElement(e.Fragment,null," "))),e.createElement("div",{className:"p6o-loading-bottom"},"Peripleo-LaNC v0.1.0"))};function El(e,t){return e===t}function Al(e){return"function"==typeof e?function(){return e}:e}function kl(t,n,r){var o=r&&r.equalityFn||El,i=function(t){var n=(0,e.useState)(Al(t)),r=n[0],o=n[1];return[r,(0,e.useCallback)((function(e){return o(Al(e))}),[])]}(t),a=i[0],l=i[1],s=function(t,n,r){var o=this,i=(0,e.useRef)(null),a=(0,e.useRef)(0),l=(0,e.useRef)(null),s=(0,e.useRef)([]),u=(0,e.useRef)(),c=(0,e.useRef)(),f=(0,e.useRef)(t),d=(0,e.useRef)(!0);f.current=t;var p=!n&&0!==n&&"undefined"!=typeof window;if("function"!=typeof t)throw new TypeError("Expected a function");n=+n||0;var h=!!(r=r||{}).leading,m=!("trailing"in r)||!!r.trailing,v="maxWait"in r,g=v?Math.max(+r.maxWait||0,n):null;(0,e.useEffect)((function(){return d.current=!0,function(){d.current=!1}}),[]);var y=(0,e.useMemo)((function(){var e=function(e){var t=s.current,n=u.current;return s.current=u.current=null,a.current=e,c.current=f.current.apply(n,t)},t=function(e,t){p&&cancelAnimationFrame(l.current),l.current=p?requestAnimationFrame(e):setTimeout(e,t)},r=function(e){if(!d.current)return!1;var t=e-i.current,r=e-a.current;return!i.current||t>=n||t<0||v&&r>=g},y=function(t){return l.current=null,m&&s.current?e(t):(s.current=u.current=null,c.current)},b=function(){var e=Date.now();if(r(e))return y(e);if(d.current){var o=e-i.current,l=e-a.current,s=n-o,u=v?Math.min(s,g-l):s;t(b,u)}},w=function(){for(var f=[],p=0;p<arguments.length;p++)f[p]=arguments[p];var m=Date.now(),g=r(m);if(s.current=f,u.current=o,i.current=m,g){if(!l.current&&d.current)return a.current=i.current,t(b,n),h?e(i.current):c.current;if(v)return t(b,n),e(i.current)}return l.current||t(b,n),c.current};return w.cancel=function(){l.current&&(p?cancelAnimationFrame(l.current):clearTimeout(l.current)),a.current=0,s.current=i.current=u.current=l.current=null},w.isPending=function(){return!!l.current},w.flush=function(){return l.current?y(Date.now()):c.current},w}),[h,v,n,g,m,p]);return y}((0,e.useCallback)((function(e){return l(e)}),[l]),n,r),u=(0,e.useRef)(t);return o(u.current,t)||(s(t),u.current=t),[a,s]}var Cl={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},Sl=e.createContext&&e.createContext(Cl),Ol=function(){return Ol=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ol.apply(this,arguments)};function Pl(t){return t&&t.map((function(t,n){return e.createElement(t.tag,Ol({key:n},t.attr),Pl(t.child))}))}function Tl(t){return function(n){return e.createElement(Ll,Ol({attr:Ol({},t.attr)},n),Pl(t.child))}}function Ll(t){var n=function(n){var r,o=t.attr,i=t.size,a=t.title,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["attr","size","title"]),s=i||n.size||"1em";return n.className&&(r=n.className),t.className&&(r=(r?r+" ":"")+t.className),e.createElement("svg",Ol({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,o,l,{className:r,style:Ol(Ol({color:t.color||n.color},n.style),t.style),height:s,width:s,xmlns:"http://www.w3.org/2000/svg"}),a&&e.createElement("title",null,a),t.children)};return void 0!==Sl?e.createElement(Sl.Consumer,null,(function(e){return n(e)})):n(Cl)}function _l(e){return Tl({tag:"svg",attr:{viewBox:"0 0 24 24"},child:[{tag:"path",attr:{d:"M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"}}]})(e)}const Ml=function(t){var n=(0,e.useRef)();return(0,e.useEffect)((function(){n.current&&n.current.querySelector("input").focus()}),[n.current]),e.createElement(bl.div,{ref:n,className:"p6o-hud-searchpanel",transition:{type:"spring",duration:.4},initial:{opacity:0,width:0},animate:{opacity:1,width:340},exit:{opacity:0,width:0}},e.createElement("input",{value:t.query||"",onChange:function(e){return t.onChange(e.target.value)}}))};function Nl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rl=function(t){var n,r,o=(n=(0,e.useState)(),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Nl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nl(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return e.createElement("div",{className:"p6o-hud"},e.createElement("div",{className:"p6o-magic-button",onClick:function(){return a(!i)}},e.createElement(_l,null)),e.createElement(pe,null,i&&e.createElement(Ml,{query:t.searchQuery,onChange:t.onChangeSearchQuery})))},jl=e.createContext(null);function Il(e){return{longitude:e.center.lng,latitude:e.center.lat,zoom:e.zoom,pitch:e.pitch,bearing:e.bearing,padding:e.padding}}function Dl(e,t){const n=t.viewState||t;let r=!1;if("longitude"in n&&"latitude"in n){const t=e.center;e.center=new t.constructor(n.longitude,n.latitude),r=r||t!==e.center}if("zoom"in n){const t=e.zoom;e.zoom=n.zoom,r=r||t!==e.zoom}if("bearing"in n){const t=e.bearing;e.bearing=n.bearing,r=r||t!==e.bearing}if("pitch"in n){const t=e.pitch;e.pitch=n.pitch,r=r||t!==e.pitch}return n.padding&&!e.isPaddingEqual(n.padding)&&(r=!0,e.padding=n.padding),r}const zl=["type","source","source-layer","minzoom","maxzoom","filter","layout"];function Fl(e){if(!e)return null;if("string"==typeof e)return e;if("toJS"in e&&(e=e.toJS()),!e.layers)return e;const t={};for(const n of e.layers)t[n.id]=n;const n=e.layers.map((e=>{const n=t[e.ref];let r=null;if("interactive"in e&&(r={...e},delete r.interactive),n){r=r||{...e},delete r.ref;for(const e of zl)e in n&&(r[e]=n[e])}return r||e}));return{...e,layers:n}}function Bl(e,t){if(e===t)return!0;if(!e||!t)return!1;if(Array.isArray(e)){if(!Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!Bl(e[n],t[n]))return!1;return!0}if(Array.isArray(t))return!1;if("object"==typeof e&&"object"==typeof t){const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const r of n){if(!t.hasOwnProperty(r))return!1;if(!Bl(e[r],t[r]))return!1}return!0}return!1}const Vl={mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",click:"onClick",dblclick:"onDblClick",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mouseout:"onMouseOut",contextmenu:"onContextMenu",touchstart:"onTouchStart",touchend:"onTouchEnd",touchmove:"onTouchMove",touchcancel:"onTouchCancel"},Ul={movestart:"onMoveStart",move:"onMove",moveend:"onMoveEnd",dragstart:"onDragStart",drag:"onDrag",dragend:"onDragEnd",zoomstart:"onZoomStart",zoom:"onZoom",zoomend:"onZoomEnd",rotatestart:"onRotateStart",rotate:"onRotate",rotateend:"onRotateEnd",pitchstart:"onPitchStart",pitch:"onPitch",pitchend:"onPitchEnd"},Wl={wheel:"onWheel",boxzoomstart:"onBoxZoomStart",boxzoomend:"onBoxZoomEnd",boxzoomcancel:"onBoxZoomCancel",resize:"onResize",load:"onLoad",render:"onRender",idle:"onIdle",remove:"onRemove",data:"onData",styledata:"onStyleData",sourcedata:"onSourceData",error:"onError"},Hl=["minZoom","maxZoom","minPitch","maxPitch","maxBounds","projection","renderWorldCopies"],$l=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch"];class Yl{constructor(e,t,n){this._map=null,this._internalUpdate=!1,this._inRender=!1,this._hoveredFeatures=null,this._deferredEvents={move:!1,zoom:!1,pitch:!1,rotate:!1},this._onEvent=e=>{const t=this.props[Wl[e.type]];t&&t(e)},this._onPointerEvent=e=>{"mousemove"!==e.type&&"mouseout"!==e.type||this._updateHover(e);const t=this.props[Vl[e.type]];if(t){if(this.props.interactiveLayerIds&&"mouseover"!==e.type&&"mouseout"!==e.type){const t=this._hoveredFeatures||this._map.queryRenderedFeatures(e.point,{layers:this.props.interactiveLayerIds});if(!t.length)return;e.features=t}t(e),delete e.features}},this._onCameraEvent=e=>{if(!this._internalUpdate){const t=this.props[Ul[e.type]];t&&t(e)}e.type in this._deferredEvents&&(this._deferredEvents[e.type]=!1)},this._MapClass=e,this.props=t,this._initialize(n)}get map(){return this._map}get transform(){return this._renderTransform}setProps(e){const t=this.props;this.props=e;const n=this._updateSettings(e,t);n&&(this._renderTransform=this._map.transform.clone());const r=this._updateSize(e),o=this._updateViewState(e,!0);this._updateStyle(e,t),this._updateStyleComponents(e,t),this._updateHandlers(e,t),(n||r||o&&!this._map.isMoving())&&this.redraw()}static reuse(e,t){const n=Yl.savedMaps.pop();if(!n)return null;const r=n.map,o=r.getContainer();for(t.className=o.className;o.childNodes.length>0;)t.appendChild(o.childNodes[0]);return r._container=t,e.initialViewState&&n._updateViewState(e.initialViewState,!1),r.resize(),n.setProps({...e,styleDiffing:!1}),r.isStyleLoaded()?r.fire("load"):r.once("styledata",(()=>r.fire("load"))),n}_initialize(e){const{props:t}=this,n={...t,...t.initialViewState,accessToken:t.mapboxAccessToken||ql()||null,container:e,style:Fl(t.mapStyle)},r=n.initialViewState||n.viewState||n;if(Object.assign(n,{center:[r.longitude||0,r.latitude||0],zoom:r.zoom||0,pitch:r.pitch||0,bearing:r.bearing||0}),t.gl){const e=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=()=>(HTMLCanvasElement.prototype.getContext=e,t.gl)}const o=new this._MapClass(n);r.padding&&o.setPadding(r.padding),t.cursor&&(o.getCanvas().style.cursor=t.cursor),this._renderTransform=o.transform.clone();const i=o._render;o._render=e=>{this._inRender=!0,i.call(o,e),this._inRender=!1};const a=o._renderTaskQueue.run;o._renderTaskQueue.run=e=>{a.call(o._renderTaskQueue,e),this._onBeforeRepaint()},o.on("render",(()=>this._onAfterRepaint()));const l=o.fire;o.fire=this._fireEvent.bind(this,l),o.on("resize",(()=>{this._renderTransform.resize(o.transform.width,o.transform.height)})),o.on("styledata",(()=>this._updateStyleComponents(this.props,{}))),o.on("sourcedata",(()=>this._updateStyleComponents(this.props,{})));for(const e in Vl)o.on(e,this._onPointerEvent);for(const e in Ul)o.on(e,this._onCameraEvent);for(const e in Wl)o.on(e,this._onEvent);this._map=o}recycle(){Yl.savedMaps.push(this)}destroy(){this._map.remove()}redraw(){const e=this._map;!this._inRender&&e.style&&(e._frame&&(e._frame.cancel(),e._frame=null),e._render())}_updateSize(e){const{viewState:t}=e;if(t){const e=this._map;if(t.width!==e.transform.width||t.height!==e.transform.height)return e.resize(),!0}return!1}_updateViewState(e,t){if(this._internalUpdate)return!1;const n=this._map,r=this._renderTransform,{zoom:o,pitch:i,bearing:a}=r,l=Dl(r,{...Il(n.transform),...e});if(l&&t){const e=this._deferredEvents;e.move=!0,e.zoom||(e.zoom=o!==r.zoom),e.rotate||(e.rotate=a!==r.bearing),e.pitch||(e.pitch=i!==r.pitch)}return n.isMoving()||Dl(n.transform,e),l}_updateSettings(e,t){const n=this._map;let r=!1;for(const o of Hl)o in e&&!Bl(e[o],t[o])&&(r=!0,n[`set${o[0].toUpperCase()}${o.slice(1)}`](e[o]));return r}_updateStyle(e,t){if(e.cursor!==t.cursor&&(this._map.getCanvas().style.cursor=e.cursor),e.mapStyle!==t.mapStyle){const t={diff:e.styleDiffing};return"localIdeographFontFamily"in e&&(t.localIdeographFontFamily=e.localIdeographFontFamily),this._map.setStyle(Fl(e.mapStyle),t),!0}return!1}_updateStyleComponents(e,t){const n=this._map;let r=!1;return n.style.loaded()&&("light"in e&&!Bl(e.light,t.light)&&(r=!0,n.setLight(e.light)),"fog"in e&&!Bl(e.fog,t.fog)&&(r=!0,n.setFog(e.fog)),"terrain"in e&&!Bl(e.terrain,t.terrain)&&(e.terrain&&!n.getSource(e.terrain.source)||(r=!0,n.setTerrain(e.terrain)))),r}_updateHandlers(e,t){const n=this._map;let r=!1;for(const o of $l){const i=e[o];Bl(i,t[o])||(r=!0,i?n[o].enable(i):n[o].disable())}return r}_updateHover(e){const{props:t}=this;if(t.interactiveLayerIds&&(t.onMouseMove||t.onMouseEnter||t.onMouseLeave)){const n=e.type,r=this._hoveredFeatures?.length>0;let o;if("mousemove"===n)try{o=this._map.queryRenderedFeatures(e.point,{layers:t.interactiveLayerIds})}catch{o=[]}else o=[];const i=o.length>0;!i&&r&&(e.type="mouseleave",this._onPointerEvent(e)),this._hoveredFeatures=o,i&&!r&&(e.type="mouseenter",this._onPointerEvent(e)),e.type=n}else this._hoveredFeatures=null}_fireEvent(e,t,n){const r=this._map,o=r.transform,i="string"==typeof t?t:t.type;return"move"===i&&this._updateViewState(this.props,!1),i in Ul&&("object"==typeof t&&(t.viewState=Il(o)),this._map.isMoving())?(r.transform=this._renderTransform,e.call(r,t,n),r.transform=o,r):(e.call(r,t,n),r)}_onBeforeRepaint(){const e=this._map;this._internalUpdate=!0;for(const t in this._deferredEvents)this._deferredEvents[t]&&e.fire(t);this._internalUpdate=!1;const t=this._map.transform;this._map.transform=this._renderTransform,this._onAfterRepaint=()=>{this._map.transform=t}}}function ql(){let e=null;if("undefined"!=typeof location){const t=/access_token=([^&\/]*)/.exec(location.search);e=t&&t[1]}try{e=e||process.env.MapboxAccessToken}catch{}try{e=e||process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}catch{}return e}Yl.savedMaps=[];const Gl=["setMaxBounds","setMinZoom","setMaxZoom","setMinPitch","setMaxPitch","setRenderWorldCopies","setProjection","setStyle","addSource","removeSource","addLayer","removeLayer","setLayerZoomRange","setFilter","setPaintProperty","setLayoutProperty","setLight","setTerrain","setFog","remove"];function Xl(e,t){if(!e)return null;const n=e.map,r={getMap:()=>n,getCenter:()=>e.transform.center,getZoom:()=>e.transform.zoom,getBearing:()=>e.transform.bearing,getPitch:()=>e.transform.pitch,getPadding:()=>e.transform.padding,getBounds:()=>e.transform.getBounds(),project:n=>e.transform.locationPoint(t.LngLat.convert(n)),unproject:n=>e.transform.pointLocation(t.Point.convert(n))};for(const e of function(e){const t=new Set;let n=e;for(;n;){for(const r of Object.getOwnPropertyNames(n))"_"!==r[0]&&"function"==typeof e[r]&&"fire"!==r&&"setEventedParent"!==r&&t.add(r);n=Object.getPrototypeOf(n)}return Array.from(t)}(n))e in r||Gl.includes(e)||(r[e]=n[e].bind(n));return r}const Ql="undefined"!=typeof document?e.useLayoutEffect:e.useEffect,Kl=["baseApiUrl","maxParallelImageRequests","workerClass","workerCount","workerUrl"],Zl=e.createContext(null),Jl={minZoom:0,maxZoom:22,minPitch:0,maxPitch:60,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,mapStyle:{version:8,sources:{},layers:[]},styleDiffing:!0,projection:"mercator",renderWorldCopies:!0,onError:e=>console.error(e.error),RTLTextPlugin:"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js"},es=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useContext)(jl),[o,i]=(0,e.useState)(null),l=(0,e.useRef)(),{current:s}=(0,e.useRef)({mapLib:null,map:null});(0,e.useEffect)((()=>{const e=t.mapLib;let n,o=!0;return Promise.resolve(e||a.e(613).then(a.t.bind(a,613,23))).then((e=>{if(o){if(e.Map||(e=e.default),!e||!e.Map)throw new Error("Invalid mapLib");if(!e.supported(t))throw new Error("Map is not supported by this browser");!function(e,t){for(const n of Kl)n in t&&(e[n]=t[n]);t.RTLTextPlugin&&e.getRTLTextPluginStatus&&"unavailable"===e.getRTLTextPluginStatus()&&e.setRTLTextPlugin(t.RTLTextPlugin,(e=>{e&&console.error(e)}),!1)}(e,t),t.reuseMaps&&(n=Yl.reuse(t,l.current)),n||(n=new Yl(e.Map,t,l.current)),s.map=n.map,s.mapLib=e,i(n),r?.onMapMount(Xl(n,e),t.id)}})).catch((e=>{t.onError({type:"error",target:null,originalEvent:null,error:e})})),()=>{o=!1,n&&(r?.onMapUnmount(t.id),t.reuseMaps?n.recycle():n.destroy())}}),[]),Ql((()=>{o&&o.setProps(t)})),(0,e.useImperativeHandle)(n,(()=>Xl(o,s.mapLib)),[o]);const u=(0,e.useMemo)((()=>({position:"relative",width:"100%",height:"100%",...t.style})),[t.style]);return e.createElement("div",{id:t.id,ref:l,style:u},o&&e.createElement(Zl.Provider,{value:s},t.children))}));es.displayName="Map",es.defaultProps=Jl;const ts=es,ns=/box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;function rs(e,t){if(!e||!t)return;const n=e.style;for(const e in t){const r=t[e];Number.isFinite(r)&&!ns.test(e)?n[e]=`${r}px`:n[e]=r}}function os(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),i=(0,e.useRef)({props:n});i.current.props=n;const a=(0,e.useMemo)((()=>{let t=!1;e.Children.forEach(n.children,(e=>{e&&(t=!0)}));const r={...n,element:t?document.createElement("div"):null},l=new o.Marker(r).setLngLat([n.longitude,n.latitude]);return l.on("dragstart",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDragStart?.(t)})),l.on("drag",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDrag?.(t)})),l.on("dragend",(e=>{const t=e;t.lngLat=a.getLngLat(),i.current.props.onDragEnd?.(t)})),l}),[]);return(0,e.useEffect)((()=>(a.addTo(r),()=>{a.remove()})),[]),(0,e.useEffect)((()=>{rs(a.getElement(),n.style)}),[n.style]),a.getLngLat().lng===n.longitude&&a.getLngLat().lat===n.latitude||a.setLngLat([n.longitude,n.latitude]),n.offset&&!function(e,t){const n=Array.isArray(e)?e[0]:e?e.x:0,r=Array.isArray(e)?e[1]:e?e.y:0,o=Array.isArray(t)?t[0]:t?t.x:0,i=Array.isArray(t)?t[1]:t?t.y:0;return n===o&&r===i}(a.getOffset(),n.offset)&&a.setOffset(n.offset),a.isDraggable()!==n.draggable&&a.setDraggable(n.draggable),a.getRotation()!==n.rotation&&a.setRotation(n.rotation),a.getRotationAlignment()!==n.rotationAlignment&&a.setRotationAlignment(n.rotationAlignment),a.getPitchAlignment()!==n.pitchAlignment&&a.setPitchAlignment(n.pitchAlignment),a.getPopup()!==n.popup&&a.setPopup(n.popup),(0,t.createPortal)(n.children,a.getElement())}function is(e){return new Set(e?e.trim().split(/\s+/):[])}function as(t,n,r){const o=(0,e.useContext)(Zl),i=(0,e.useMemo)((()=>t(o)),[]);return(0,e.useEffect)((()=>{const{map:e}=o;return e.hasControl(i)||e.addControl(i,(r||n)?.position),()=>{"function"==typeof n&&n(o),e.hasControl(i)&&e.removeControl(i)}}),[]),i}os.defaultProps={draggable:!1,popup:null,rotation:0,rotationAlignment:"auto",pitchAlignment:"auto"},e.memo(os),e.memo((function(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),i=(0,e.useMemo)((()=>document.createElement("div")),[]),a=(0,e.useRef)({props:n});a.current.props=n;const l=(0,e.useMemo)((()=>{const e={...n},t=new o.Popup(e).setLngLat([n.longitude,n.latitude]);return t.on("open",(e=>{a.current.props.onOpen?.(e)})),t.on("close",(e=>{a.current.props.onClose?.(e)})),t}),[]);if((0,e.useEffect)((()=>(l.setDOMContent(i).addTo(r),()=>{l.isOpen()&&l.remove()})),[]),(0,e.useEffect)((()=>{rs(l.getElement(),n.style)}),[n.style]),l.isOpen()&&(l.getLngLat().lng===n.longitude&&l.getLngLat().lat===n.latitude||l.setLngLat([n.longitude,n.latitude]),n.offset&&!Bl(l.options.offset,n.offset)&&l.setOffset(n.offset),l.options.anchor===n.anchor&&l.options.maxWidth===n.maxWidth||(l.options.anchor=n.anchor,l.setMaxWidth(n.maxWidth)),l.options.className!==n.className)){const e=is(l.options.className),t=is(n.className);for(const n of e)t.has(n)||l.removeClassName(n);for(const n of t)e.has(n)||l.addClassName(n);l.options.className=n.className}return(0,t.createPortal)(n.children,i)})),e.memo((function(t){const n=as((({mapLib:e})=>new e.AttributionControl(t)),{position:t.position});return(0,e.useEffect)((()=>{rs(n._container,t.style)}),[t.style]),null})),e.memo((function(t){const n=as((({mapLib:e})=>new e.FullscreenControl({container:t.containerId&&document.getElementById(t.containerId)})),{position:t.position});return(0,e.useEffect)((()=>{rs(n._controlContainer,t.style)}),[t.style]),null}));const ls=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useRef)({props:t}),o=as((({mapLib:e})=>{const n=new e.GeolocateControl(t);return n.on("geolocate",(e=>{r.current.props.onGeolocate?.(e)})),n.on("error",(e=>{r.current.props.onError?.(e)})),n.on("outofmaxbounds",(e=>{r.current.props.onOutOfMaxBounds?.(e)})),n.on("trackuserlocationstart",(e=>{r.current.props.onTrackUserLocationStart?.(e)})),n.on("trackuserlocationend",(e=>{r.current.props.onTrackUserLocationEnd?.(e)})),n}),{position:t.position});return r.current.props=t,(0,e.useImperativeHandle)(n,(()=>({trigger:()=>o.trigger()})),[]),(0,e.useEffect)((()=>{rs(o._container,t.style)}),[t.style]),null}));function ss(t){const n=as((({mapLib:e})=>new e.ScaleControl(t)),{position:t.position});return n.options.unit===t.unit&&n.options.maxWidth===t.maxWidth||(n.options.maxWidth=t.maxWidth,n.setUnit(t.unit)),(0,e.useEffect)((()=>{rs(n._container,t.style)}),[t.style]),null}function us(e,t){if(!e)throw new Error(t)}ls.displayName="GeolocateControl",e.memo(ls),e.memo((function(t){const n=as((({mapLib:e})=>new e.NavigationControl(t)),{position:t.position});return(0,e.useEffect)((()=>{rs(n._container,t.style)}),[t.style]),null})),ss.defaultProps={unit:"metric",maxWidth:100},e.memo(ss);let cs=0;const fs=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),i=(0,e.useMemo)((()=>t.id||"jsx-source-"+cs++),[]);(0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),setTimeout((()=>{n.style&&n.style._loaded&&n.getSource(i)&&n.removeSource(i)}),0)}}}),[n]);let a=n&&n.style&&n.getSource(i);return a?function(e,t,n){us(t.id===n.id,"source id changed"),us(t.type===n.type,"source type changed");let r="",o=0;for(const e in t)"children"===e||"id"===e||Bl(n[e],t[e])||(r=e,o++);if(!o)return;const i=t.type;if("geojson"===i)e.setData(t.data);else if("image"===i)e.updateImage({url:t.url,coordinates:t.coordinates});else if("canvas"!==i&&"video"!==i||1!==o||"coordinates"!==r)if("vector"===i&&"setUrl"in e)switch(r){case"url":e.setUrl(t.url);break;case"tiles":e.setTiles(t.tiles)}else console.warn(`Unable to update <Source> prop: ${r}`);else e.setCoordinates(t.coordinates)}(a,t,r.current):a=function(e,t,n){if(e.style&&e.style._loaded){const r={...n};return delete r.id,delete r.children,e.addSource(t,r),e.getSource(t)}return null}(n,i,t),r.current=t,a&&e.Children.map(t.children,(t=>t&&(0,e.cloneElement)(t,{source:i})))||null};let ds=0;const ps=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),i=(0,e.useMemo)((()=>t.id||"jsx-layer-"+ds++),[]);if((0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),n.style&&n.style._loaded&&n.removeLayer(i)}}}),[n]),n&&n.style&&n.getLayer(i))try{!function(e,t,n,r){if(us(n.id===r.id,"layer id changed"),us(n.type===r.type,"layer type changed"),"custom"===n.type||"custom"===r.type)return;const{layout:o={},paint:i={},filter:a,minzoom:l,maxzoom:s,beforeId:u}=n;if(u!==r.beforeId&&e.moveLayer(t,u),o!==r.layout){const n=r.layout||{};for(const r in o)Bl(o[r],n[r])||e.setLayoutProperty(t,r,o[r]);for(const r in n)o.hasOwnProperty(r)||e.setLayoutProperty(t,r,void 0)}if(i!==r.paint){const n=r.paint||{};for(const r in i)Bl(i[r],n[r])||e.setPaintProperty(t,r,i[r]);for(const r in n)i.hasOwnProperty(r)||e.setPaintProperty(t,r,void 0)}Bl(a,r.filter)||e.setFilter(t,a),l===r.minzoom&&s===r.maxzoom||e.setLayerZoomRange(t,l,s)}(n,i,t,r.current)}catch(e){console.warn(e)}else!function(e,t,n){if(e.style&&e.style._loaded&&e.getSource(n.source)){const r={...n,id:t};delete r.beforeId,e.addLayer(r,n.beforeId)}}(n,i,t);return r.current=t,null};var hs=[15,15];const ms=function(t){var n=t.node;return e.createElement("div",{className:"p6o-map-hover",style:{left:t.x+hs[0],top:t.y+hs[1]}},n.title)};function vs(){return vs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},vs.apply(this,arguments)}function gs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ys(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gs(Object(n),!0).forEach((function(t){bs(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function bs(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ws(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Es=e.forwardRef((function(t,n){var r=(0,e.useContext)(Fe).store,o=t.config,i=ws((0,e.useState)(),2),a=i[0],l=i[1],s=ws(kl(a,500),1)[0],u=ws((0,e.useState)(),2),c=u[0],f=u[1],d="https://api.maptiler.com/maps/outdoor/style.json?key=".concat(o.api_key);(0,e.useEffect)((function(){console.log("Initial map render!")}),[]),(0,e.useEffect)((function(){}),[s]),(0,e.useEffect)((function(){c?n.current.classList.add("hover"):n.current.classList.remove("hover")}),[c]);var p,h,m=(0,e.useCallback)((function(e){return l(e.viewState)}),[]),v=(0,e.useCallback)((function(e){var t=e.features,n=e.point,o=t[0].properties.id,i=o===(null==c?void 0:c.id)?ys(ys({},c),n):ys({node:r.getNode(o)},n);f(i)}),[]);return e.createElement("div",{className:"p6o-map-container",ref:n},e.createElement(ts,{initialViewState:{bounds:o.initial_bounds},mapStyle:d,interactiveLayerIds:["search-results"],onLoad:t.onLoad,onMove:m,onClick:function(){if(c){var e=c.node;console.log("clicked",c),history.pushState(e,e.title,"#/".concat(encodeURIComponent(e.id)))}},onMouseMove:v,onMouseLeave:function(){return f(null)}},e.createElement(fs,{type:"geojson",data:(h=t.searchResults,{type:"FeatureCollection",features:h||[]})},e.createElement(ps,vs({id:"search-results"},{type:"circle",paint:{"circle-radius":(null==(p={fill:"red",radius:5})?void 0:p.radius)||4,"circle-color":(null==p?void 0:p.fill)||"#fff","circle-stroke-color":(null==p?void 0:p.stroke)||"#000","circle-stroke-width":(null==p?void 0:p.strokeWidth)||1}})))),t.children,c&&e.createElement(ms,c))}));const As=Es;function ks(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Cs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ss=function(t){var n=(0,e.useRef)(),r=(0,e.useContext)(Fe).store,o=ks((0,e.useState)(),2),i=o[0],a=o[1],l=ks(kl(i,250),1)[0],s=ks((0,e.useState)(),2),u=s[0],c=s[1];return(0,e.useEffect)((function(){n.current&&n.current.classList.add("loading")}),[n.current]),(0,e.useEffect)((function(){c(r.getNodesInBounds(t.config.initial_bounds))}),[t.dataAvailable]),(0,e.useEffect)((function(){n.current.classList.remove("loading")}),[t.loaded]),(0,e.useEffect)((function(){c(l?r.searchMappable(l):r.getNodesInBounds(t.config.initial_bounds))}),[l]),e.createElement(As,{ref:n,config:t.config,searchResults:u,onLoad:t.onMapLoaded},e.createElement(Rl,{config:t.config,searchQuery:i,onChangeSearchQuery:a}))};var Os=a(63),Ps=["innerHTML","ownerDocument","style","attributes","nodeValue"],Ts=["Array","ArrayBuffer","AsyncFunction","AsyncGenerator","AsyncGeneratorFunction","Date","Error","Function","Generator","GeneratorFunction","HTMLElement","Map","Object","Promise","RegExp","Set","WeakMap","WeakSet"],Ls=["bigint","boolean","null","number","string","symbol","undefined"];function _s(e){var t,n=Object.prototype.toString.call(e).slice(8,-1);return/HTML\w+Element/.test(n)?"HTMLElement":(t=n,Ts.includes(t)?n:void 0)}function Ms(e){return function(t){return _s(t)===e}}function Ns(e){return function(t){return typeof t===e}}function Rs(e){if(null===e)return"null";switch(typeof e){case"bigint":return"bigint";case"boolean":return"boolean";case"number":return"number";case"string":return"string";case"symbol":return"symbol";case"undefined":return"undefined"}return Rs.array(e)?"Array":Rs.plainFunction(e)?"Function":_s(e)||"Object"}Rs.array=Array.isArray,Rs.arrayOf=function(e,t){return!(!Rs.array(e)&&!Rs.function(t))&&e.every((function(e){return t(e)}))},Rs.asyncGeneratorFunction=function(e){return"AsyncGeneratorFunction"===_s(e)},Rs.asyncFunction=Ms("AsyncFunction"),Rs.bigint=Ns("bigint"),Rs.boolean=function(e){return!0===e||!1===e},Rs.date=Ms("Date"),Rs.defined=function(e){return!Rs.undefined(e)},Rs.domElement=function(e){return Rs.object(e)&&!Rs.plainObject(e)&&1===e.nodeType&&Rs.string(e.nodeName)&&Ps.every((function(t){return t in e}))},Rs.empty=function(e){return Rs.string(e)&&0===e.length||Rs.array(e)&&0===e.length||Rs.object(e)&&!Rs.map(e)&&!Rs.set(e)&&0===Object.keys(e).length||Rs.set(e)&&0===e.size||Rs.map(e)&&0===e.size},Rs.error=Ms("Error"),Rs.function=Ns("function"),Rs.generator=function(e){return Rs.iterable(e)&&Rs.function(e.next)&&Rs.function(e.throw)},Rs.generatorFunction=Ms("GeneratorFunction"),Rs.instanceOf=function(e,t){return!(!e||!t)&&Object.getPrototypeOf(e)===t.prototype},Rs.iterable=function(e){return!Rs.nullOrUndefined(e)&&Rs.function(e[Symbol.iterator])},Rs.map=Ms("Map"),Rs.nan=function(e){return Number.isNaN(e)},Rs.null=function(e){return null===e},Rs.nullOrUndefined=function(e){return Rs.null(e)||Rs.undefined(e)},Rs.number=function(e){return Ns("number")(e)&&!Rs.nan(e)},Rs.numericString=function(e){return Rs.string(e)&&e.length>0&&!Number.isNaN(Number(e))},Rs.object=function(e){return!Rs.nullOrUndefined(e)&&(Rs.function(e)||"object"==typeof e)},Rs.oneOf=function(e,t){return!!Rs.array(e)&&e.indexOf(t)>-1},Rs.plainFunction=Ms("Function"),Rs.plainObject=function(e){if("Object"!==_s(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.getPrototypeOf({})},Rs.primitive=function(e){return Rs.null(e)||(t=typeof e,Ls.includes(t));var t},Rs.promise=Ms("Promise"),Rs.propertyOf=function(e,t,n){if(!Rs.object(e)||!t)return!1;var r=e[t];return Rs.function(n)?n(r):Rs.defined(r)},Rs.regexp=Ms("RegExp"),Rs.set=Ms("Set"),Rs.string=Ns("string"),Rs.symbol=Ns("symbol"),Rs.undefined=Ns("undefined"),Rs.weakMap=Ms("WeakMap"),Rs.weakSet=Ms("WeakSet");const js=Rs;function Is(e,t,n){var r=n.actual,o=n.key,i=n.previous,a=n.type,l=Hs(e,o),s=Hs(t,o),u=[l,s].every(js.number)&&("increased"===a?l<s:l>s);return js.undefined(r)||(u=u&&s===r),js.undefined(i)||(u=u&&l===i),u}function Ds(e,t,n){var r=n.key,o=n.type,i=n.value,a=Hs(e,r),l=Hs(t,r),s="added"===o?a:l,u="added"===o?l:a;return js.nullOrUndefined(i)?[a,l].every(js.array)?!u.every(Us(s)):[a,l].every(js.plainObject)?function(e,t){return t.some((function(t){return e.indexOf(t)<0}))}(Object.keys(s),Object.keys(u)):![a,l].every((function(e){return js.primitive(e)&&js.defined(e)}))&&("added"===o?!js.defined(a)&&js.defined(l):js.defined(a)&&!js.defined(l)):js.defined(s)?!(!js.array(s)&&!js.plainObject(s))&&function(e,t,n){return!!Ws(e,t)&&([e,t].every(js.array)?!e.some(Bs(n))&&t.some(Bs(n)):[e,t].every(js.plainObject)?!Object.entries(e).some(Fs(n))&&Object.entries(t).some(Fs(n)):t===n)}(s,u,i):Os(u,i)}function zs(e,t,n){var r=(void 0===n?{}:n).key,o=Hs(e,r),i=Hs(t,r);if(!Ws(o,i))throw new TypeError("Inputs have different types");if(!function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.every((function(e){return js.string(e)||js.array(e)||js.plainObject(e)}))}(o,i))throw new TypeError("Inputs don't have length");return[o,i].every(js.plainObject)&&(o=Object.keys(o),i=Object.keys(i)),[o,i]}function Fs(e){return function(t){var n=t[0],r=t[1];return js.array(e)?Os(e,r)||e.some((function(e){return Os(e,r)||js.array(r)&&Us(r)(e)})):js.plainObject(e)&&e[n]?!!e[n]&&Os(e[n],r):Os(e,r)}}function Bs(e){return function(t){return js.array(e)?e.some((function(e){return Os(e,t)||js.array(t)&&Us(t)(e)})):Os(e,t)}}function Vs(e,t){return js.array(e)?e.some((function(e){return Os(e,t)})):Os(e,t)}function Us(e){return function(t){return!!e.find((function(e){return Os(e,t)}))}}function Ws(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.every(js.array)||e.every(js.number)||e.every(js.plainObject)||e.every(js.string)}function Hs(e,t){return js.plainObject(e)||js.array(e)?js.string(t)?t.split(".").reduce((function(e,t){return e&&e[t]}),e):js.number(t)?e[t]:e:e}function $s(e,t){if([e,t].some(js.nullOrUndefined))throw new Error("Missing required parameters");if(![e,t].every((function(e){return js.plainObject(e)||js.array(e)})))throw new Error("Expected plain objects or array");var n=function(n,r,o){try{var i=Hs(e,n),a=Hs(t,n),l=js.defined(r),s=js.defined(o);if(l||s){var u=s?Vs(o,i):!Vs(r,i),c=Vs(r,a);return u&&c}return[i,a].every(js.array)||[i,a].every(js.plainObject)?!Os(i,a):i!==a}catch(e){return!1}};return{added:function(n,r){try{return Ds(e,t,{key:n,type:"added",value:r})}catch(e){return!1}},changed:n,changedFrom:function(n,r,o){if(!js.defined(n))return!1;try{var i=Hs(e,n),a=Hs(t,n),l=js.defined(o);return Vs(r,i)&&(l?Vs(o,a):!l)}catch(e){return!1}},changedTo:function(e,t){return!!js.defined(e)&&n(e,t)},decreased:function(n,r,o){if(!js.defined(n))return!1;try{return Is(e,t,{key:n,actual:r,previous:o,type:"decreased"})}catch(e){return!1}},emptied:function(n){try{var r=zs(e,t,{key:n}),o=r[0],i=r[1];return!!o.length&&!i.length}catch(e){return!1}},filled:function(n){try{var r=zs(e,t,{key:n}),o=r[0],i=r[1];return!o.length&&!!i.length}catch(e){return!1}},increased:function(n,r,o){if(!js.defined(n))return!1;try{return Is(e,t,{key:n,actual:r,previous:o,type:"increased"})}catch(e){return!1}},removed:function(n,r){try{return Ds(e,t,{key:n,type:"removed",value:r})}catch(e){return!1}}}}var Ys=a(875),qs=a.n(Ys),Gs=a(339),Xs=a.n(Gs),Qs=a(274),Ks=a.n(Qs),Zs=a(864),Js=a(996),eu=a.n(Js),tu=a(697),nu=a.n(tu),ru=a(494),ou="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,iu=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(ou&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}(),au=ou&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),iu))}};function lu(e){return e&&"[object Function]"==={}.toString.call(e)}function su(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function uu(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function cu(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=su(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:cu(uu(e))}function fu(e){return e&&e.referenceNode?e.referenceNode:e}var du=ou&&!(!window.MSInputMethodContext||!document.documentMode),pu=ou&&/MSIE 10/.test(navigator.userAgent);function hu(e){return 11===e?du:10===e?pu:du||pu}function mu(e){if(!e)return document.documentElement;for(var t=hu(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===su(n,"position")?mu(n):n:e?e.ownerDocument.documentElement:document.documentElement}function vu(e){return null!==e.parentNode?vu(e.parentNode):e}function gu(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,l,s=i.commonAncestorContainer;if(e!==s&&t!==s||r.contains(o))return"BODY"===(l=(a=s).nodeName)||"HTML"!==l&&mu(a.firstElementChild)!==a?mu(s):s;var u=vu(e);return u.host?gu(u.host,t):gu(e,vu(t).host)}function yu(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var o=e.ownerDocument.documentElement,i=e.ownerDocument.scrollingElement||o;return i[n]}return e[n]}function bu(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=yu(t,"top"),o=yu(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}function wu(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function xu(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],hu(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function Eu(e){var t=e.body,n=e.documentElement,r=hu(10)&&getComputedStyle(n);return{height:xu("Height",t,n,r),width:xu("Width",t,n,r)}}var Au=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},ku=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Cu=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},Su=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Ou(e){return Su({},e,{right:e.left+e.width,bottom:e.top+e.height})}function Pu(e){var t={};try{if(hu(10)){t=e.getBoundingClientRect();var n=yu(e,"top"),r=yu(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?Eu(e.ownerDocument):{},a=i.width||e.clientWidth||o.width,l=i.height||e.clientHeight||o.height,s=e.offsetWidth-a,u=e.offsetHeight-l;if(s||u){var c=su(e);s-=wu(c,"x"),u-=wu(c,"y"),o.width-=s,o.height-=u}return Ou(o)}function Tu(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=hu(10),o="HTML"===t.nodeName,i=Pu(e),a=Pu(t),l=cu(e),s=su(t),u=parseFloat(s.borderTopWidth),c=parseFloat(s.borderLeftWidth);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f=Ou({top:i.top-a.top-u,left:i.left-a.left-c,width:i.width,height:i.height});if(f.marginTop=0,f.marginLeft=0,!r&&o){var d=parseFloat(s.marginTop),p=parseFloat(s.marginLeft);f.top-=u-d,f.bottom-=u-d,f.left-=c-p,f.right-=c-p,f.marginTop=d,f.marginLeft=p}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(f=bu(f,t)),f}function Lu(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=Tu(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:yu(n),l=t?0:yu(n,"left"),s={top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:i};return Ou(s)}function _u(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===su(e,"position"))return!0;var n=uu(e);return!!n&&_u(n)}function Mu(e){if(!e||!e.parentElement||hu())return document.documentElement;for(var t=e.parentElement;t&&"none"===su(t,"transform");)t=t.parentElement;return t||document.documentElement}function Nu(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?Mu(e):gu(e,fu(t));if("viewport"===r)i=Lu(a,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=cu(uu(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var s=Tu(l,a,o);if("HTML"!==l.nodeName||_u(a))i=s;else{var u=Eu(e.ownerDocument),c=u.height,f=u.width;i.top+=s.top-s.marginTop,i.bottom=c+s.top,i.left+=s.left-s.marginLeft,i.right=f+s.left}}var d="number"==typeof(n=n||0);return i.left+=d?n:n.left||0,i.top+=d?n:n.top||0,i.right-=d?n:n.right||0,i.bottom-=d?n:n.bottom||0,i}function Ru(e){return e.width*e.height}function ju(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=Nu(n,r,i,o),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},s=Object.keys(l).map((function(e){return Su({key:e},l[e],{area:Ru(l[e])})})).sort((function(e,t){return t.area-e.area})),u=s.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),c=u.length>0?u[0].key:s[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function Iu(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=r?Mu(t):gu(t,fu(n));return Tu(n,o,r)}function Du(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function zu(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function Fu(e,t,n){n=n.split("-")[0];var r=Du(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",l=i?"left":"top",s=i?"height":"width",u=i?"width":"height";return o[a]=t[a]+t[s]/2-r[s]/2,o[l]=n===l?t[l]-r[u]:t[zu(l)],o}function Bu(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function Vu(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e.name===n}));var r=Bu(e,(function(e){return e.name===n}));return e.indexOf(r)}(e,0,n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&lu(n)&&(t.offsets.popper=Ou(t.offsets.popper),t.offsets.reference=Ou(t.offsets.reference),t=n(t,e))})),t}function Uu(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=Iu(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=ju(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=Fu(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=Vu(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function Wu(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function Hu(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function $u(){return this.state.isDestroyed=!0,Wu(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Hu("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function Yu(e){var t=e.ownerDocument;return t?t.defaultView:window}function qu(e,t,n,r){var o="BODY"===e.nodeName,i=o?e.ownerDocument.defaultView:e;i.addEventListener(t,n,{passive:!0}),o||qu(cu(i.parentNode),t,n,r),r.push(i)}function Gu(e,t,n,r){n.updateBound=r,Yu(e).addEventListener("resize",n.updateBound,{passive:!0});var o=cu(e);return qu(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function Xu(){this.state.eventsEnabled||(this.state=Gu(this.reference,this.options,this.state,this.scheduleUpdate))}function Qu(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,Yu(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Ku(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Zu(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Ku(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var Ju=ou&&/Firefox/i.test(navigator.userAgent);function ec(e,t,n){var r=Bu(e,(function(e){return e.name===t})),o=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var tc=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],nc=tc.slice(3);function rc(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=nc.indexOf(e),r=nc.slice(n+1).concat(nc.slice(0,n));return t?r.reverse():r}var oc={shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",u=l?"width":"height",c={start:Cu({},s,i[s]),end:Cu({},s,i[s]+i[u]-a[u])};e.offsets.popper=Su({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n,r=t.offset,o=e.placement,i=e.offsets,a=i.popper,l=i.reference,s=o.split("-")[0];return n=Ku(+r)?[+r,0]:function(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),l=a.indexOf(Bu(a,(function(e){return-1!==e.search(/,|\s/)})));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,u=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return u=u.map((function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];return i?0===a.indexOf("%")?Ou("%p"===a?n:r)[t]/100*i:"vh"===a||"vw"===a?("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i:i:e}(e,o,t,n)}))})),u.forEach((function(e,t){e.forEach((function(n,r){Ku(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))}))})),o}(r,a,l,s),"left"===s?(a.top+=n[0],a.left-=n[1]):"right"===s?(a.top+=n[0],a.left+=n[1]):"top"===s?(a.left+=n[0],a.top-=n[1]):"bottom"===s&&(a.left+=n[0],a.top+=n[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||mu(e.instance.popper);e.instance.reference===n&&(n=mu(n));var r=Hu("transform"),o=e.instance.popper.style,i=o.top,a=o.left,l=o[r];o.top="",o.left="",o[r]="";var s=Nu(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=l,t.boundaries=s;var u=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<s[e]&&!t.escapeWithReference&&(n=Math.max(c[e],s[e])),Cu({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>s[e]&&!t.escapeWithReference&&(r=Math.min(c[n],s[e]-("right"===e?c.width:c.height))),Cu({},n,r)}};return u.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=Su({},c,f[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",s=a?"left":"top",u=a?"width":"height";return n[l]<i(r[s])&&(e.offsets.popper[s]=i(r[s])-n[u]),n[s]>i(r[l])&&(e.offsets.popper[s]=i(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!ec(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,a=i.popper,l=i.reference,s=-1!==["left","right"].indexOf(o),u=s?"height":"width",c=s?"Top":"Left",f=c.toLowerCase(),d=s?"left":"top",p=s?"bottom":"right",h=Du(r)[u];l[p]-h<a[f]&&(e.offsets.popper[f]-=a[f]-(l[p]-h)),l[f]+h>a[p]&&(e.offsets.popper[f]+=l[f]+h-a[p]),e.offsets.popper=Ou(e.offsets.popper);var m=l[f]+l[u]/2-h/2,v=su(e.instance.popper),g=parseFloat(v["margin"+c]),y=parseFloat(v["border"+c+"Width"]),b=m-e.offsets.popper[f]-g-y;return b=Math.max(Math.min(a[u]-h,b),0),e.arrowElement=r,e.offsets.arrow=(Cu(n={},f,Math.round(b)),Cu(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(Wu(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=Nu(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=zu(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case"flip":a=[r,o];break;case"clockwise":a=rc(r);break;case"counterclockwise":a=rc(r,!0);break;default:a=t.behavior}return a.forEach((function(l,s){if(r!==l||a.length===s+1)return e;r=e.placement.split("-")[0],o=zu(r);var u=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(u.right)>f(c.left)||"right"===r&&f(u.left)<f(c.right)||"top"===r&&f(u.bottom)>f(c.top)||"bottom"===r&&f(u.top)<f(c.bottom),p=f(u.left)<f(n.left),h=f(u.right)>f(n.right),m=f(u.top)<f(n.top),v=f(u.bottom)>f(n.bottom),g="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===i&&p||y&&"end"===i&&h||!y&&"start"===i&&m||!y&&"end"===i&&v),w=!!t.flipVariationsByContent&&(y&&"start"===i&&h||y&&"end"===i&&p||!y&&"start"===i&&v||!y&&"end"===i&&m),x=b||w;(d||g||x)&&(e.flipped=!0,(d||g)&&(r=a[s+1]),x&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=Su({},e.offsets.popper,Fu(e.instance.popper,e.offsets.reference,e.placement)),e=Vu(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(l?o[a?"width":"height"]:0),e.placement=zu(t),e.offsets.popper=Ou(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!ec(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=Bu(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=Bu(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a,l,s=void 0!==i?i:t.gpuAcceleration,u=mu(e.instance.popper),c=Pu(u),f={position:o.position},d=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,i=Math.round,a=Math.floor,l=function(e){return e},s=i(o.width),u=i(r.width),c=-1!==["left","right"].indexOf(e.placement),f=-1!==e.placement.indexOf("-"),d=t?c||f||s%2==u%2?i:a:l,p=t?i:l;return{left:d(s%2==1&&u%2==1&&!f&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!Ju),p="bottom"===n?"top":"bottom",h="right"===r?"left":"right",m=Hu("transform");if(l="bottom"===p?"HTML"===u.nodeName?-u.clientHeight+d.bottom:-c.height+d.bottom:d.top,a="right"===h?"HTML"===u.nodeName?-u.clientWidth+d.right:-c.width+d.right:d.left,s&&m)f[m]="translate3d("+a+"px, "+l+"px, 0)",f[p]=0,f[h]=0,f.willChange="transform";else{var v="bottom"===p?-1:1,g="right"===h?-1:1;f[p]=l*v,f[h]=a*g,f.willChange=p+", "+h}var y={"x-placement":e.placement};return e.attributes=Su({},y,e.attributes),e.styles=Su({},f,e.styles),e.arrowStyles=Su({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Zu(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&Zu(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=Iu(o,t,e,n.positionFixed),a=ju(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),Zu(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}},ic={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:oc},ac=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Au(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=au(this.update.bind(this)),this.options=Su({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(Su({},e.Defaults.modifiers,o.modifiers)).forEach((function(t){r.options.modifiers[t]=Su({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return Su({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&lu(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return ku(e,[{key:"update",value:function(){return Uu.call(this)}},{key:"destroy",value:function(){return $u.call(this)}},{key:"enableEventListeners",value:function(){return Xu.call(this)}},{key:"disableEventListeners",value:function(){return Qu.call(this)}}]),e}();ac.Utils=("undefined"!=typeof window?window:a.g).PopperUtils,ac.placements=tc,ac.Defaults=ic;const lc=ac;var sc=a(288);function uc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uc(Object(n),!0).forEach((function(t){hc(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fc(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function dc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pc(e,t,n){return t&&dc(e.prototype,t),n&&dc(e,n),e}function hc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function mc(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&gc(e,t)}function vc(e){return vc=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},vc(e)}function gc(e,t){return gc=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},gc(e,t)}function yc(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function bc(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wc(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?bc(e):t}function xc(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=vc(e);if(t){var o=vc(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return wc(this,n)}}var Ec={flip:{padding:20},preventOverflow:{padding:10}},Ac={INIT:"init",IDLE:"idle",OPENING:"opening",OPEN:"open",CLOSING:"closing",ERROR:"error"},kc=qs().canUseDOM,Cc=void 0!==t.createPortal;function Sc(){return"ontouchstart"in window&&/Mobi/.test(navigator.userAgent)}function Oc(e){var t=e.title,n=e.data,r=e.warn,o=void 0!==r&&r,i=e.debug,a=void 0!==i&&i,l=o?console.warn||console.error:console.log;a&&t&&n&&(console.groupCollapsed("%creact-floater: ".concat(t),"color: #9b00ff; font-weight: bold; font-size: 12px;"),Array.isArray(n)?n.forEach((function(e){js.plainObject(e)&&e.key?l.apply(console,[e.key,e.value]):l.apply(console,[e])})):l.apply(console,[n]),console.groupEnd())}function Pc(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];e.addEventListener(t,n,r)}function Tc(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];e.removeEventListener(t,n,r)}function Lc(){}var _c=function(n){mc(o,n);var r=xc(o);function o(e){var t;return fc(this,o),t=r.call(this,e),kc?(t.node=document.createElement("div"),e.id&&(t.node.id=e.id),e.zIndex&&(t.node.style.zIndex=e.zIndex),document.body.appendChild(t.node),t):wc(t)}return pc(o,[{key:"componentDidMount",value:function(){kc&&(Cc||this.renderPortal())}},{key:"componentDidUpdate",value:function(){kc&&(Cc||this.renderPortal())}},{key:"componentWillUnmount",value:function(){kc&&this.node&&(Cc||t.unmountComponentAtNode(this.node),document.body.removeChild(this.node))}},{key:"renderPortal",value:function(){if(!kc)return null;var n=this.props,r=n.children,o=n.setRef;return Cc?t.createPortal(r,this.node):(o(t.unstable_renderSubtreeIntoContainer(this,r.length>1?e.createElement("div",null,r):r[0],this.node)),null)}},{key:"renderReact16",value:function(){var e=this.props,t=e.hasChildren,n=e.placement,r=e.target;return t||r||"center"===n?this.renderPortal():null}},{key:"render",value:function(){return Cc?this.renderReact16():null}}]),o}(e.Component);hc(_c,"propTypes",{children:nu().oneOfType([nu().element,nu().array]),hasChildren:nu().bool,id:nu().oneOfType([nu().string,nu().number]),placement:nu().string,setRef:nu().func.isRequired,target:nu().oneOfType([nu().object,nu().string]),zIndex:nu().number});var Mc=function(t){mc(r,t);var n=xc(r);function r(){return fc(this,r),n.apply(this,arguments)}return pc(r,[{key:"parentStyle",get:function(){var e=this.props,t=e.placement,n=e.styles.arrow.length,r={pointerEvents:"none",position:"absolute",width:"100%"};return t.startsWith("top")?(r.bottom=0,r.left=0,r.right=0,r.height=n):t.startsWith("bottom")?(r.left=0,r.right=0,r.top=0,r.height=n):t.startsWith("left")?(r.right=0,r.top=0,r.bottom=0):t.startsWith("right")&&(r.left=0,r.top=0),r}},{key:"render",value:function(){var t,n=this.props,r=n.placement,o=n.setArrowRef,i=n.styles.arrow,a=i.color,l=i.display,s=i.length,u=i.margin,c=i.position,f=i.spread,d={display:l,position:c},p=f,h=s;return r.startsWith("top")?(t="0,0 ".concat(p/2,",").concat(h," ").concat(p,",0"),d.bottom=0,d.marginLeft=u,d.marginRight=u):r.startsWith("bottom")?(t="".concat(p,",").concat(h," ").concat(p/2,",0 0,").concat(h),d.top=0,d.marginLeft=u,d.marginRight=u):r.startsWith("left")?(h=f,t="0,0 ".concat(p=s,",").concat(h/2," 0,").concat(h),d.right=0,d.marginTop=u,d.marginBottom=u):r.startsWith("right")&&(h=f,t="".concat(p=s,",").concat(h," ").concat(p,",0 0,").concat(h/2),d.left=0,d.marginTop=u,d.marginBottom=u),e.createElement("div",{className:"__floater__arrow",style:this.parentStyle},e.createElement("span",{ref:o,style:d},e.createElement("svg",{width:p,height:h,version:"1.1",xmlns:"http://www.w3.org/2000/svg"},e.createElement("polygon",{points:t,fill:a}))))}}]),r}(e.Component);hc(Mc,"propTypes",{placement:nu().string.isRequired,setArrowRef:nu().func.isRequired,styles:nu().object.isRequired});var Nc=["color","height","width"],Rc=function(t){var n=t.handleClick,r=t.styles,o=r.color,i=r.height,a=r.width,l=yc(r,Nc);return e.createElement("button",{"aria-label":"close",onClick:n,style:l,type:"button"},e.createElement("svg",{width:"".concat(a,"px"),height:"".concat(i,"px"),viewBox:"0 0 18 18",version:"1.1",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid"},e.createElement("g",null,e.createElement("path",{d:"M8.13911129,9.00268191 L0.171521827,17.0258467 C-0.0498027049,17.248715 -0.0498027049,17.6098394 0.171521827,17.8327545 C0.28204354,17.9443526 0.427188206,17.9998706 0.572051765,17.9998706 C0.71714958,17.9998706 0.862013139,17.9443526 0.972581703,17.8327545 L9.0000937,9.74924618 L17.0276057,17.8327545 C17.1384085,17.9443526 17.2832721,17.9998706 17.4281356,17.9998706 C17.5729992,17.9998706 17.718097,17.9443526 17.8286656,17.8327545 C18.0499901,17.6098862 18.0499901,17.2487618 17.8286656,17.0258467 L9.86135722,9.00268191 L17.8340066,0.973848225 C18.0553311,0.750979934 18.0553311,0.389855532 17.8340066,0.16694039 C17.6126821,-0.0556467968 17.254037,-0.0556467968 17.0329467,0.16694039 L9.00042166,8.25611765 L0.967006424,0.167268345 C0.745681892,-0.0553188426 0.387317931,-0.0553188426 0.165993399,0.167268345 C-0.0553311331,0.390136635 -0.0553311331,0.751261038 0.165993399,0.974176179 L8.13920499,9.00268191 L8.13911129,9.00268191 Z",fill:o}))))};Rc.propTypes={handleClick:nu().func.isRequired,styles:nu().object.isRequired};var jc=function(t){var n=t.content,r=t.footer,o=t.handleClick,i=t.open,a=t.positionWrapper,l=t.showCloseButton,s=t.title,u=t.styles,c={content:e.isValidElement(n)?n:e.createElement("div",{className:"__floater__content",style:u.content},n)};return s&&(c.title=e.isValidElement(s)?s:e.createElement("div",{className:"__floater__title",style:u.title},s)),r&&(c.footer=e.isValidElement(r)?r:e.createElement("div",{className:"__floater__footer",style:u.footer},r)),!l&&!a||js.boolean(i)||(c.close=e.createElement(Rc,{styles:u.close,handleClick:o})),e.createElement("div",{className:"__floater__container",style:u.container},c.close,c.title,c.content,c.footer)};jc.propTypes={content:nu().node.isRequired,footer:nu().node,handleClick:nu().func.isRequired,open:nu().bool,positionWrapper:nu().bool.isRequired,showCloseButton:nu().bool.isRequired,styles:nu().object.isRequired,title:nu().node};var Ic=function(t){mc(r,t);var n=xc(r);function r(){return fc(this,r),n.apply(this,arguments)}return pc(r,[{key:"style",get:function(){var e=this.props,t=e.disableAnimation,n=e.component,r=e.placement,o=e.hideArrow,i=e.status,a=e.styles,l=a.arrow.length,s=a.floater,u=a.floaterCentered,c=a.floaterClosing,f=a.floaterOpening,d=a.floaterWithAnimation,p=a.floaterWithComponent,h={};return o||(r.startsWith("top")?h.padding="0 0 ".concat(l,"px"):r.startsWith("bottom")?h.padding="".concat(l,"px 0 0"):r.startsWith("left")?h.padding="0 ".concat(l,"px 0 0"):r.startsWith("right")&&(h.padding="0 0 0 ".concat(l,"px"))),-1!==[Ac.OPENING,Ac.OPEN].indexOf(i)&&(h=cc(cc({},h),f)),i===Ac.CLOSING&&(h=cc(cc({},h),c)),i!==Ac.OPEN||t||(h=cc(cc({},h),d)),"center"===r&&(h=cc(cc({},h),u)),n&&(h=cc(cc({},h),p)),cc(cc({},s),h)}},{key:"render",value:function(){var t=this.props,n=t.component,r=t.handleClick,o=t.hideArrow,i=t.setFloaterRef,a=t.status,l={},s=["__floater"];return l.content=n?e.isValidElement(n)?e.cloneElement(n,{closeFn:r}):n({closeFn:r}):e.createElement(jc,this.props),a===Ac.OPEN&&s.push("__floater__open"),o||(l.arrow=e.createElement(Mc,this.props)),e.createElement("div",{ref:i,className:s.join(" "),style:this.style},e.createElement("div",{className:"__floater__body"},l.content,l.arrow))}}]),r}(e.Component);hc(Ic,"propTypes",{component:nu().oneOfType([nu().func,nu().element]),content:nu().node,disableAnimation:nu().bool.isRequired,footer:nu().node,handleClick:nu().func.isRequired,hideArrow:nu().bool.isRequired,open:nu().bool,placement:nu().string.isRequired,positionWrapper:nu().bool.isRequired,setArrowRef:nu().func.isRequired,setFloaterRef:nu().func.isRequired,showCloseButton:nu().bool,status:nu().string.isRequired,styles:nu().object.isRequired,title:nu().node});var Dc=function(t){mc(r,t);var n=xc(r);function r(){return fc(this,r),n.apply(this,arguments)}return pc(r,[{key:"render",value:function(){var t,n=this.props,r=n.children,o=n.handleClick,i=n.handleMouseEnter,a=n.handleMouseLeave,l=n.setChildRef,s=n.setWrapperRef,u=n.style,c=n.styles;if(r)if(1===e.Children.count(r))if(e.isValidElement(r)){var f=js.function(r.type)?"innerRef":"ref";t=e.cloneElement(e.Children.only(r),hc({},f,l))}else t=e.createElement("span",null,r);else t=r;return t?e.createElement("span",{ref:s,style:cc(cc({},c),u),onClick:o,onMouseEnter:i,onMouseLeave:a},t):null}}]),r}(e.Component);hc(Dc,"propTypes",{children:nu().node,handleClick:nu().func.isRequired,handleMouseEnter:nu().func.isRequired,handleMouseLeave:nu().func.isRequired,setChildRef:nu().func.isRequired,setWrapperRef:nu().func.isRequired,style:nu().object,styles:nu().object.isRequired});var zc={zIndex:100},Fc=["arrow","flip","offset"],Bc=["position","top","right","bottom","left"],Vc=function(t){mc(r,t);var n=xc(r);function r(e){var t;return fc(this,r),hc(bc(t=n.call(this,e)),"setArrowRef",(function(e){t.arrowRef=e})),hc(bc(t),"setChildRef",(function(e){t.childRef=e})),hc(bc(t),"setFloaterRef",(function(e){t.floaterRef||(t.floaterRef=e)})),hc(bc(t),"setWrapperRef",(function(e){t.wrapperRef=e})),hc(bc(t),"handleTransitionEnd",(function(){var e=t.state.status,n=t.props.callback;t.wrapperPopper&&t.wrapperPopper.instance.update(),t.setState({status:e===Ac.OPENING?Ac.OPEN:Ac.IDLE},(function(){var e=t.state.status;n(e===Ac.OPEN?"open":"close",t.props)}))})),hc(bc(t),"handleClick",(function(){var e=t.props,n=e.event,r=e.open;if(!js.boolean(r)){var o=t.state,i=o.positionWrapper,a=o.status;("click"===t.event||"hover"===t.event&&i)&&(Oc({title:"click",data:[{event:n,status:a===Ac.OPEN?"closing":"opening"}],debug:t.debug}),t.toggle())}})),hc(bc(t),"handleMouseEnter",(function(){var e=t.props,n=e.event,r=e.open;if(!js.boolean(r)&&!Sc()){var o=t.state.status;"hover"===t.event&&o===Ac.IDLE&&(Oc({title:"mouseEnter",data:[{key:"originalEvent",value:n}],debug:t.debug}),clearTimeout(t.eventDelayTimeout),t.toggle())}})),hc(bc(t),"handleMouseLeave",(function(){var e=t.props,n=e.event,r=e.eventDelay,o=e.open;if(!js.boolean(o)&&!Sc()){var i=t.state,a=i.status,l=i.positionWrapper;"hover"===t.event&&(Oc({title:"mouseLeave",data:[{key:"originalEvent",value:n}],debug:t.debug}),r?-1===[Ac.OPENING,Ac.OPEN].indexOf(a)||l||t.eventDelayTimeout||(t.eventDelayTimeout=setTimeout((function(){delete t.eventDelayTimeout,t.toggle()}),1e3*r)):t.toggle(Ac.IDLE))}})),t.state={currentPlacement:e.placement,positionWrapper:e.wrapperOptions.position&&!!e.target,status:Ac.INIT,statusWrapper:Ac.INIT},t._isMounted=!1,kc&&window.addEventListener("load",(function(){t.popper&&t.popper.instance.update(),t.wrapperPopper&&t.wrapperPopper.instance.update()})),t}return pc(r,[{key:"componentDidMount",value:function(){if(kc){var e=this.state.positionWrapper,t=this.props,n=t.children,r=t.open,o=t.target;this._isMounted=!0,Oc({title:"init",data:{hasChildren:!!n,hasTarget:!!o,isControlled:js.boolean(r),positionWrapper:e,target:this.target,floater:this.floaterRef},debug:this.debug}),this.initPopper(),!n&&o&&js.boolean(r)}}},{key:"componentDidUpdate",value:function(e,t){if(kc){var n,r=this.props,o=r.autoOpen,i=r.open,a=r.target,l=r.wrapperOptions,s=(0,sc.Z)(t,this.state),u=s.changedFrom,c=s.changedTo;e.open!==i&&(js.boolean(i)&&(n=i?Ac.OPENING:Ac.CLOSING),this.toggle(n)),e.wrapperOptions.position===l.position&&e.target===a||this.changeWrapperPosition(this.props),(c("status",Ac.IDLE)&&i||u("status",Ac.INIT,Ac.IDLE)&&o)&&this.toggle(Ac.OPEN),this.popper&&c("status",Ac.OPENING)&&this.popper.instance.update(),this.floaterRef&&(c("status",Ac.OPENING)||c("status",Ac.CLOSING))&&function(e,t,n){var r;Pc(e,t,r=function(o){n(o),Tc(e,t,r)},arguments.length>3&&void 0!==arguments[3]&&arguments[3])}(this.floaterRef,"transitionend",this.handleTransitionEnd)}}},{key:"componentWillUnmount",value:function(){kc&&(this._isMounted=!1,this.popper&&this.popper.instance.destroy(),this.wrapperPopper&&this.wrapperPopper.instance.destroy())}},{key:"initPopper",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.target,n=this.state.positionWrapper,r=this.props,o=r.disableFlip,i=r.getPopper,a=r.hideArrow,l=r.offset,s=r.placement,u=r.wrapperOptions,c="top"===s||"bottom"===s?"flip":["right","bottom-end","top-end","left","top-start","bottom-start"];if("center"===s)this.setState({status:Ac.IDLE});else if(t&&this.floaterRef){var f=this.options,d=f.arrow,p=f.flip,h=f.offset,m=yc(f,Fc);new lc(t,this.floaterRef,{placement:s,modifiers:cc({arrow:cc({enabled:!a,element:this.arrowRef},d),flip:cc({enabled:!o,behavior:c},p),offset:cc({offset:"0, ".concat(l,"px")},h)},m),onCreate:function(t){e.popper=t,i(t,"floater"),e._isMounted&&e.setState({currentPlacement:t.placement,status:Ac.IDLE}),s!==t.placement&&setTimeout((function(){t.instance.update()}),1)},onUpdate:function(t){e.popper=t;var n=e.state.currentPlacement;e._isMounted&&t.placement!==n&&e.setState({currentPlacement:t.placement})}})}if(n){var v=js.undefined(u.offset)?0:u.offset;new lc(this.target,this.wrapperRef,{placement:u.placement||s,modifiers:{arrow:{enabled:!1},offset:{offset:"0, ".concat(v,"px")},flip:{enabled:!1}},onCreate:function(t){e.wrapperPopper=t,e._isMounted&&e.setState({statusWrapper:Ac.IDLE}),i(t,"wrapper"),s!==t.placement&&setTimeout((function(){t.instance.update()}),1)}})}}},{key:"changeWrapperPosition",value:function(e){var t=e.target,n=e.wrapperOptions;this.setState({positionWrapper:n.position&&!!t})}},{key:"toggle",value:function(e){var t=this.state.status===Ac.OPEN?Ac.CLOSING:Ac.OPENING;js.undefined(e)||(t=e),this.setState({status:t})}},{key:"debug",get:function(){return this.props.debug||!!a.g.ReactFloaterDebug}},{key:"event",get:function(){var e=this.props,t=e.disableHoverToClick,n=e.event;return"hover"===n&&Sc()&&!t?"click":n}},{key:"options",get:function(){var e=this.props.options;return eu()(Ec,e||{})}},{key:"styles",get:function(){var e,t=this,n=this.state,r=n.status,o=n.positionWrapper,i=n.statusWrapper,a=this.props.styles,l=eu()(function(e){var t=eu()(zc,e.options||{});return{wrapper:{cursor:"help",display:"inline-flex",flexDirection:"column",zIndex:t.zIndex},wrapperPosition:{left:-1e3,position:"absolute",top:-1e3,visibility:"hidden"},floater:{display:"inline-block",filter:"drop-shadow(0 0 3px rgba(0, 0, 0, 0.3))",maxWidth:300,opacity:0,position:"relative",transition:"opacity 0.3s",visibility:"hidden",zIndex:t.zIndex},floaterOpening:{opacity:1,visibility:"visible"},floaterWithAnimation:{opacity:1,transition:"opacity 0.3s, transform 0.2s",visibility:"visible"},floaterWithComponent:{maxWidth:"100%"},floaterClosing:{opacity:0,visibility:"visible"},floaterCentered:{left:"50%",position:"fixed",top:"50%",transform:"translate(-50%, -50%)"},container:{backgroundColor:"#fff",color:"#666",minHeight:60,minWidth:200,padding:20,position:"relative",zIndex:10},title:{borderBottom:"1px solid #555",color:"#555",fontSize:18,marginBottom:5,paddingBottom:6,paddingRight:18},content:{fontSize:15},close:{backgroundColor:"transparent",border:0,borderRadius:0,color:"#555",fontSize:0,height:15,outline:"none",padding:10,position:"absolute",right:0,top:0,width:15,WebkitAppearance:"none"},footer:{borderTop:"1px solid #ccc",fontSize:13,marginTop:10,paddingTop:5},arrow:{color:"#fff",display:"inline-flex",length:16,margin:8,position:"absolute",spread:32},options:t}}(a),a);if(o&&(e=-1===[Ac.IDLE].indexOf(r)||-1===[Ac.IDLE].indexOf(i)?l.wrapperPosition:this.wrapperPopper.styles,l.wrapper=cc(cc({},l.wrapper),e)),this.target){var s=window.getComputedStyle(this.target);this.wrapperStyles?l.wrapper=cc(cc({},l.wrapper),this.wrapperStyles):-1===["relative","static"].indexOf(s.position)&&(this.wrapperStyles={},o||(Bc.forEach((function(e){t.wrapperStyles[e]=s[e]})),l.wrapper=cc(cc({},l.wrapper),this.wrapperStyles),this.target.style.position="relative",this.target.style.top="auto",this.target.style.right="auto",this.target.style.bottom="auto",this.target.style.left="auto"))}return l}},{key:"target",get:function(){if(!kc)return null;var e=this.props.target;return e?js.domElement(e)?e:document.querySelector(e):this.childRef||this.wrapperRef}},{key:"render",value:function(){var t=this.state,n=t.currentPlacement,r=t.positionWrapper,o=t.status,i=this.props,a=i.children,l=i.component,s=i.content,u=i.disableAnimation,c=i.footer,f=i.hideArrow,d=i.id,p=i.open,h=i.showCloseButton,m=i.style,v=i.target,g=i.title,y=e.createElement(Dc,{handleClick:this.handleClick,handleMouseEnter:this.handleMouseEnter,handleMouseLeave:this.handleMouseLeave,setChildRef:this.setChildRef,setWrapperRef:this.setWrapperRef,style:m,styles:this.styles.wrapper},a),b={};return r?b.wrapperInPortal=y:b.wrapperAsChildren=y,e.createElement("span",null,e.createElement(_c,{hasChildren:!!a,id:d,placement:n,setRef:this.setFloaterRef,target:v,zIndex:this.styles.options.zIndex},e.createElement(Ic,{component:l,content:s,disableAnimation:u,footer:c,handleClick:this.handleClick,hideArrow:f||"center"===n,open:p,placement:n,positionWrapper:r,setArrowRef:this.setArrowRef,setFloaterRef:this.setFloaterRef,showCloseButton:h,status:o,styles:this.styles,title:g}),b.wrapperInPortal),b.wrapperAsChildren)}}]),r}(e.Component);hc(Vc,"propTypes",{autoOpen:nu().bool,callback:nu().func,children:nu().node,component:(0,ru.Z)(nu().oneOfType([nu().func,nu().element]),(function(e){return!e.content})),content:(0,ru.Z)(nu().node,(function(e){return!e.component})),debug:nu().bool,disableAnimation:nu().bool,disableFlip:nu().bool,disableHoverToClick:nu().bool,event:nu().oneOf(["hover","click"]),eventDelay:nu().number,footer:nu().node,getPopper:nu().func,hideArrow:nu().bool,id:nu().oneOfType([nu().string,nu().number]),offset:nu().number,open:nu().bool,options:nu().object,placement:nu().oneOf(["top","top-start","top-end","bottom","bottom-start","bottom-end","left","left-start","left-end","right","right-start","right-end","auto","center"]),showCloseButton:nu().bool,style:nu().object,styles:nu().object,target:nu().oneOfType([nu().object,nu().string]),title:nu().node,wrapperOptions:nu().shape({offset:nu().number,placement:nu().oneOf(["top","top-start","top-end","bottom","bottom-start","bottom-end","left","left-start","left-end","right","right-start","right-end","auto"]),position:nu().bool})}),hc(Vc,"defaultProps",{autoOpen:!1,callback:Lc,debug:!1,disableAnimation:!1,disableFlip:!1,disableHoverToClick:!1,event:"click",eventDelay:.4,getPopper:Lc,hideArrow:!1,offset:15,placement:"bottom",showCloseButton:!1,styles:{},target:null,wrapperOptions:{position:!1}});const Uc=Vc;function Wc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wc(Object(n),!0).forEach((function(t){Gc(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function $c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Yc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qc(e,t,n){return t&&Yc(e.prototype,t),n&&Yc(e,n),e}function Gc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Xc(){return Xc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Xc.apply(this,arguments)}function Qc(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Zc(e,t)}function Kc(e){return Kc=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Kc(e)}function Zc(e,t){return Zc=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Zc(e,t)}function Jc(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function ef(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tf(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ef(e)}function nf(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Kc(e);if(t){var o=Kc(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tf(this,n)}}var rf={INIT:"init",START:"start",STOP:"stop",RESET:"reset",PREV:"prev",NEXT:"next",GO:"go",CLOSE:"close",SKIP:"skip",UPDATE:"update"},of="step:after",af="error:target_not_found",lf={INIT:"init",READY:"ready",BEACON:"beacon",TOOLTIP:"tooltip",COMPLETE:"complete",ERROR:"error"},sf={IDLE:"idle",READY:"ready",WAITING:"waiting",RUNNING:"running",PAUSED:"paused",SKIPPED:"skipped",FINISHED:"finished",ERROR:"error"},uf=qs().canUseDOM,cf=void 0!==t.createPortal;function ff(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:navigator.userAgent,t=e;return"undefined"==typeof window?t="node":document.documentMode?t="ie":/Edge/.test(e)?t="edge":Boolean(window.opera)||e.indexOf(" OPR/")>=0?t="opera":void 0!==window.InstallTrigger?t="firefox":window.chrome?t="chrome":/(Version\/([0-9._]+).*Safari|CriOS|FxiOS| Mobile\/)/.test(e)&&(t="safari"),t}function df(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function pf(e){var t=[];return function e(n){if("string"==typeof n||"number"==typeof n)t.push(n);else if(Array.isArray(n))n.forEach((function(t){return e(t)}));else if(n&&n.props){var r=n.props.children;Array.isArray(r)?r.forEach((function(t){return e(t)})):e(r)}}(e),t.join(" ").trim()}function hf(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function mf(e,t){return!(!js.plainObject(e)||!js.array(t))&&Object.keys(e).every((function(e){return-1!==t.indexOf(e)}))}function vf(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,r){return t+t+n+n+r+r})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return n?[parseInt(n[1],16),parseInt(n[2],16),parseInt(n[3],16)]:[]}function gf(e){return e.disableBeacon||"center"===e.placement}function yf(t,n){var r,o=(0,e.isValidElement)(t)||(0,e.isValidElement)(n),i=js.undefined(t)||js.undefined(n);if(df(t)!==df(n)||o||i)return!1;if(js.domElement(t))return t.isSameNode(n);if(js.number(t))return t===n;if(js.function(t))return t.toString()===n.toString();for(var a in t)if(hf(t,a)){if(void 0===t[a]||void 0===n[a])return!1;if(r=df(t[a]),-1!==["object","array"].indexOf(r)&&yf(t[a],n[a]))continue;if("function"===r&&yf(t[a],n[a]))continue;if(t[a]!==n[a])return!1}for(var l in n)if(hf(n,l)&&void 0===t[l])return!1;return!0}function bf(){return!(-1!==["chrome","safari","firefox","opera"].indexOf(ff()))}function wf(e){var t=e.title,n=e.data,r=e.warn,o=void 0!==r&&r,i=e.debug,a=void 0!==i&&i,l=o?console.warn||console.error:console.log;a&&(t&&n?(console.groupCollapsed("%creact-joyride: ".concat(t),"color: #ff0044; font-weight: bold; font-size: 12px;"),Array.isArray(n)?n.forEach((function(e){js.plainObject(e)&&e.key?l.apply(console,[e.key,e.value]):l.apply(console,[e])})):l.apply(console,[n]),console.groupEnd()):console.error("Missing title or data props"))}var xf={action:"",controlled:!1,index:0,lifecycle:lf.INIT,size:0,status:sf.IDLE},Ef=["action","index","lifecycle","status"];function Af(e){var t=new Map,n=new Map,r=function(){function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=r.continuous,i=void 0!==o&&o,a=r.stepIndex,l=r.steps,s=void 0===l?[]:l;$c(this,e),Gc(this,"listener",void 0),Gc(this,"setSteps",(function(e){var r=t.getState(),o=r.size,i=r.status,a={size:e.length,status:i};n.set("steps",e),i===sf.WAITING&&!o&&e.length&&(a.status=sf.RUNNING),t.setState(a)})),Gc(this,"addListener",(function(e){t.listener=e})),Gc(this,"update",(function(e){if(!mf(e,Ef))throw new Error("State is not valid. Valid keys: ".concat(Ef.join(", ")));t.setState(Hc({},t.getNextState(Hc(Hc(Hc({},t.getState()),e),{},{action:e.action||rf.UPDATE}),!0)))})),Gc(this,"start",(function(e){var n=t.getState(),r=n.index,o=n.size;t.setState(Hc(Hc({},t.getNextState({action:rf.START,index:js.number(e)?e:r},!0)),{},{status:o?sf.RUNNING:sf.WAITING}))})),Gc(this,"stop",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=t.getState(),r=n.index,o=n.status;-1===[sf.FINISHED,sf.SKIPPED].indexOf(o)&&t.setState(Hc(Hc({},t.getNextState({action:rf.STOP,index:r+(e?1:0)})),{},{status:sf.PAUSED}))})),Gc(this,"close",(function(){var e=t.getState(),n=e.index;e.status===sf.RUNNING&&t.setState(Hc({},t.getNextState({action:rf.CLOSE,index:n+1})))})),Gc(this,"go",(function(e){var n=t.getState(),r=n.controlled,o=n.status;if(!r&&o===sf.RUNNING){var i=t.getSteps()[e];t.setState(Hc(Hc({},t.getNextState({action:rf.GO,index:e})),{},{status:i?o:sf.FINISHED}))}})),Gc(this,"info",(function(){return t.getState()})),Gc(this,"next",(function(){var e=t.getState(),n=e.index;e.status===sf.RUNNING&&t.setState(t.getNextState({action:rf.NEXT,index:n+1}))})),Gc(this,"open",(function(){t.getState().status===sf.RUNNING&&t.setState(Hc({},t.getNextState({action:rf.UPDATE,lifecycle:lf.TOOLTIP})))})),Gc(this,"prev",(function(){var e=t.getState(),n=e.index;e.status===sf.RUNNING&&t.setState(Hc({},t.getNextState({action:rf.PREV,index:n-1})))})),Gc(this,"reset",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=t.getState(),r=n.controlled;r||t.setState(Hc(Hc({},t.getNextState({action:rf.RESET,index:0})),{},{status:e?sf.RUNNING:sf.READY}))})),Gc(this,"skip",(function(){t.getState().status===sf.RUNNING&&t.setState({action:rf.SKIP,lifecycle:lf.INIT,status:sf.SKIPPED})})),this.setState({action:rf.INIT,controlled:js.number(a),continuous:i,index:js.number(a)?a:0,lifecycle:lf.INIT,status:s.length?sf.READY:sf.IDLE},!0),this.setSteps(s)}return qc(e,[{key:"setState",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.getState(),o=Hc(Hc({},r),e),i=o.action,a=o.index,l=o.lifecycle,s=o.size,u=o.status;t.set("action",i),t.set("index",a),t.set("lifecycle",l),t.set("size",s),t.set("status",u),n&&(t.set("controlled",e.controlled),t.set("continuous",e.continuous)),this.listener&&this.hasUpdatedState(r)&&this.listener(this.getState())}},{key:"getState",value:function(){return t.size?{action:t.get("action")||"",controlled:t.get("controlled")||!1,index:parseInt(t.get("index"),10),lifecycle:t.get("lifecycle")||"",size:t.get("size")||0,status:t.get("status")||""}:Hc({},xf)}},{key:"getNextState",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.getState(),r=n.action,o=n.controlled,i=n.index,a=n.size,l=n.status,s=js.number(e.index)?e.index:i,u=o&&!t?i:Math.min(Math.max(s,0),a);return{action:e.action||r,controlled:o,index:u,lifecycle:e.lifecycle||lf.INIT,size:e.size||a,status:u===a?sf.FINISHED:e.status||l}}},{key:"hasUpdatedState",value:function(e){return JSON.stringify(e)!==JSON.stringify(this.getState())}},{key:"getSteps",value:function(){var e=n.get("steps");return Array.isArray(e)?e:[]}},{key:"getHelpers",value:function(){return{close:this.close,go:this.go,info:this.info,next:this.next,open:this.open,prev:this.prev,reset:this.reset,skip:this.skip}}}]),e}();return new r(e)}function kf(){return document.scrollingElement||document.createElement("body")}function Cf(e){return e?e.getBoundingClientRect():{}}function Sf(e){return"string"==typeof e?document.querySelector(e):e}function Of(e){return e&&1===e.nodeType?getComputedStyle(e):{}}function Pf(e,t,n){var r=Ks()(e);return r.isSameNode(kf())?n?document:kf():r.scrollHeight>r.offsetHeight||t?r:(r.style.overflow="initial",kf())}function Tf(e,t){return!!e&&!Pf(e,t).isSameNode(kf())}function Lf(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"fixed";if(!(e&&e instanceof HTMLElement))return!1;var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&(Of(e).position===t||Lf(e.parentNode,t))}function _f(e){return e instanceof HTMLElement?e.offsetParent instanceof HTMLElement?_f(e.offsetParent)+e.offsetTop:e.offsetTop:0}!function(e){function t(t,n,r,o,i,a){var l=o||"<<anonymous>>",s=a||r;if(null==n[r])return t?new Error("Required ".concat(i," `").concat(s,"` was not specified in `").concat(l,"`.")):null;for(var u=arguments.length,c=new Array(u>6?u-6:0),f=6;f<u;f++)c[f-6]=arguments[f];return e.apply(void 0,[n,r,l,i,s].concat(c))}t.bind(null,!1).isRequired=t.bind(null,!0)}((function(t,n,r,o,i){var a=t[n],l=a;if(!e.isValidElement(a)&&(0,Zs.isValidElementType)(a)){var s={ref:function(){},step:{}};l=e.createElement(l,s)}if(js.string(a)||js.number(a)||!(0,Zs.isValidElementType)(a)||-1===[Zs.Element,Zs.ForwardRef].indexOf((0,Zs.typeOf)(l)))return new Error("Invalid ".concat(o," `").concat(i,"` supplied to `").concat(r,"`. Expected a React class or forwardRef."))}));var Mf={arrowColor:"#fff",backgroundColor:"#fff",beaconSize:36,overlayColor:"rgba(0, 0, 0, 0.5)",primaryColor:"#f04",spotlightShadow:"0 0 15px rgba(0, 0, 0, 0.5)",textColor:"#333",zIndex:100},Nf={backgroundColor:"transparent",border:0,borderRadius:0,color:"#555",cursor:"pointer",fontSize:16,lineHeight:1,padding:8,WebkitAppearance:"none"},Rf={borderRadius:4,position:"absolute"},jf={floaterProps:{options:{preventOverflow:{boundariesElement:"scrollParent"}},wrapperOptions:{offset:-18,position:!0}},locale:{back:"Back",close:"Close",last:"Last",next:"Next",open:"Open the dialog",skip:"Skip"},step:{event:"click",placement:"bottom",offset:10}};function If(e){var t=["beaconComponent","disableCloseOnEsc","disableOverlay","disableOverlayClose","disableScrolling","disableScrollParentFix","floaterProps","hideBackButton","locale","showProgress","showSkipButton","spotlightClicks","spotlightPadding","styles","tooltipComponent"];return Object.keys(e).filter((function(e){return-1!==t.indexOf(e)})).reduce((function(t,n){return t[n]=e[n],t}),{})}function Df(e,t){if(!e)return null;var n=eu().all([If(t),jf.step,e],{isMergeableObject:js.plainObject}),r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=eu()(Mf,e.options||{}),n=290;window.innerWidth>480&&(n=380),t.width&&(n=window.innerWidth<t.width?window.innerWidth-30:t.width);var r={bottom:0,left:0,overflow:"hidden",position:"absolute",right:0,top:0,zIndex:t.zIndex},o={beacon:Hc(Hc({},Nf),{},{display:"inline-block",height:t.beaconSize,position:"relative",width:t.beaconSize,zIndex:t.zIndex}),beaconInner:{animation:"joyride-beacon-inner 1.2s infinite ease-in-out",backgroundColor:t.primaryColor,borderRadius:"50%",display:"block",height:"50%",left:"50%",opacity:.7,position:"absolute",top:"50%",transform:"translate(-50%, -50%)",width:"50%"},beaconOuter:{animation:"joyride-beacon-outer 1.2s infinite ease-in-out",backgroundColor:"rgba(".concat(vf(t.primaryColor).join(","),", 0.2)"),border:"2px solid ".concat(t.primaryColor),borderRadius:"50%",boxSizing:"border-box",display:"block",height:"100%",left:0,opacity:.9,position:"absolute",top:0,transformOrigin:"center",width:"100%"},tooltip:{backgroundColor:t.backgroundColor,borderRadius:5,boxSizing:"border-box",color:t.textColor,fontSize:16,maxWidth:"100%",padding:15,position:"relative",width:n},tooltipContainer:{lineHeight:1.4,textAlign:"center"},tooltipTitle:{fontSize:18,margin:0},tooltipContent:{padding:"20px 10px"},tooltipFooter:{alignItems:"center",display:"flex",justifyContent:"flex-end",marginTop:15},tooltipFooterSpacer:{flex:1},buttonNext:Hc(Hc({},Nf),{},{backgroundColor:t.primaryColor,borderRadius:4,color:"#fff"}),buttonBack:Hc(Hc({},Nf),{},{color:t.primaryColor,marginLeft:"auto",marginRight:5}),buttonClose:Hc(Hc({},Nf),{},{color:t.textColor,height:14,padding:15,position:"absolute",right:0,top:0,width:14}),buttonSkip:Hc(Hc({},Nf),{},{color:t.textColor,fontSize:14}),overlay:Hc(Hc({},r),{},{backgroundColor:t.overlayColor,mixBlendMode:"hard-light"}),overlayLegacy:Hc({},r),overlayLegacyCenter:Hc(Hc({},r),{},{backgroundColor:t.overlayColor}),spotlight:Hc(Hc({},Rf),{},{backgroundColor:"gray"}),spotlightLegacy:Hc(Hc({},Rf),{},{boxShadow:"0 0 0 9999px ".concat(t.overlayColor,", ").concat(t.spotlightShadow)}),floaterStyles:{arrow:{color:t.arrowColor},options:{zIndex:t.zIndex}},options:t};return eu()(o,e)}(eu()(t.styles||{},e.styles||{})),o=Tf(Sf(e.target),n.disableScrollParentFix),i=eu().all([t.floaterProps||{},jf.floaterProps,n.floaterProps||{}]);return i.offset=n.offset,i.styles=eu()(i.styles||{},r.floaterStyles||{}),delete r.floaterStyles,i.offset+=t.spotlightPadding||e.spotlightPadding||0,e.placementBeacon&&(i.wrapperOptions.placement=e.placementBeacon),o&&(i.options.preventOverflow.boundariesElement="window"),Hc(Hc({},n),{},{locale:eu().all([jf.locale,t.locale||{},n.locale||{}]),floaterProps:i,styles:r})}function zf(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return js.plainObject(e)?!!e.target||(wf({title:"validateStep",data:"target is missing from the step",warn:!0,debug:t}),!1):(wf({title:"validateStep",data:"step must be an object",warn:!0,debug:t}),!1)}function Ff(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return js.array(e)?e.every((function(e){return zf(e,t)})):(wf({title:"validateSteps",data:"steps must be an array",warn:!0,debug:t}),!1)}var Bf=function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if($c(this,e),Gc(this,"element",void 0),Gc(this,"options",void 0),Gc(this,"canBeTabbed",(function(e){var t=e.tabIndex;return(null===t||t<0)&&(t=void 0),!isNaN(t)&&n.canHaveFocus(e)})),Gc(this,"canHaveFocus",(function(e){var t=e.nodeName.toLowerCase();return(/input|select|textarea|button|object/.test(t)&&!e.getAttribute("disabled")||"a"===t&&!!e.getAttribute("href"))&&n.isVisible(e)})),Gc(this,"findValidTabElements",(function(){return[].slice.call(n.element.querySelectorAll("*"),0).filter(n.canBeTabbed)})),Gc(this,"handleKeyDown",(function(e){var t=n.options.keyCode,r=void 0===t?9:t;e.keyCode===r&&n.interceptTab(e)})),Gc(this,"interceptTab",(function(e){e.preventDefault();var t=n.findValidTabElements(),r=e.shiftKey;if(t.length){var o=t.indexOf(document.activeElement);-1===o||!r&&o+1===t.length?o=0:r&&0===o?o=t.length-1:o+=r?-1:1,t[o].focus()}})),Gc(this,"isHidden",(function(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0,n=window.getComputedStyle(e);return!(!t||e.innerHTML)||t&&"visible"!==n.getPropertyValue("overflow")||"none"===n.getPropertyValue("display")})),Gc(this,"isVisible",(function(e){for(var t=e;t;)if(t instanceof HTMLElement){if(t===document.body)break;if(n.isHidden(t))return!1;t=t.parentNode}return!0})),Gc(this,"removeScope",(function(){window.removeEventListener("keydown",n.handleKeyDown)})),Gc(this,"checkFocus",(function(e){document.activeElement!==e&&(e.focus(),window.requestAnimationFrame((function(){return n.checkFocus(e)})))})),Gc(this,"setFocus",(function(){var e=n.options.selector;if(e){var t=n.element.querySelector(e);t&&window.requestAnimationFrame((function(){return n.checkFocus(t)}))}})),!(t instanceof HTMLElement))throw new TypeError("Invalid parameter: element must be an HTMLElement");this.element=t,this.options=r,window.addEventListener("keydown",this.handleKeyDown,!1),this.setFocus()},Vf=function(t){Qc(r,t);var n=nf(r);function r(e){var t;if($c(this,r),Gc(ef(t=n.call(this,e)),"setBeaconRef",(function(e){t.beacon=e})),!e.beaconComponent){var o=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css",i.id="joyride-beacon-animation",void 0!==e.nonce&&i.setAttribute("nonce",e.nonce),i.appendChild(document.createTextNode("\n        @keyframes joyride-beacon-inner {\n          20% {\n            opacity: 0.9;\n          }\n        \n          90% {\n            opacity: 0.7;\n          }\n        }\n        \n        @keyframes joyride-beacon-outer {\n          0% {\n            transform: scale(1);\n          }\n        \n          45% {\n            opacity: 0.7;\n            transform: scale(0.75);\n          }\n        \n          100% {\n            opacity: 0.9;\n            transform: scale(1);\n          }\n        }\n      ")),o.appendChild(i)}return t}return qc(r,[{key:"componentDidMount",value:function(){var e=this,t=this.props.shouldFocus;setTimeout((function(){js.domElement(e.beacon)&&t&&e.beacon.focus()}),0)}},{key:"componentWillUnmount",value:function(){var e=document.getElementById("joyride-beacon-animation");e&&e.parentNode.removeChild(e)}},{key:"render",value:function(){var t,n=this.props,r=n.beaconComponent,o=n.locale,i=n.onClickOrHover,a=n.styles,l={"aria-label":o.open,onClick:i,onMouseEnter:i,ref:this.setBeaconRef,title:o.open};if(r){var s=r;t=e.createElement(s,l)}else t=e.createElement("button",Xc({key:"JoyrideBeacon",className:"react-joyride__beacon",style:a.beacon,type:"button"},l),e.createElement("span",{style:a.beaconInner}),e.createElement("span",{style:a.beaconOuter}));return t}}]),r}(e.Component),Uf=function(t){var n=t.styles;return e.createElement("div",{key:"JoyrideSpotlight",className:"react-joyride__spotlight",style:n})},Wf=["mixBlendMode","zIndex"],Hf=function(t){Qc(r,t);var n=nf(r);function r(){var e;$c(this,r);for(var t=arguments.length,o=new Array(t),i=0;i<t;i++)o[i]=arguments[i];return Gc(ef(e=n.call.apply(n,[this].concat(o))),"_isMounted",!1),Gc(ef(e),"state",{mouseOverSpotlight:!1,isScrolling:!1,showSpotlight:!0}),Gc(ef(e),"handleMouseMove",(function(t){var n=e.state.mouseOverSpotlight,r=e.spotlightStyles,o=r.height,i=r.left,a=r.position,l=r.top,s=r.width,u="fixed"===a?t.clientY:t.pageY,c="fixed"===a?t.clientX:t.pageX,f=c>=i&&c<=i+s&&u>=l&&u<=l+o;f!==n&&e.updateState({mouseOverSpotlight:f})})),Gc(ef(e),"handleScroll",(function(){var t=Sf(e.props.target);e.scrollParent!==document?(e.state.isScrolling||e.updateState({isScrolling:!0,showSpotlight:!1}),clearTimeout(e.scrollTimeout),e.scrollTimeout=setTimeout((function(){e.updateState({isScrolling:!1,showSpotlight:!0})}),50)):Lf(t,"sticky")&&e.updateState({})})),Gc(ef(e),"handleResize",(function(){clearTimeout(e.resizeTimeout),e.resizeTimeout=setTimeout((function(){e._isMounted&&e.forceUpdate()}),100)})),e}return qc(r,[{key:"componentDidMount",value:function(){var e=this.props;e.debug,e.disableScrolling;var t=e.disableScrollParentFix,n=Sf(e.target);this.scrollParent=Pf(n,t,!0),this._isMounted=!0,window.addEventListener("resize",this.handleResize)}},{key:"componentDidUpdate",value:function(e){var t=this,n=this.props,r=n.lifecycle,o=n.spotlightClicks,i=$s(e,this.props).changed;i("lifecycle",lf.TOOLTIP)&&(this.scrollParent.addEventListener("scroll",this.handleScroll,{passive:!0}),setTimeout((function(){t.state.isScrolling||t.updateState({showSpotlight:!0})}),100)),(i("spotlightClicks")||i("disableOverlay")||i("lifecycle"))&&(o&&r===lf.TOOLTIP?window.addEventListener("mousemove",this.handleMouseMove,!1):r!==lf.TOOLTIP&&window.removeEventListener("mousemove",this.handleMouseMove))}},{key:"componentWillUnmount",value:function(){this._isMounted=!1,window.removeEventListener("mousemove",this.handleMouseMove),window.removeEventListener("resize",this.handleResize),clearTimeout(this.resizeTimeout),clearTimeout(this.scrollTimeout),this.scrollParent.removeEventListener("scroll",this.handleScroll)}},{key:"spotlightStyles",get:function(){var e=this.state.showSpotlight,t=this.props,n=t.disableScrollParentFix,r=t.spotlightClicks,o=t.spotlightPadding,i=t.styles,a=Sf(t.target),l=Cf(a),s=Lf(a),u=function(e,t,n){var r=Cf(e),o=Pf(e,n),i=Tf(e,n),a=0;o instanceof HTMLElement&&(a=o.scrollTop);var l=r.top+(i||Lf(e)?0:a);return Math.floor(l-t)}(a,o,n);return Hc(Hc({},bf()?i.spotlightLegacy:i.spotlight),{},{height:Math.round(l.height+2*o),left:Math.round(l.left-o),opacity:e?1:0,pointerEvents:r?"none":"auto",position:s?"fixed":"absolute",top:u,transition:"opacity 0.2s",width:Math.round(l.width+2*o)})}},{key:"updateState",value:function(e){this._isMounted&&this.setState(e)}},{key:"render",value:function(){var t=this.state,n=t.mouseOverSpotlight,r=t.showSpotlight,o=this.props,i=o.disableOverlay,a=o.disableOverlayClose,l=o.lifecycle,s=o.onClickOverlay,u=o.placement,c=o.styles;if(i||l!==lf.TOOLTIP)return null;var f=c.overlay;bf()&&(f="center"===u?c.overlayLegacyCenter:c.overlayLegacy);var d,p,h,m=Hc({cursor:a?"default":"pointer",height:(d=document,p=d.body,h=d.documentElement,p&&h?Math.max(p.scrollHeight,p.offsetHeight,h.clientHeight,h.scrollHeight,h.offsetHeight):0),pointerEvents:n?"none":"auto"},f),v="center"!==u&&r&&e.createElement(Uf,{styles:this.spotlightStyles});if("safari"===ff()){m.mixBlendMode,m.zIndex;var g=Jc(m,Wf);v=e.createElement("div",{style:Hc({},g)},v),delete m.backgroundColor}return e.createElement("div",{className:"react-joyride__overlay",style:m,onClick:s},v)}}]),r}(e.Component),$f=["styles"],Yf=["color","height","width"],qf=function(t){var n=t.styles,r=Jc(t,$f),o=n.color,i=n.height,a=n.width,l=Jc(n,Yf);return e.createElement("button",Xc({style:l,type:"button"},r),e.createElement("svg",{width:"number"==typeof a?"".concat(a,"px"):a,height:"number"==typeof i?"".concat(i,"px"):i,viewBox:"0 0 18 18",version:"1.1",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid"},e.createElement("g",null,e.createElement("path",{d:"M8.13911129,9.00268191 L0.171521827,17.0258467 C-0.0498027049,17.248715 -0.0498027049,17.6098394 0.171521827,17.8327545 C0.28204354,17.9443526 0.427188206,17.9998706 0.572051765,17.9998706 C0.71714958,17.9998706 0.862013139,17.9443526 0.972581703,17.8327545 L9.0000937,9.74924618 L17.0276057,17.8327545 C17.1384085,17.9443526 17.2832721,17.9998706 17.4281356,17.9998706 C17.5729992,17.9998706 17.718097,17.9443526 17.8286656,17.8327545 C18.0499901,17.6098862 18.0499901,17.2487618 17.8286656,17.0258467 L9.86135722,9.00268191 L17.8340066,0.973848225 C18.0553311,0.750979934 18.0553311,0.389855532 17.8340066,0.16694039 C17.6126821,-0.0556467968 17.254037,-0.0556467968 17.0329467,0.16694039 L9.00042166,8.25611765 L0.967006424,0.167268345 C0.745681892,-0.0553188426 0.387317931,-0.0553188426 0.165993399,0.167268345 C-0.0553311331,0.390136635 -0.0553311331,0.751261038 0.165993399,0.974176179 L8.13920499,9.00268191 L8.13911129,9.00268191 Z",fill:o}))))},Gf=function(t){Qc(r,t);var n=nf(r);function r(){return $c(this,r),n.apply(this,arguments)}return qc(r,[{key:"render",value:function(){var t=this.props,n=t.backProps,r=t.closeProps,o=t.continuous,i=t.index,a=t.isLastStep,l=t.primaryProps,s=t.size,u=t.skipProps,c=t.step,f=t.tooltipProps,d=c.content,p=c.hideBackButton,h=c.hideCloseButton,m=c.hideFooter,v=c.showProgress,g=c.showSkipButton,y=c.title,b=c.styles,w=c.locale,x=w.back,E=w.close,A=w.last,k=w.next,C=w.skip,S={primary:E};return o&&(S.primary=a?A:k,v&&(S.primary=e.createElement("span",null,S.primary," (",i+1,"/",s,")"))),g&&!a&&(S.skip=e.createElement("button",Xc({style:b.buttonSkip,type:"button","aria-live":"off"},u),C)),!p&&i>0&&(S.back=e.createElement("button",Xc({style:b.buttonBack,type:"button"},n),x)),S.close=!h&&e.createElement(qf,Xc({styles:b.buttonClose},r)),e.createElement("div",Xc({key:"JoyrideTooltip",className:"react-joyride__tooltip",style:b.tooltip},f),e.createElement("div",{style:b.tooltipContainer},y&&e.createElement("h4",{style:b.tooltipTitle,"aria-label":y},y),e.createElement("div",{style:b.tooltipContent},d)),!m&&e.createElement("div",{style:b.tooltipFooter},e.createElement("div",{style:b.tooltipFooterSpacer},S.skip),S.back,e.createElement("button",Xc({style:b.buttonNext,type:"button"},l),S.primary)),S.close)}}]),r}(e.Component),Xf=["beaconComponent","tooltipComponent"],Qf=function(t){Qc(r,t);var n=nf(r);function r(){var e;$c(this,r);for(var t=arguments.length,o=new Array(t),i=0;i<t;i++)o[i]=arguments[i];return Gc(ef(e=n.call.apply(n,[this].concat(o))),"handleClickBack",(function(t){t.preventDefault(),e.props.helpers.prev()})),Gc(ef(e),"handleClickClose",(function(t){t.preventDefault(),e.props.helpers.close()})),Gc(ef(e),"handleClickPrimary",(function(t){t.preventDefault();var n=e.props,r=n.continuous,o=n.helpers;r?o.next():o.close()})),Gc(ef(e),"handleClickSkip",(function(t){t.preventDefault(),e.props.helpers.skip()})),Gc(ef(e),"getElementsProps",(function(){var t=e.props,n=t.continuous,r=t.isLastStep,o=t.setTooltipRef,i=t.step,a=pf(i.locale.back),l=pf(i.locale.close),s=pf(i.locale.last),u=pf(i.locale.next),c=pf(i.locale.skip),f=n?u:l;return r&&(f=s),{backProps:{"aria-label":a,"data-action":"back",onClick:e.handleClickBack,role:"button",title:a},closeProps:{"aria-label":l,"data-action":"close",onClick:e.handleClickClose,role:"button",title:l},primaryProps:{"aria-label":f,"data-action":"primary",onClick:e.handleClickPrimary,role:"button",title:f},skipProps:{"aria-label":c,"data-action":"skip",onClick:e.handleClickSkip,role:"button",title:c},tooltipProps:{"aria-modal":!0,ref:o,role:"alertdialog"}}})),e}return qc(r,[{key:"render",value:function(){var t=this.props,n=t.continuous,r=t.index,o=t.isLastStep,i=t.size,a=t.step;a.beaconComponent;var l,s=a.tooltipComponent,u=Jc(a,Xf);if(s){var c=Hc(Hc({},this.getElementsProps()),{},{continuous:n,index:r,isLastStep:o,size:i,step:u}),f=s;l=e.createElement(f,c)}else l=e.createElement(Gf,Xc({},this.getElementsProps(),{continuous:n,index:r,isLastStep:o,size:i,step:a}));return l}}]),r}(e.Component),Kf=function(e){Qc(r,e);var n=nf(r);function r(e){var t;return $c(this,r),t=n.call(this,e),uf?(t.node=document.createElement("div"),e.id&&(t.node.id=e.id),document.body.appendChild(t.node),t):tf(t)}return qc(r,[{key:"componentDidMount",value:function(){uf&&(cf||this.renderReact15())}},{key:"componentDidUpdate",value:function(){uf&&(cf||this.renderReact15())}},{key:"componentWillUnmount",value:function(){uf&&this.node&&(cf||t.unmountComponentAtNode(this.node),document.body.removeChild(this.node))}},{key:"renderReact15",value:function(){if(!uf)return null;var e=this.props.children;return t.unstable_renderSubtreeIntoContainer(this,e,this.node),null}},{key:"renderReact16",value:function(){if(!uf||!cf)return null;var e=this.props.children;return t.createPortal(e,this.node)}},{key:"render",value:function(){return cf?this.renderReact16():null}}]),r}(e.Component),Zf=function(t){Qc(r,t);var n=nf(r);function r(){var e;$c(this,r);for(var t=arguments.length,o=new Array(t),i=0;i<t;i++)o[i]=arguments[i];return Gc(ef(e=n.call.apply(n,[this].concat(o))),"scope",{removeScope:function(){}}),Gc(ef(e),"handleClickHoverBeacon",(function(t){var n=e.props,r=n.step,o=n.update;"mouseenter"===t.type&&"hover"!==r.event||o({lifecycle:lf.TOOLTIP})})),Gc(ef(e),"handleClickOverlay",(function(){var t=e.props,n=t.helpers;t.step.disableOverlayClose||n.close()})),Gc(ef(e),"setTooltipRef",(function(t){e.tooltip=t})),Gc(ef(e),"setPopper",(function(t,n){var r=e.props,o=r.action,i=r.setPopper,a=r.update;"wrapper"===n?e.beaconPopper=t:e.tooltipPopper=t,i(t,n),e.beaconPopper&&e.tooltipPopper&&a({action:o===rf.CLOSE?rf.CLOSE:o,lifecycle:lf.READY})})),e}return qc(r,[{key:"componentDidMount",value:function(){var e=this.props,t=e.debug,n=e.index;wf({title:"step:".concat(n),data:[{key:"props",value:this.props}],debug:t})}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.action,r=t.callback,o=t.continuous,i=t.controlled,a=t.debug,l=t.index,s=t.lifecycle,u=t.size,c=t.status,f=t.step,d=t.update,p=$s(e,this.props),h=p.changed,m=p.changedFrom,v={action:n,controlled:i,index:l,lifecycle:s,size:u,status:c},g=o&&n!==rf.CLOSE&&(l>0||n===rf.PREV),y=h("action")||h("index")||h("lifecycle")||h("status"),b=m("lifecycle",[lf.TOOLTIP,lf.INIT],lf.INIT);if(h("action",[rf.NEXT,rf.PREV,rf.SKIP,rf.CLOSE])&&(b||i)&&r(Hc(Hc({},v),{},{index:e.index,lifecycle:lf.COMPLETE,step:e.step,type:of})),y&&f){var w=Sf(f.target),x=!!w,E=x&&function(e){if(!e)return!1;for(var t=e;t&&t!==document.body;){if(t instanceof HTMLElement){var n=getComputedStyle(t),r=n.display,o=n.visibility;if("none"===r||"hidden"===o)return!1}t=t.parentNode}return!0}(w);E?(m("status",sf.READY,sf.RUNNING)||m("lifecycle",lf.INIT,lf.READY))&&r(Hc(Hc({},v),{},{step:f,type:"step:before"})):(console.warn(x?"Target not visible":"Target not mounted",f),r(Hc(Hc({},v),{},{type:af,step:f})),i||d({index:l+(-1!==[rf.PREV].indexOf(n)?-1:1)}))}m("lifecycle",lf.INIT,lf.READY)&&d({lifecycle:gf(f)||g?lf.TOOLTIP:lf.BEACON}),h("index")&&wf({title:"step:".concat(s),data:[{key:"props",value:this.props}],debug:a}),h("lifecycle",lf.BEACON)&&r(Hc(Hc({},v),{},{step:f,type:"beacon"})),h("lifecycle",lf.TOOLTIP)&&(r(Hc(Hc({},v),{},{step:f,type:"tooltip"})),this.scope=new Bf(this.tooltip,{selector:"[data-action=primary]"}),this.scope.setFocus()),m("lifecycle",[lf.TOOLTIP,lf.INIT],lf.INIT)&&(this.scope.removeScope(),delete this.beaconPopper,delete this.tooltipPopper)}},{key:"componentWillUnmount",value:function(){this.scope.removeScope()}},{key:"open",get:function(){var e=this.props,t=e.step,n=e.lifecycle;return!(!gf(t)&&n!==lf.TOOLTIP)}},{key:"render",value:function(){var t=this.props,n=t.continuous,r=t.debug,o=t.helpers,i=t.index,a=t.lifecycle,l=t.nonce,s=t.shouldScroll,u=t.size,c=t.step,f=Sf(c.target);return zf(c)&&js.domElement(f)?e.createElement("div",{key:"JoyrideStep-".concat(i),className:"react-joyride__step"},e.createElement(Kf,{id:"react-joyride-portal"},e.createElement(Hf,Xc({},c,{debug:r,lifecycle:a,onClickOverlay:this.handleClickOverlay}))),e.createElement(Uc,Xc({component:e.createElement(Qf,{continuous:n,helpers:o,index:i,isLastStep:i+1===u,setTooltipRef:this.setTooltipRef,size:u,step:c}),debug:r,getPopper:this.setPopper,id:"react-joyride-step-".concat(i),isPositioned:c.isFixed||Lf(f),open:this.open,placement:c.placement,target:c.target},c.floaterProps),e.createElement(Vf,{beaconComponent:c.beaconComponent,locale:c.locale,nonce:l,onClickOrHover:this.handleClickHoverBeacon,shouldFocus:s,styles:c.styles}))):null}}]),r}(e.Component),Jf=function(t){Qc(r,t);var n=nf(r);function r(e){var t;return $c(this,r),Gc(ef(t=n.call(this,e)),"initStore",(function(){var e=t.props,n=e.debug,r=e.getHelpers,o=e.run,i=e.stepIndex;t.store=new Af(Hc(Hc({},t.props),{},{controlled:o&&js.number(i)})),t.helpers=t.store.getHelpers();var a=t.store.addListener;return wf({title:"init",data:[{key:"props",value:t.props},{key:"state",value:t.state}],debug:n}),a(t.syncState),r(t.helpers),t.store.getState()})),Gc(ef(t),"callback",(function(e){var n=t.props.callback;js.function(n)&&n(e)})),Gc(ef(t),"handleKeyboard",(function(e){var n=t.state,r=n.index,o=n.lifecycle,i=t.props.steps[r],a=window.Event?e.which:e.keyCode;o===lf.TOOLTIP&&27===a&&i&&!i.disableCloseOnEsc&&t.store.close()})),Gc(ef(t),"syncState",(function(e){t.setState(e)})),Gc(ef(t),"setPopper",(function(e,n){"wrapper"===n?t.beaconPopper=e:t.tooltipPopper=e})),Gc(ef(t),"shouldScroll",(function(e,t,n,r,o,i,a){return!e&&(0!==t||n||r===lf.TOOLTIP)&&"center"!==o.placement&&(!o.isFixed||!Lf(i))&&a.lifecycle!==r&&-1!==[lf.BEACON,lf.TOOLTIP].indexOf(r)})),t.state=t.initStore(),t}return qc(r,[{key:"componentDidMount",value:function(){if(uf){var e=this.props,t=e.disableCloseOnEsc,n=e.debug,r=e.run,o=e.steps,i=this.store.start;Ff(o,n)&&r&&i(),t||document.body.addEventListener("keydown",this.handleKeyboard,{passive:!0})}}},{key:"componentDidUpdate",value:function(e,t){if(uf){var n=this.state,r=n.action,o=n.controlled,i=n.index,a=n.lifecycle,l=n.status,s=this.props,u=s.debug,c=s.run,f=s.stepIndex,d=s.steps,p=e.steps,h=e.stepIndex,m=this.store,v=m.setSteps,g=m.reset,y=m.start,b=m.stop,w=m.update,x=$s(e,this.props).changed,E=$s(t,this.state),A=E.changed,k=E.changedFrom,C=Df(d[i],this.props),S=!yf(p,d),O=js.number(f)&&x("stepIndex"),P=Sf(null==C?void 0:C.target);if(S&&(Ff(d,u)?v(d):console.warn("Steps are not valid",d)),x("run")&&(c?y(f):b()),O){var T=h<f?rf.NEXT:rf.PREV;r===rf.STOP&&(T=rf.START),-1===[sf.FINISHED,sf.SKIPPED].indexOf(l)&&w({action:r===rf.CLOSE?rf.CLOSE:T,index:f,lifecycle:lf.INIT})}o||l!==sf.RUNNING||0!==i||P||(this.store.update({index:i+1}),this.callback(Hc(Hc({},this.state),{},{type:af,step:C})));var L=Hc(Hc({},this.state),{},{index:i,step:C});if(A("action",[rf.NEXT,rf.PREV,rf.SKIP,rf.CLOSE])&&A("status",sf.PAUSED)){var _=Df(d[t.index],this.props);this.callback(Hc(Hc({},L),{},{index:t.index,lifecycle:lf.COMPLETE,step:_,type:of}))}if(A("status",[sf.FINISHED,sf.SKIPPED])){var M=Df(d[t.index],this.props);o||this.callback(Hc(Hc({},L),{},{index:t.index,lifecycle:lf.COMPLETE,step:M,type:of})),this.callback(Hc(Hc({},L),{},{type:"tour:end",step:M,index:t.index})),g()}else k("status",[sf.IDLE,sf.READY],sf.RUNNING)?this.callback(Hc(Hc({},L),{},{type:"tour:start"})):(A("status")||A("action",rf.RESET))&&this.callback(Hc(Hc({},L),{},{type:"tour:status"}));C&&(this.scrollToStep(t),"center"===C.placement&&l===sf.RUNNING&&a===lf.INIT&&this.store.update({lifecycle:lf.READY}))}}},{key:"componentWillUnmount",value:function(){this.props.disableCloseOnEsc||document.body.removeEventListener("keydown",this.handleKeyboard)}},{key:"scrollToStep",value:function(e){var t=this.state,n=t.index,r=t.lifecycle,o=t.status,i=this.props,a=i.debug,l=i.disableScrolling,s=i.disableScrollParentFix,u=i.scrollToFirstStep,c=i.scrollOffset,f=i.scrollDuration,d=Df(i.steps[n],this.props);if(d){var p=Sf(d.target),h=this.shouldScroll(l,n,u,r,d,p,e);if(o===sf.RUNNING&&h){var m=Tf(p,s),v=Pf(p,s),g=Math.floor(function(e,t,n){if(!e)return 0;var r=Ks()(e),o=_f(e);return Tf(e,n)&&!function(e){return e.offsetParent!==document.body}(e)&&(o-=_f(r)),Math.floor(o-t)}(p,c,s))||0;if(wf({title:"scrollToStep",data:[{key:"index",value:n},{key:"lifecycle",value:r},{key:"status",value:o}],debug:a}),r===lf.BEACON&&this.beaconPopper){var y=this.beaconPopper,b=y.placement,w=y.popper;-1!==["bottom"].indexOf(b)||m||(g=Math.floor(w.top-c))}else if(r===lf.TOOLTIP&&this.tooltipPopper){var x=this.tooltipPopper,E=x.flipped,A=x.placement,k=x.popper;-1===["top","right","left"].indexOf(A)||E||m?g-=d.spotlightPadding:g=Math.floor(k.top-c)}g=g>=0?g:0,o===sf.RUNNING&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:kf(),n=arguments.length>2?arguments[2]:void 0;new Promise((function(r,o){var i=t.scrollTop,a=e>i?e-i:i-e;Xs().top(t,e,{duration:a<100?50:n},(function(e){return e&&"Element already at target scroll position"!==e.message?o(e):r()}))}))}(g,v,f)}}}},{key:"render",value:function(){if(!uf)return null;var t,n=this.state,r=n.index,o=n.status,i=this.props,a=i.continuous,l=i.debug,s=i.nonce,u=i.scrollToFirstStep,c=Df(i.steps[r],this.props);return o===sf.RUNNING&&c&&(t=e.createElement(Zf,Xc({},this.state,{callback:this.callback,continuous:a,debug:l,setPopper:this.setPopper,helpers:this.helpers,nonce:s,shouldScroll:!c.disableScrolling&&(0!==r||u),step:c,update:this.store.update}))),e.createElement("div",{className:"react-joyride"},t)}}]),r}(e.Component);Gc(Jf,"defaultProps",{continuous:!1,debug:!1,disableCloseOnEsc:!1,disableOverlay:!1,disableOverlayClose:!1,disableScrolling:!1,disableScrollParentFix:!1,getHelpers:function(){},hideBackButton:!1,run:!0,scrollOffset:20,scrollDuration:300,scrollToFirstStep:!1,showSkipButton:!1,showProgress:!1,spotlightClicks:!1,spotlightPadding:10,steps:[]});const ed=[{target:".p6o-magic-button",content:"Your journey starts here!",disableBeacon:!0}],td=function(n){return t.createPortal(e.createElement("div",{className:"p6o-welcome-wrapper"},e.createElement("div",{className:"p6o-welcome"},"Welcome to Peripleo",e.createElement("button",{onClick:n.onTakeTour},"Yes, take the tour"))),document.body)};function nd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var rd="p6o-been-here",od=!localStorage.getItem(rd);const id=function(t){var n,r,o=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return nd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nd(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return(0,e.useEffect)((function(){od&&localStorage.setItem(rd,!0)}),[]),e.createElement(e.Fragment,null,i?e.createElement(Jf,{steps:ed}):e.createElement(td,{onTakeTour:function(){return a(!0)}}))};function ad(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ld(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ad(Object(n),!0).forEach((function(t){sd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ad(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function sd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ud(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const fd=function(){var t=function(){let{matches:t}=(0,e.useContext)(p),n=t[t.length-1];return n?n.params:{}}().recordId,n=(0,e.useContext)(Fe).store,r=ud((0,e.useState)(),2),o=r[0],i=r[1],a=ud((0,e.useState)({stage:"LOADING_CONFIG"}),2),l=a[0],s=a[1],u=function(e){i(e),s({stage:"LOADING_DATA"})};return(0,e.useEffect)((function(){fetch("peripleo.config.json").then((function(e){return e.json()})).then(u).catch((function(){s({stage:"ERROR",cause:"NO_CONFIG"}),console.error("Error loading Peripleo config. Please add a valid `peripleo.config.json` to your application root.")}))}),[]),(0,e.useEffect)((function(){"LOADED"===l.stage&&setTimeout((function(){return s(ld(ld({},l),{},{stage:"CLOSE"}))}),2e3)}),[l]),e.createElement(e.Fragment,null,e.createElement(pe,null,"CLOSE"!==l.stage&&e.createElement(xl,{state:l,config:o})),o&&e.createElement(Ss,{config:o,dataAvailable:"LOADED"===l.stage||"CLOSE"===l.stage,loaded:"CLOSE"===l.stage,initialRecord:t,onMapLoaded:function(){var e=o.data;!(null!=e&&e.length)>0?s({stage:"ERROR",cause:"NO_DATA"}):e.reduce((function(t,r){var o=r.name,i=e.indexOf(r);return t.then((function(){return s({stage:"LOADING_DATA",dataset:o,progress:i/e.length,nodes:n.countNodes(),edges:n.countEdges()}),n.loadDataset(r).then((function(){return s(ld(ld({},l),{},{progress:(i+1)/e.length}))})).catch((function(e){throw s({stage:"ERROR",cause:"Dataset: "+o}),e}))}))}),Promise.resolve()).then((function(){s({stage:"LOADED",nodes:n.countNodes(),edges:n.countEdges(),progress:1})}))}}),od&&"CLOSE"===l.stage&&e.createElement(id,null))};var dd=a(379),pd=a.n(dd),hd=a(795),md=a.n(hd),vd=a(569),gd=a.n(vd),yd=a(565),bd=a.n(yd),wd=a(216),xd=a.n(wd),Ed=a(589),Ad=a.n(Ed),kd=a(800),Cd={};Cd.styleTagTransform=Ad(),Cd.setAttributes=bd(),Cd.insert=gd().bind(null,"head"),Cd.domAPI=md(),Cd.insertStyleElement=xd(),pd()(kd.Z,Cd),kd.Z&&kd.Z.locals&&kd.Z.locals,t.render(e.createElement(Be,null,e.createElement(L,null,e.createElement(g,null,e.createElement(m,null,e.createElement(m,{path:":recordId",element:e.createElement(fd,null)}),e.createElement(m,{path:"/",element:e.createElement(fd,null)}))))),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,