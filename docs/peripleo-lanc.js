/*! For license information please see peripleo-lanc.js.LICENSE.txt */
(()=>{var e,t,n,r,o={800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'html,body,#app{padding:0;margin:0;min-height:100vh;overflow:hidden;font-size:16px}html *,body *,#app *{font-family:"Quicksand",sans-serif}.p6o-hud{color:#3e3e3e}.p6o-hud .p6o-magic-button{position:absolute;left:20px;top:20px;width:60px;height:60px;font-size:34px;display:flex;align-items:center;justify-content:center;background-color:#f4f4f4;border:1px solid rgba(0,0,0,.2);box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(0,0,0,.14);z-index:9999;cursor:pointer;-webkit-border-radius:50%;-khtml-border-radius:50%;-moz-border-radius:50%;border-radius:50%}.p6o-hud .p6o-magic-button:hover{background-color:#fff;box-shadow:inset 2px 4px 18px #fff,inset -2px -3px 4px rgba(0,0,0,.15),0 0 12px rgba(255,255,255,.2)}.p6o-hud .p6o-hud-searchpanel{position:absolute;left:50px;top:22px;height:40px;padding-left:40px;box-sizing:border-box;background-color:#fcfcfc;box-shadow:inset 4px 1px 6px #fff,inset -1px -1px 2px rgba(0,0,0,.25),0 0 6px rgba(0,0,0,.1);border-radius:4px;overflow:hidden;z-index:0}.p6o-hud .p6o-hud-searchpanel input{outline:none;border:none;width:100%;height:100%;box-sizing:border-box;font-size:18px;outline:none;border:none;width:100%;height:100%;box-sizing:border-box;background-color:transparent}.p6o-loading{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#1a6dad6b;z-index:1}.p6o-loading .p6o-loading-center{position:absolute;top:0;left:0;width:100vw;height:100vh;color:#fff;display:flex;align-items:center;justify-content:center}.p6o-loading .p6o-loading-bottom{position:absolute;bottom:20px;left:20px;font-size:13px;color:#bfe1ff}.p6o-map-container{position:relative;height:100vh}.p6o-map-container .p6o-map-hover{position:absolute;background-color:#fff;padding:10px 12px;max-width:500px;-webkit-border-radius:2px;-khtml-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-box-shadow:2px 2px 14px rgba(0,0,0,.4);-moz-box-shadow:2px 2px 14px rgba(0,0,0,.4);box-shadow:2px 2px 14px rgba(0,0,0,.4)}.p6o-map-container.hover *{cursor:pointer}.p6o-map-container.loading{filter:blur(4px) grayscale(0.8) brightness(1.2) contrast(0.7)}.p6o-map-container.loading .p6o-hud{display:none}',"",{version:3,sources:["webpack://./src/index.scss","webpack://./src/hud/HUD.scss","webpack://./src/loading/Loading.scss","webpack://./src/map/Map.scss"],names:[],mappings:"AAAA,eACE,SAAA,CACA,QAAA,CACA,gBAAA,CACA,eAAA,CACA,cAAA,CAEA,qBACE,kCAAA,CCRJ,SACE,aAAA,CAEA,2BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,wBAAA,CACA,+BAAA,CACA,+FAAA,CACA,YAAA,CACA,cAAA,CDFF,yBCG2B,CDF1B,wBCE0B,CDDxB,sBCCwB,CAAA,iBAAA,CAG3B,iCACE,qBAAA,CACA,oGAAA,CAGF,8BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,WAAA,CACA,iBAAA,CACA,qBAAA,CACA,wBAAA,CACA,4FAAA,CACA,iBAAA,CACA,eAAA,CACA,SAAA,CAEA,oCACE,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,4BAAA,CCnDN,aACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,0BAAA,CACA,SAAA,CAEA,iCACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,UAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAGF,iCACE,iBAAA,CACA,WAAA,CACA,SAAA,CACA,cAAA,CACA,aAAA,CC1BJ,mBACE,iBAAA,CACA,YAAA,CAEA,kCACE,iBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CHOF,yBGN2B,CHO1B,wBGP0B,CHQxB,sBGRwB,CHSnB,iBGTmB,CHa3B,8CAAA,CACG,2CAAA,CACK,sCAAA,CGTV,2BACE,cAAA,CAGF,2BACE,6DAAA,CAEA,oCACE,YAAA",sourcesContent:["html, body, #app {\n  padding:0;\n  margin:0;\n  min-height:100vh;\n  overflow:hidden;\n  font-size:16px;\n  \n  * {\n    font-family:'Quicksand', sans-serif;\n  }\n\n}\n\n/** Mixins **/\n@mixin rounded-corners($radius) {\n  -webkit-border-radius:$radius;\n   -khtml-border-radius:$radius;\n     -moz-border-radius:$radius;\n          border-radius:$radius;\n}\n\n@mixin box-shadow($x, $y, $radius, $opacity) {\n  -webkit-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n     -moz-box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n          box-shadow:$x $y $radius rgba(0, 0, 0, $opacity);\n}\n\n@import './hud/HUD';\n@import './loading/Loading';\n@import './map/Map';",".p6o-hud {\n  color:#3e3e3e;\n\n  .p6o-magic-button {\n    position:absolute;\n    left:20px;\n    top:20px;\n    width:60px;\n    height:60px;\n    font-size:34px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    background-color:#f4f4f4;\n    border:1px solid rgba(0,0,0,0.2);\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(0,0,0,0.14);\n    z-index:9999;\n    cursor:pointer;\n    @include rounded-corners(50%);\n  }\n\n  .p6o-magic-button:hover {\n    background-color:#fff;\n    box-shadow:inset 2px 4px 18px #fff, inset -2px -3px 4px rgba(0,0,0,0.15), 0 0 12px rgba(255,255,255,0.2);\n  }\n\n  .p6o-hud-searchpanel {\n    position:absolute;\n    left:50px;\n    top:22px;\n    height:40px;\n    padding-left:40px;\n    box-sizing:border-box;\n    background-color:#fcfCfc;\n    box-shadow:inset 4px 1px 6px #fff, inset -1px -1px 2px rgba(0,0,0,0.25), 0 0 6px rgba(0,0,0,0.1);\n    border-radius:4px;\n    overflow:hidden;\n    z-index:0;\n\n    input {\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      font-size:18px;\n      outline:none;\n      border:none;\n      width:100%;\n      height:100%;\n      box-sizing:border-box;\n      background-color:transparent;\n    }\n\n  }\n\n}",".p6o-loading {\n  position:absolute;\n  top:0;\n  left:0;\n  width:100vw;\n  height:100vh;\n  background-color:#1a6dad6b;\n  z-index:1;\n\n  .p6o-loading-center {\n    position:absolute;\n    top:0;\n    left:0;\n    width:100vw;\n    height:100vh;\n    color:#fff;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n  }\n\n  .p6o-loading-bottom {\n    position:absolute;\n    bottom:20px;\n    left:20px;\n    font-size:13px;\n    color:#bfe1ff;\n  }\n\n}",".p6o-map-container {\n  position:relative;\n  height:100vh;\n\n  .p6o-map-hover {\n    position:absolute;\n    background-color:#fff;\n    padding:10px 12px;\n    max-width:500px;\n    @include rounded-corners(2px);\n    @include box-shadow(2px, 2px, 14px, 0.4);\n  }\n\n}\n\n.p6o-map-container.hover * {\n  cursor:pointer;\n}\n\n.p6o-map-container.loading {\n  filter: blur(4px) grayscale(0.8) brightness(1.2) contrast(0.7);\n\n  .p6o-hud {\n    display:none;\n  }\n\n}"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},245:e=>{e.exports=function(e){!function(e){if(!e)throw new Error("Eventify cannot use falsy object as events subject");for(var t=["on","fire","off"],n=0;n<t.length;++n)if(e.hasOwnProperty(t[n]))throw new Error("Subject cannot be eventified, since it already has property '"+t[n]+"'")}(e);var t=function(e){var t=Object.create(null);return{on:function(n,r,o){if("function"!=typeof r)throw new Error("callback is expected to be a function");var a=t[n];return a||(a=t[n]=[]),a.push({callback:r,ctx:o}),e},off:function(n,r){if(void 0===n)return t=Object.create(null),e;if(t[n])if("function"!=typeof r)delete t[n];else for(var o=t[n],a=0;a<o.length;++a)o[a].callback===r&&o.splice(a,1);return e},fire:function(n){var r,o=t[n];if(!o)return e;arguments.length>1&&(r=Array.prototype.splice.call(arguments,1));for(var a=0;a<o.length;++a){var i=o[a];i.callback.apply(i.ctx,r)}return e}}}(e);return e.on=t.on,e.off=t.off,e.fire=t.fire,e}},736:(e,t,n)=>{e.exports=function(e){if("uniqueLinkId"in(e=e||{})&&(console.warn("ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\nUse `multigraph` option instead\n","\n","Note: there is also change in default behavior: From now on each graph\nis considered to be not a multigraph by default (each edge is unique)."),e.multigraph=e.uniqueLinkId),void 0===e.multigraph&&(e.multigraph=!1),"function"!=typeof Map)throw new Error("ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph");var t,n=new Map,u=new Map,s={},c=0,f=e.multigraph?function(e,t,n){var r=l(e,t),o=s.hasOwnProperty(r);if(o||C(e,t)){o||(s[r]=0);var a="@"+ ++s[r];r=l(e+a,t+a)}return new i(e,t,n,r)}:function(e,t,n){var r=l(e,t),o=u.get(r);return o?(o.data=n,o):new i(e,t,n,r)},d=[],p=P,h=P,m=P,v=P,g={version:20,addNode:x,addLink:function(e,t,n){m();var r=w(e)||x(e),o=w(t)||x(t),i=f(e,t,n),l=u.has(i.id);return u.set(i.id,i),a(r,i),e!==t&&a(o,i),p(i,l?"update":"add"),v(),i},removeLink:function(e,t){return void 0!==t&&(e=C(e,t)),S(e)},removeNode:E,getNode:w,getNodeCount:k,getLinkCount:A,getEdgeCount:A,getLinksCount:A,getNodesCount:k,getLinks:function(e){var t=w(e);return t?t.links:null},forEachNode:M,forEachLinkedNode:function(e,t,r){var o=w(e);if(o&&o.links&&"function"==typeof t)return r?function(e,t,r){for(var o=e.values(),a=o.next();!a.done;){var i=a.value;if(i.fromId===t&&r(n.get(i.toId),i))return!0;a=o.next()}}(o.links,e,t):function(e,t,r){for(var o=e.values(),a=o.next();!a.done;){var i=a.value,l=i.fromId===t?i.toId:i.fromId;if(r(n.get(l),i))return!0;a=o.next()}}(o.links,e,t)},forEachLink:function(e){if("function"==typeof e)for(var t=u.values(),n=t.next();!n.done;){if(e(n.value))return!0;n=t.next()}},beginUpdate:m,endUpdate:v,clear:function(){m(),M((function(e){E(e.id)})),v()},hasLink:C,hasNode:w,getLink:C};return r(g),t=g.on,g.on=function(){return g.beginUpdate=m=_,g.endUpdate=v=T,p=y,h=b,g.on=t,t.apply(g,arguments)},g;function y(e,t){d.push({link:e,changeType:t})}function b(e,t){d.push({node:e,changeType:t})}function x(e,t){if(void 0===e)throw new Error("Invalid node identifier");m();var r=w(e);return r?(r.data=t,h(r,"update")):(r=new o(e,t),h(r,"add")),n.set(e,r),v(),r}function w(e){return n.get(e)}function E(e){var t=w(e);if(!t)return!1;m();var r=t.links;return r&&(r.forEach(S),t.links=null),n.delete(e),h(t,"remove"),v(),!0}function k(){return n.size}function A(){return u.size}function S(e){if(!e)return!1;if(!u.get(e.id))return!1;m(),u.delete(e.id);var t=w(e.fromId),n=w(e.toId);return t&&t.links.delete(e),n&&n.links.delete(e),p(e,"remove"),v(),!0}function C(e,t){if(void 0!==e&&void 0!==t)return u.get(l(e,t))}function P(){}function _(){c+=1}function T(){0==(c-=1)&&d.length>0&&(g.fire("changed",d),d.length=0)}function M(e){if("function"!=typeof e)throw new Error("Function is expected to iterate over graph nodes. You passed "+e);for(var t=n.values(),r=t.next();!r.done;){if(e(r.value))return!0;r=t.next()}}};var r=n(245);function o(e,t){this.id=e,this.links=null,this.data=t}function a(e,t){e.links?e.links.add(t):e.links=new Set([t])}function i(e,t,n,r){this.fromId=e,this.toId=t,this.data=n,this.id=r}function l(e,t){return e.toString()+"👉 "+t.toString()}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},582:function(e){e.exports=function(){"use strict";function e(e,r,o,a,i){!function e(n,r,o,a,i){for(;a>o;){if(a-o>600){var l=a-o+1,u=r-o+1,s=Math.log(l),c=.5*Math.exp(2*s/3),f=.5*Math.sqrt(s*c*(l-c)/l)*(u-l/2<0?-1:1);e(n,r,Math.max(o,Math.floor(r-u*c/l+f)),Math.min(a,Math.floor(r+(l-u)*c/l+f)),i)}var d=n[r],p=o,h=a;for(t(n,o,r),i(n[a],d)>0&&t(n,o,a);p<h;){for(t(n,p,h),p++,h--;i(n[p],d)<0;)p++;for(;i(n[h],d)>0;)h--}0===i(n[o],d)?t(n,o,h):t(n,++h,a),h<=r&&(o=h+1),r<=h&&(a=h-1)}}(e,r,o||0,a||e.length-1,i||n)}function t(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function n(e,t){return e<t?-1:e>t?1:0}var r=function(e){void 0===e&&(e=9),this._maxEntries=Math.max(4,e),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function o(e,t,n){if(!n)return t.indexOf(e);for(var r=0;r<t.length;r++)if(n(e,t[r]))return r;return-1}function a(e,t){i(e,0,e.children.length,t,e)}function i(e,t,n,r,o){o||(o=h(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var a=t;a<n;a++){var i=e.children[a];l(o,e.leaf?r(i):i)}return o}function l(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function u(e,t){return e.minX-t.minX}function s(e,t){return e.minY-t.minY}function c(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function f(e){return e.maxX-e.minX+(e.maxY-e.minY)}function d(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function p(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function h(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function m(t,n,r,o,a){for(var i=[n,r];i.length;)if(!((r=i.pop())-(n=i.pop())<=o)){var l=n+Math.ceil((r-n)/o/2)*o;e(t,l,n,r,a),i.push(n,l,l,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(e){var t=this.data,n=[];if(!p(e,t))return n;for(var r=this.toBBox,o=[];t;){for(var a=0;a<t.children.length;a++){var i=t.children[a],l=t.leaf?r(i):i;p(e,l)&&(t.leaf?n.push(i):d(e,l)?this._all(i,n):o.push(i))}t=o.pop()}return n},r.prototype.collides=function(e){var t=this.data;if(!p(e,t))return!1;for(var n=[];t;){for(var r=0;r<t.children.length;r++){var o=t.children[r],a=t.leaf?this.toBBox(o):o;if(p(e,a)){if(t.leaf||d(e,a))return!0;n.push(o)}}t=n.pop()}return!1},r.prototype.load=function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0;t<e.length;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(e){return e&&this._insert(e,this.data.height-1),this},r.prototype.clear=function(){return this.data=h([]),this},r.prototype.remove=function(e,t){if(!e)return this;for(var n,r,a,i=this.data,l=this.toBBox(e),u=[],s=[];i||u.length;){if(i||(i=u.pop(),r=u[u.length-1],n=s.pop(),a=!0),i.leaf){var c=o(e,i.children,t);if(-1!==c)return i.children.splice(c,1),u.push(i),this._condense(u),this}a||i.leaf||!d(i,l)?r?(n++,i=r.children[n],a=!1):i=null:(u.push(i),s.push(n),n=0,r=i,i=i.children[0])}return this},r.prototype.toBBox=function(e){return e},r.prototype.compareMinX=function(e,t){return e.minX-t.minX},r.prototype.compareMinY=function(e,t){return e.minY-t.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(e){return this.data=e,this},r.prototype._all=function(e,t){for(var n=[];e;)e.leaf?t.push.apply(t,e.children):n.push.apply(n,e.children),e=n.pop();return t},r.prototype._build=function(e,t,n,r){var o,i=n-t+1,l=this._maxEntries;if(i<=l)return a(o=h(e.slice(t,n+1)),this.toBBox),o;r||(r=Math.ceil(Math.log(i)/Math.log(l)),l=Math.ceil(i/Math.pow(l,r-1))),(o=h([])).leaf=!1,o.height=r;var u=Math.ceil(i/l),s=u*Math.ceil(Math.sqrt(l));m(e,t,n,s,this.compareMinX);for(var c=t;c<=n;c+=s){var f=Math.min(c+s-1,n);m(e,c,f,u,this.compareMinY);for(var d=c;d<=f;d+=u){var p=Math.min(d+u-1,f);o.children.push(this._build(e,d,p,r-1))}}return a(o,this.toBBox),o},r.prototype._chooseSubtree=function(e,t,n,r){for(;r.push(t),!t.leaf&&r.length-1!==n;){for(var o=1/0,a=1/0,i=void 0,l=0;l<t.children.length;l++){var u=t.children[l],s=c(u),f=(d=e,p=u,(Math.max(p.maxX,d.maxX)-Math.min(p.minX,d.minX))*(Math.max(p.maxY,d.maxY)-Math.min(p.minY,d.minY))-s);f<a?(a=f,o=s<o?s:o,i=u):f===a&&s<o&&(o=s,i=u)}t=i||t.children[0]}var d,p;return t},r.prototype._insert=function(e,t,n){var r=n?e:this.toBBox(e),o=[],a=this._chooseSubtree(r,this.data,t,o);for(a.children.push(e),l(a,r);t>=0&&o[t].children.length>this._maxEntries;)this._split(o,t),t--;this._adjustParentBBoxes(r,o,t)},r.prototype._split=function(e,t){var n=e[t],r=n.children.length,o=this._minEntries;this._chooseSplitAxis(n,o,r);var i=this._chooseSplitIndex(n,o,r),l=h(n.children.splice(i,n.children.length-i));l.height=n.height,l.leaf=n.leaf,a(n,this.toBBox),a(l,this.toBBox),t?e[t-1].children.push(l):this._splitRoot(n,l)},r.prototype._splitRoot=function(e,t){this.data=h([e,t]),this.data.height=e.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(e,t,n){for(var r,o,a,l,u,s,f,d=1/0,p=1/0,h=t;h<=n-t;h++){var m=i(e,0,h,this.toBBox),v=i(e,h,n,this.toBBox),g=(o=m,a=v,void 0,void 0,void 0,void 0,l=Math.max(o.minX,a.minX),u=Math.max(o.minY,a.minY),s=Math.min(o.maxX,a.maxX),f=Math.min(o.maxY,a.maxY),Math.max(0,s-l)*Math.max(0,f-u)),y=c(m)+c(v);g<d?(d=g,r=h,p=y<p?y:p):g===d&&y<p&&(p=y,r=h)}return r||n-t},r.prototype._chooseSplitAxis=function(e,t,n){var r=e.leaf?this.compareMinX:u,o=e.leaf?this.compareMinY:s;this._allDistMargin(e,t,n,r)<this._allDistMargin(e,t,n,o)&&e.children.sort(r)},r.prototype._allDistMargin=function(e,t,n,r){e.children.sort(r);for(var o=this.toBBox,a=i(e,0,t,o),u=i(e,n-t,n,o),s=f(a)+f(u),c=t;c<n-t;c++){var d=e.children[c];l(a,e.leaf?o(d):d),s+=f(a)}for(var p=n-t-1;p>=t;p--){var h=e.children[p];l(u,e.leaf?o(h):h),s+=f(u)}return s},r.prototype._adjustParentBBoxes=function(e,t,n){for(var r=n;r>=0;r--)l(t[r],e)},r.prototype._condense=function(e){for(var t=e.length-1,n=void 0;t>=0;t--)0===e[t].children.length?t>0?(n=e[t-1].children).splice(n.indexOf(e[t]),1):this.clear():a(e[t],this.toBBox)},r}()},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,k=60106,A=60107,S=60108,C=60114,P=60109,_=60110,T=60112,M=60113,L=60120,O=60115,R=60116,N=60121,z=60128,j=60129,D=60130,I=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;E=V("react.element"),k=V("react.portal"),A=V("react.fragment"),S=V("react.strict_mode"),C=V("react.profiler"),P=V("react.provider"),_=V("react.context"),T=V("react.forward_ref"),M=V("react.suspense"),L=V("react.suspense_list"),O=V("react.memo"),R=V("react.lazy"),N=V("react.block"),V("react.scope"),z=V("react.opaque.id"),j=V("react.debug_trace_mode"),D=V("react.offscreen"),I=V("react.legacy_hidden")}var F,B="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function Y(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case k:return"Portal";case C:return"Profiler";case S:return"StrictMode";case M:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case O:return X(e.type);case N:return X(e._render);case R:t=e._payload,e=e._init;try{return X(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function se(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Pe=null,_e=null;function Te(e){if(e=no(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),Ce(e.stateNode,e.type,t))}}function Me(e){Pe?_e?_e.push(e):_e=[e]:Pe=e}function Le(){if(Pe){var e=Pe,t=_e;if(_e=Pe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Oe(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ne(){}var ze=Oe,je=!1,De=!1;function Ie(){null===Pe&&null===_e||(Ne(),Le())}function Ve(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Fe=!1}function Ue(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,Ye=null,Xe={onError:function(e){$e=!0,We=e}};function qe(e,t,n,r,o,a,i,l,u){$e=!1,We=null,Ue.apply(Xe,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Qe(e)!==e)throw Error(i(188))}function Ke(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ze(o),e;if(a===r)return Ze(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function wt(e){function t(t){return xt(t,e)}if(0<at.length){xt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&xt(it,e),null!==lt&&xt(lt,e),null!==ut&&xt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},At={},St={};function Ct(e){if(At[e])return At[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return At[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Pt=Ct("animationend"),_t=Ct("animationiteration"),Tt=Ct("animationstart"),Mt=Ct("transitionend"),Lt=new Map,Ot=new Map,Rt=["abort","abort",Pt,"animationEnd",_t,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Ot.set(r,t),Lt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var zt=8;function jt(e){if(0!=(1&e))return zt=15,1;if(0!=(2&e))return zt=14,2;if(0!=(4&e))return zt=13,4;var t=24&e;return 0!==t?(zt=12,t):0!=(32&e)?(zt=11,32):0!=(t=192&e)?(zt=10,t):0!=(256&e)?(zt=9,256):0!=(t=3584&e)?(zt=8,t):0!=(4096&e)?(zt=7,4096):0!=(t=4186112&e)?(zt=6,t):0!=(t=62914560&e)?(zt=5,t):67108864&e?(zt=4,67108864):0!=(134217728&e)?(zt=3,134217728):0!=(t=805306368&e)?(zt=2,t):0!=(1073741824&e)?(zt=1,1073741824):(zt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return zt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=zt=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=jt(u),o=zt):0!=(l&=a)&&(r=jt(l),o=zt)}else 0!=(a=n&~i)?(r=jt(a),o=zt):0!==l&&(r=jt(l),o=zt);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(jt(t),o<=zt)return t;zt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function It(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Vt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Vt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Vt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,Yt=a.unstable_UserBlockingPriority,Xt=a.unstable_runWithPriority,qt=!0;function Qt(e,t,n,r){je||Ne();var o=Zt,a=je;je=!0;try{Re(o,e,t,n,r)}finally{(je=a)||Ie()}}function Gt(e,t,n,r){Xt(Yt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var o;if(qt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Kt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Kt(e,t,n,r){var o=Se(r);if(null!==(o=to(o))){var a=Qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ge(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(mn),gn=ln(o({},mn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),wn=ln(xn),En=ln(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Pn(){return Cn}var _n=o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=ln(_n),Mn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),On=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=ln(Rn),zn=[9,13,27,32],jn=f&&"CompositionEvent"in window,Dn=null;f&&"documentMode"in document&&(Dn=document.documentMode);var In=f&&"TextEvent"in window&&!Dn,Vn=f&&(!jn||Dn&&8<Dn&&11>=Dn),Fn=String.fromCharCode(32),Bn=!1;function Un(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Xn(e,t,n,r){Me(r),0<(t=jr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Gn(e){_r(e,0)}function Zn(e){if(Z(ro(e)))return e}function Kn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){qn&&(qn.detachEvent("onpropertychange",or),Qn=qn=null)}function or(e){if("value"===e.propertyName&&Zn(Qn)){var t=[];if(Xn(t,Qn,e,Se(e)),e=Gn,je)e(t);else{je=!0;try{Oe(e,t)}finally{je=!1,Ie()}}}}function ar(e,t,n){"focusin"===e?(rr(),Qn=n,(qn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Qn)}function lr(e,t){if("click"===e)return Zn(t)}function ur(e,t){if("input"===e||"change"===e)return Zn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,xr=null,wr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wr||null==yr||yr!==K(r)||(r="selectionStart"in(r=yr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&fr(xr,r)||(xr=r,0<(r=jr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(Rt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ar=0;Ar<kr.length;Ar++)Ot.set(kr[Ar],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(qe.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,He||(He=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Pr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Pr(o,l,s),a=u}}}if(He)throw e=Ye,He=!1,Ye=null,e}function Tr(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Lr(e){e[Mr]||(e[Mr]=!0,l.forEach((function(t){Cr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Cr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Rr(a,e,o,t),i.add(l))}function Rr(e,t,n,r){var o=Ot.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=Gt;break;default:o=Zt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=to(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{ze(e,t,n)}finally{De=!1,Ie()}}((function(){var r=a,o=Se(n),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ln;break;case Pt:case _t:case Tt:u=bn;break;case Mt:u=On;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Mn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ve(h,d))&&c.push(zr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!to(s)&&!s[Jr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?to(s):null)&&(s!==(f=Qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Mn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ro(u),p=null==s?l:ro(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Dr(p))h++;for(p=0,m=d;m;m=Dr(m))p++;for(;0<h-p;)c=Dr(c),h--;for(;0<p-h;)d=Dr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Dr(c),d=Dr(d)}c=null}else c=null;null!==u&&Ir(i,l,u,c,!1),null!==s&&null!==f&&Ir(i,f,s,c,!0)}if("select"===(u=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if(Yn(l))if(Jn)v=ur;else{v=ir;var g=ar}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=lr);switch(v&&(v=v(e,r))?Xn(i,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?ro(r):window,e){case"focusin":(Yn(g)||"true"===g.contentEditable)&&(yr=g,br=r,xr=null);break;case"focusout":xr=br=yr=null;break;case"mousedown":wr=!0;break;case"contextmenu":case"mouseup":case"dragend":wr=!1,Er(i,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":Er(i,n,o)}var y;if(jn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Vn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(g=jr(r,b)).length&&(b=new En(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=$n(n)))&&(b.data=y))),(y=In?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Bn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!jn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=jr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}_r(i,t)}))}function zr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ve(e,n))&&r.unshift(zr(e,a,o)),null!=(a=Ve(e,t))&&r.push(zr(e,a,o))),e=e.return}return r}function Dr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Ve(n,a))&&i.unshift(zr(n,u,l)):o||null!=(u=Ve(n,a))&&i.push(zr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Vr(){}var Fr=null,Br=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function $r(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Xr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Gr=Math.random().toString(36).slice(2),Zr="__reactFiber$"+Gr,Kr="__reactProps$"+Gr,Jr="__reactContainer$"+Gr,eo="__reactEvents$"+Gr;function to(e){var t=e[Zr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Zr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Zr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Zr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Kr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],lo=-1;function uo(e){return{current:e}}function so(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!=e.childContextTypes}function yo(){so(ho),so(po)}function bo(e,t,n){if(po.current!==fo)throw Error(i(168));co(po,t),co(ho,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,X(t)||"Unknown",a));return o({},n,r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=xo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,so(ho),so(po),co(po,e)):so(ho),co(ho,n)}var ko=null,Ao=null,So=a.unstable_runWithPriority,Co=a.unstable_scheduleCallback,Po=a.unstable_cancelCallback,_o=a.unstable_shouldYield,To=a.unstable_requestPaint,Mo=a.unstable_now,Lo=a.unstable_getCurrentPriorityLevel,Oo=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,No=a.unstable_NormalPriority,zo=a.unstable_LowPriority,jo=a.unstable_IdlePriority,Do={},Io=void 0!==To?To:function(){},Vo=null,Fo=null,Bo=!1,Uo=Mo(),$o=1e4>Uo?Mo:function(){return Mo()-Uo};function Wo(){switch(Lo()){case Oo:return 99;case Ro:return 98;case No:return 97;case zo:return 96;case jo:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return Oo;case 98:return Ro;case 97:return No;case 96:return zo;case 95:return jo;default:throw Error(i(332))}}function Yo(e,t){return e=Ho(e),So(e,t)}function Xo(e,t,n){return e=Ho(e),Co(e,t,n)}function qo(){if(null!==Fo){var e=Fo;Fo=null,Po(e)}Qo()}function Qo(){if(!Bo&&null!==Vo){Bo=!0;var e=0;try{var t=Vo;Yo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Vo=null}catch(t){throw null!==Vo&&(Vo=Vo.slice(e+1)),Co(Oo,qo),t}finally{Bo=!1}}}var Go=w.ReactCurrentBatchConfig;function Zo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=uo(null),Jo=null,ea=null,ta=null;function na(){ta=ea=Jo=null}function ra(e){var t=Ko.current;so(Ko),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Jo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ji=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Jo)throw Error(i(308));ea=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var la=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function sa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function da(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pa(e,t,n,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Il|=l,e.lanes=l,e.memoizedState=d}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ma=(new r.Component).refs;function va(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=su(),o=cu(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),fa(e,a),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=su(),r=cu(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),fa(e,o),fu(e,r,n)}};function ya(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,a))}function ba(e,t,n){var r=!1,o=fo,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=go(t)?mo:po.current,a=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function xa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function wa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=go(t)?mo:po.current,o.context=vo(e,a)),pa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(va(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),pa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ea=Array.isArray;function ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Aa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=$u(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ka(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=ka(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=qu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=ka(e,null,t),n.return=e,n;case k:return(t=qu(t,e.mode,n)).return=e,t}if(Ea(t)||U(t))return(t=Hu(t,e.mode,n,null)).return=e,t;Aa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===A?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(Ea(n)||U(n))return null!==o?null:f(e,t,n,r,null);Aa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===A?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ea(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);Aa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=U(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,s))&&(l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===A&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag){if(a.type===A){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}}else if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=ka(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===A?((r=Hu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Wu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,r,a),u.return=e,e=u)}return l(e);case k:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=qu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Xu(a,e.mode,u)).return=e,e=r),l(e);if(Ea(a))return m(e,r,a,u);if(U(a))return v(e,r,a,u);if(c&&Aa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,X(e.type)||"Component"))}return n(e,r)}}var Ca=Sa(!0),Pa=Sa(!1),_a={},Ta=uo(_a),Ma=uo(_a),La=uo(_a);function Oa(e){if(e===_a)throw Error(i(174));return e}function Ra(e,t){switch(co(La,t),co(Ma,e),co(Ta,_a),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(Ta),co(Ta,t)}function Na(){so(Ta),so(Ma),so(La)}function za(e){Oa(La.current);var t=Oa(Ta.current),n=pe(t,e.type);t!==n&&(co(Ma,e),co(Ta,n))}function ja(e){Ma.current===e&&(so(Ta),so(Ma))}var Da=uo(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Va=null,Fa=null,Ba=!1;function Ua(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function $a(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wa(e){if(Ba){var t=Fa;if(t){var n=t;if(!$a(e,t)){if(!(t=Xr(n.nextSibling))||!$a(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Va=e);Ua(Va,n)}Va=e,Fa=Xr(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Va=e}}function Ha(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Va=e}function Ya(e){if(e!==Va)return!1;if(!Ba)return Ha(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$r(t,e.memoizedProps))for(t=Fa;t;)Ua(e,t),t=Xr(t.nextSibling);if(Ha(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fa=Xr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fa=null}}else Fa=Va?Xr(e.stateNode.nextSibling):null;return!0}function Xa(){Fa=Va=null,Ba=!1}var qa=[];function Qa(){for(var e=0;e<qa.length;e++)qa[e]._workInProgressVersionPrimary=null;qa.length=0}var Ga=w.ReactCurrentDispatcher,Za=w.ReactCurrentBatchConfig,Ka=0,Ja=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Ka=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ga.current=null===e||null===e.memoizedState?Oi:Ri,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Ga.current=Ni,e=n(r,o)}while(ri)}if(Ga.current=Li,t=null!==ei&&null!==ei.next,Ka=0,ti=ei=Ja=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Ja.memoizedState=ti=e:ti=ti.next=e,ti}function ui(){if(null===ei){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Ja.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Ja.memoizedState=ti=e:ti=ti.next=e}return ti}function si(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ja.lanes|=c,Il|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,sr(r,t.memoizedState)||(ji=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fi(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);sr(a,t.memoizedState)||(ji=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,qa.push(t))),e)return n(t._source);throw qa.push(t),Error(i(350))}function pi(e,t,n,r){var o=Ml;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Ga.current,s=u.useState((function(){return di(o,t,n)})),c=s[1],f=s[0];s=ti;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ja;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!sr(l,e)){e=n(t._source),sr(f,e)||(c(e),e=cu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$t(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(m,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:f}).dispatch=c=Mi.bind(null,Ja,e),s.queue=e,s.baseQueue=null,f=di(o,t,n),s.memoizedState=s.baseState=f),f}function hi(e,t,n){return pi(ui(),e,t,n)}function mi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Mi.bind(null,Ja,e),[t.memoizedState,e]}function vi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function gi(e){return e={current:e},li().memoizedState=e}function yi(){return ui().memoizedState}function bi(e,t,n,r){var o=li();Ja.flags|=e,o.memoizedState=vi(1|t,n,void 0,void 0===r?null:r)}function xi(e,t,n,r){var o=ui();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void vi(t,n,a,r)}Ja.flags|=e,o.memoizedState=vi(1|t,n,a,r)}function wi(e,t){return bi(516,4,e,t)}function Ei(e,t){return xi(516,4,e,t)}function ki(e,t){return xi(4,2,e,t)}function Ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,xi(4,2,Ai.bind(null,t,e),n)}function Ci(){}function Pi(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _i(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ti(e,t){var n=Wo();Yo(98>n?98:n,(function(){e(!0)})),Yo(97<n?97:n,(function(){var n=Za.transition;Za.transition=1;try{e(!1),t()}finally{Za.transition=n}}))}function Mi(e,t,n){var r=su(),o=cu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,sr(u,l))return}catch(e){}fu(e,o,r)}}var Li={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},Oi={readContext:ia,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Mi.bind(null,Ja,e),[r.memoizedState,e]},useRef:gi,useState:mi,useDebugValue:Ci,useDeferredValue:function(e){var t=mi(e),n=t[0],r=t[1];return wi((function(){var t=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=mi(!1),t=e[0];return gi(e=Ti.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:z,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(i(355))})),n=mi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,vi(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return mi(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:Pi,useContext:ia,useEffect:Ei,useImperativeHandle:Si,useLayoutEffect:ki,useMemo:_i,useReducer:ci,useRef:yi,useState:function(){return ci(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=ci(si),n=t[0],r=t[1];return Ei((function(){var t=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=ci(si)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return ci(si)[0]},unstable_isNewReconciler:!1},Ni={readContext:ia,useCallback:Pi,useContext:ia,useEffect:Ei,useImperativeHandle:Si,useLayoutEffect:ki,useMemo:_i,useReducer:fi,useRef:yi,useState:function(){return fi(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=fi(si),n=t[0],r=t[1];return Ei((function(){var t=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=t}}),[e]),n},useTransition:function(){var e=fi(si)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return fi(si)[0]},unstable_isNewReconciler:!1},zi=w.ReactCurrentOwner,ji=!1;function Di(e,t,n,r){t.child=null===e?Pa(t,null,n,r):Ca(t,e.child,n,r)}function Ii(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||ji?(t.flags|=1,Di(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Vi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Uu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,a):(t.flags|=1,(e=$u(i,r)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,r,o,a){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(ji=!1,0==(a&o))return t.lanes=e.lanes,nl(e,t,a);0!=(16384&e.flags)&&(ji=!0)}return $i(e,t,n,r,a)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Di(e,t,o,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function $i(e,t,n,r,o){var a=go(n)?mo:po.current;return a=vo(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||ji?(t.flags|=1,Di(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Wi(e,t,n,r,o){if(go(n)){var a=!0;wo(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),wa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ia(s):vo(t,s=go(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&xa(t,i,r,s),la=!1;var d=t.memoizedState;i.state=d,pa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||ho.current||la?("function"==typeof c&&(va(t,n,c,r),u=t.memoizedState),(l=la||ya(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,sa(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Zo(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ia(u):vo(t,u=go(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&xa(t,i,r,u),la=!1,d=t.memoizedState,i.state=d,pa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||ho.current||la?("function"==typeof p&&(va(t,n,p,r),h=t.memoizedState),(s=la||ya(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Hi(e,t,n,r,a,o)}function Hi(e,t,n,r,o,a){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&Eo(t,n,!1),nl(e,t,a);r=t.stateNode,zi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ca(t,e.child,null,a),t.child=Ca(t,null,l,a)):Di(e,t,l,a),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Yi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ra(e,t.containerInfo)}var Xi,qi,Qi,Gi={dehydrated:null,retryLane:0};function Zi(e,t,n){var r,o=t.pendingProps,a=Da.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(Da,1&a),null===e?(void 0!==o.fallback&&Wa(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Gi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Gi,t.lanes=33554432,e):((n=Yu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=$u(i,l),null!==e?r=$u(e,r):(r=Hu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Gi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=$u(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Yu(t,o,0,null),n=Hu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function el(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Di(e,t,r.children,n),0!=(2&(r=Da.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Da,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ia(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=$u(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$u(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Na(),so(ho),so(po),Qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ya(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:ja(t);var a=Oa(La.current);if(n=t.type,null!==e&&null!=t.stateNode)qi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Oa(Ta.current),Ya(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Zr]=t,r[Kr]=l,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Tr(Sr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,l),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Tr("invalid",r);break;case"textarea":ue(r,l),Tr("invalid",r)}for(var s in ke(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Tr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Vr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Zr]=t,e[Kr]=r,Xi(e,t),t.stateNode=e,s=Ae(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),a=r;break;case"iframe":case"object":case"embed":Tr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Sr.length;a++)Tr(Sr[a],e);a=r;break;case"source":Tr("error",e),a=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),a=r;break;case"details":Tr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Tr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Tr("invalid",e);break;default:a=r}ke(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?we(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Tr("scroll",e):null!=f&&x(e,l,f,s))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Vr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Oa(La.current),Oa(Ta.current),Ya(t)?(r=t.stateNode,n=t.memoizedProps,r[Zr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Zr]=t,t.stateNode=r)}return null;case 13:return so(Da),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ya(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Da.current)?0===zl&&(zl=3):(0!==zl&&3!==zl||(zl=4),null===Ml||0==(134217727&Il)&&0==(134217727&Vl)||mu(Ml,Ol))),(r||n)&&(t.flags|=4),null);case 4:return Na(),null===e&&Lr(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(so(Da),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==zl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ia(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Da,1&Da.current|2),t.child}e=e.sibling}null!==r.tail&&$o()>$l&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ia(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Ba)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>$l&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=Da.current,co(Da,l?1&t|2:1&t),n):null;case 23:case 24:return xu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Na(),so(ho),so(po),Qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return ja(e),null;case 13:return so(Da),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(Da),null;case 4:return Na(),null;case 10:return ra(e),null;case 23:case 24:return xu(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Xi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Oa(Ta.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Vr)}for(f in ke(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Tr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===z?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xl||(Xl=!0,ql=r),ll(0,t)},n}function cl(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Yr(t.stateNode.containerInfo))}throw Error(i(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Zo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))))}throw Error(i(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vl(e,t){if(Ao&&"function"==typeof Ao.onCommitFiberUnmount)try{Ao.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){Du(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function gl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?xl(e,n,t):wl(e,n,t)}function xl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vr));else if(4!==r&&null!==(e=e.child))for(xl(e,t,n),e=e.sibling;null!==e;)xl(e,t,n),e=e.sibling}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(vl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ae(e,o),t=Ae(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?we(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ge(n,u):x(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=$o(),ml(t.child,!0)),void Al(t);case 19:return void Al(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(i(163))}function Al(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Cl=Math.ceil,Pl=w.ReactCurrentDispatcher,_l=w.ReactCurrentOwner,Tl=0,Ml=null,Ll=null,Ol=0,Rl=0,Nl=uo(0),zl=0,jl=null,Dl=0,Il=0,Vl=0,Fl=0,Bl=null,Ul=0,$l=1/0;function Wl(){$l=$o()+500}var Hl,Yl=null,Xl=!1,ql=null,Ql=null,Gl=!1,Zl=null,Kl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function su(){return 0!=(48&Tl)?$o():-1!==ou?ou:ou=$o()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===au&&(au=Dl),0!==Go.transition){0!==iu&&(iu=null!==Bl?Bl.pendingLanes:0),e=au;var t=4186112&~iu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Vt(0!=(4&Tl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(i(185));if(null===(e=du(e,t)))return null;Ut(e,t,n),e===Ml&&(Vl|=t,4===zl&&mu(e,Ol));var r=Wo();1===t?0!=(8&Tl)&&0==(48&Tl)?vu(e):(pu(e,n),0===Tl&&(Wl(),qo())):(0==(4&Tl)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Bl=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,jt(s);var f=zt;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Dt(e,e===Ml?Ol:0),t=zt,0===r)null!==n&&(n!==Do&&Po(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Do&&Po(n)}15===t?(n=vu.bind(null,e),null===Vo?(Vo=[n],Fo=Co(Oo,Qo)):Vo.push(n),n=Do):14===t?n=Xo(99,vu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Xo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,iu=au=0,0!=(48&Tl))throw Error(i(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=Dt(e,e===Ml?Ol:0);if(0===n)return null;var r=n,o=Tl;Tl|=16;var a=ku();for(Ml===e&&Ol===r||(Wl(),wu(e,r));;)try{Cu();break}catch(t){Eu(e,t)}if(na(),Pl.current=a,Tl=o,null!==Ll?r=0:(Ml=null,Ol=0,r=zl),0!=(Dl&Vl))wu(e,0);else if(0!==r){if(2===r&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(n=It(e))&&(r=Au(e,n))),1===r)throw t=jl,wu(e,0),mu(e,n),pu(e,$o()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Tu(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=Ul+500-$o())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){su(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Tu.bind(null,e),r);break}Tu(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=$o()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Cl(n/1960))-n)){e.timeoutHandle=Wr(Tu.bind(null,e),n);break}Tu(e);break;default:throw Error(i(329))}}return pu(e,$o()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Fl,t&=~Vl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function vu(e){if(0!=(48&Tl))throw Error(i(327));if(Ou(),e===Ml&&0!=(e.expiredLanes&Ol)){var t=Ol,n=Au(e,t);0!=(Dl&Vl)&&(n=Au(e,t=Dt(e,t)))}else n=Au(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(t=It(e))&&(n=Au(e,t))),1===n)throw n=jl,wu(e,0),mu(e,t),pu(e,$o()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tu(e),pu(e,$o()),null}function gu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}}function yu(e,t){var n=Tl;Tl&=-2,Tl|=8;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}}function bu(e,t){co(Nl,Rl),Rl|=t,Dl|=t}function xu(){Rl=Nl.current,so(Nl)}function wu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Ll)for(n=Ll.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Na(),so(ho),so(po),Qa();break;case 5:ja(r);break;case 4:Na();break;case 13:case 19:so(Da);break;case 10:ra(r);break;case 23:case 24:xu()}n=n.return}Ml=e,Ll=$u(e.current,null),Ol=Rl=Dl=t,zl=0,jl=null,Fl=Vl=Il=0}function Eu(e,t){for(;;){var n=Ll;try{if(na(),Ga.current=Li,ni){for(var r=Ja.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Ka=0,ti=ei=Ja=null,ri=!1,_l.current=null,null===n||null===n.return){zl=1,jl=t,Ll=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Ol,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Da.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ca(-1,1);y.tag=2,fa(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var x=Iu.bind(null,a,s,l);s.then(x,x)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((X(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==zl&&(zl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,da(d,sl(0,a,t));break e;case 1:a=u;var w=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Ql||!Ql.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,da(d,cl(d,a,t));break e}}d=d.return}while(null!==d)}_u(n)}catch(e){t=e,Ll===n&&null!==n&&(Ll=n=n.return);continue}break}}function ku(){var e=Pl.current;return Pl.current=Li,null===e?Li:e}function Au(e,t){var n=Tl;Tl|=16;var r=ku();for(Ml===e&&Ol===t||wu(e,t);;)try{Su();break}catch(t){Eu(e,t)}if(na(),Tl=n,Pl.current=r,null!==Ll)throw Error(i(261));return Ml=null,Ol=0,zl}function Su(){for(;null!==Ll;)Pu(Ll)}function Cu(){for(;null!==Ll&&!_o();)Pu(Ll)}function Pu(e){var t=Hl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?_u(e):Ll=t,_l.current=null}function _u(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Rl)))return void(Ll=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(Ll=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ll=t);Ll=t=e}while(null!==t);0===zl&&(zl=5)}function Tu(e){var t=Wo();return Yo(99,Mu.bind(null,e,t)),null}function Mu(e,t){do{Ou()}while(null!==Zl);if(0!=(48&Tl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-$t(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ml&&(Ll=Ml=null,Ol=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Tl,Tl|=32,_l.current=null,Fr=qt,vr(l=mr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===u&&++h===a&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Br={focusedElem:l,selectionRange:u},qt=!1,lu=null,uu=!1,Yl=r;do{try{Lu()}catch(e){if(null===Yl)throw Error(i(330));Du(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);lu=null,Yl=r;do{try{for(l=e;null!==Yl;){var b=Yl.flags;if(16&b&&ge(Yl.stateNode,""),128&b){var x=Yl.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:bl(Yl),Yl.flags&=-3;break;case 6:bl(Yl),Yl.flags&=-3,kl(Yl.alternate,Yl);break;case 1024:Yl.flags&=-1025;break;case 1028:Yl.flags&=-1025,kl(Yl.alternate,Yl);break;case 4:kl(Yl.alternate,Yl);break;case 8:El(l,u=Yl);var E=u.alternate;gl(u),null!==E&&gl(E)}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(i(330));Du(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);if(w=Br,x=mr(),b=w.focusedElem,l=w.selectionRange,x!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&vr(b)&&(x=l.start,void 0===(w=l.end)&&(w=x),"selectionStart"in b?(b.selectionStart=x,b.selectionEnd=Math.min(w,b.value.length)):(w=(x=b.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!w.extend&&E>l&&(u=l,l=E,E=u),u=pr(b,E),a=pr(b,l),u&&a&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==a.node||w.focusOffset!==a.offset)&&((x=x.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),E>l?(w.addRange(x),w.extend(a.node,a.offset)):(x.setEnd(a.node,a.offset),w.addRange(x))))),x=[];for(w=b;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<x.length;b++)(w=x[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!Fr,Br=Fr=null,e.current=n,Yl=r;do{try{for(b=e;null!==Yl;){var k=Yl.flags;if(36&k&&hl(b,Yl.alternate,Yl),128&k){x=void 0;var A=Yl.ref;if(null!==A){var S=Yl.stateNode;Yl.tag,x=S,"function"==typeof A?A(x):A.current=x}}Yl=Yl.nextEffect}}catch(e){if(null===Yl)throw Error(i(330));Du(Yl,e),Yl=Yl.nextEffect}}while(null!==Yl);Yl=null,Io(),Tl=o}else e.current=n;if(Gl)Gl=!1,Zl=e,Kl=t;else for(Yl=r;null!==Yl;)t=Yl.nextEffect,Yl.nextEffect=null,8&Yl.flags&&((k=Yl).sibling=null,k.stateNode=null),Yl=t;if(0===(r=e.pendingLanes)&&(Ql=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,Ao&&"function"==typeof Ao.onCommitFiberRoot)try{Ao.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,$o()),Xl)throw Xl=!1,e=ql,ql=null,e;return 0!=(8&Tl)||qo(),null}function Lu(){for(;null!==Yl;){var e=Yl.alternate;uu||null===lu||(0!=(8&Yl.flags)?Je(Yl,lu)&&(uu=!0):13===Yl.tag&&Sl(e,Yl)&&Je(Yl,lu)&&(uu=!0));var t=Yl.flags;0!=(256&t)&&pl(e,Yl),0==(512&t)||Gl||(Gl=!0,Xo(97,(function(){return Ou(),null}))),Yl=Yl.nextEffect}}function Ou(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,Yo(e,zu)}return!1}function Ru(e,t){Jl.push(t,e),Gl||(Gl=!0,Xo(97,(function(){return Ou(),null})))}function Nu(e,t){eu.push(t,e),Gl||(Gl=!0,Xo(97,(function(){return Ou(),null})))}function zu(){if(null===Zl)return!1;var e=Zl;if(Zl=null,0!=(48&Tl))throw Error(i(331));var t=Tl;Tl|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Tl=t,qo(),!0}function ju(e,t,n){fa(e,t=sl(0,t=il(n,t),1)),t=su(),null!==(e=du(e,1))&&(Ut(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)ju(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){ju(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){var o=cl(n,e=il(t,e),1);if(fa(n,o),o=su(),null!==(n=du(n,1)))Ut(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Iu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=su(),e.pingedLanes|=e.suspendedLanes&n,Ml===e&&(Ol&n)===n&&(4===zl||3===zl&&(62914560&Ol)===Ol&&500>$o()-Ul?wu(e,0):Fl|=n),pu(e,t)}function Vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),n=su(),null!==(e=du(e,t))&&(Ut(e,t,n),pu(e,n))}function Fu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new Fu(e,t,n,r)}function Uu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $u(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Uu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case A:return Hu(n.children,o,a,t);case j:l=8,o|=16;break;case S:l=8,o|=1;break;case C:return(e=Bu(12,n,t,8|o)).elementType=C,e.type=C,e.lanes=a,e;case M:return(e=Bu(13,n,t,o)).type=M,e.elementType=M,e.lanes=a,e;case L:return(e=Bu(19,n,t,o)).elementType=L,e.lanes=a,e;case D:return Yu(n,o,a,t);case I:return(e=Bu(24,n,t,o)).elementType=I,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case _:l=9;break e;case T:l=11;break e;case O:l=14;break e;case R:l=16,r=null;break e;case N:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Bu(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Hu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function Yu(e,t,n,r){return(e=Bu(23,e,r,t)).elementType=D,e.lanes=n,e}function Xu(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function qu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Gu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Zu(e,t,n,r){var o=t.current,a=su(),l=cu(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(go(s)){n=xo(n,s,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fa(o,t),fu(o,l,a),l}function Ku(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function es(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function ts(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Qu(e,t,null!=n&&!0===n.hydrate),t=Bu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ua(t),e[Jr]=n.current,Lr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function ns(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(i);l.call(e)}}Zu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ts(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(i);u.call(e)}}yu((function(){Zu(t,i,e,o)}))}return Ku(i)}function os(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ns(t))throw Error(i(200));return Gu(e,t,null,n)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)ji=!0;else{if(0==(n&r)){switch(ji=!1,t.tag){case 3:Yi(t),Xa();break;case 5:za(t);break;case 1:go(t.type)&&wo(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Zi(e,t,n):(co(Da,1&Da.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Da,1&Da.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Da,Da.current),r)break;return null;case 23:case 24:return t.lanes=0,Bi(e,t,n)}return nl(e,t,n)}ji=0!=(16384&e.flags)}else ji=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var a=!0;wo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&va(t,r,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,wa(t,r,e,n),t=Hi(null,t,r,!0,a,n)}else t.tag=0,Di(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Uu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===O)return 14}return 2}(o),e=Zo(o,e),a){case 0:t=$i(null,t,o,e,n);break e;case 1:t=Wi(null,t,o,e,n);break e;case 11:t=Ii(null,t,o,e,n);break e;case 14:t=Vi(null,t,o,Zo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,$i(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wi(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 3:if(Yi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,sa(e,t),pa(t,r,null,n),(r=t.memoizedState.element)===o)Xa(),t=nl(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Fa=Xr(t.stateNode.containerInfo.firstChild),Va=t,a=Ba=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],qa.push(a);for(n=Pa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Di(e,t,r,n),Xa();t=t.child}return t;case 5:return za(t),null===e&&Wa(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,$r(r,o)?l=null:null!==a&&$r(r,a)&&(t.flags|=16),Ui(e,t),Di(e,t,l,n),t.child;case 6:return null===e&&Wa(t),null;case 13:return Zi(e,t,n);case 4:return Ra(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ca(t,null,r,n):Di(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 7:return Di(e,t,t.pendingProps,n),t.child;case 8:case 12:return Di(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(co(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=sr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=ca(-1,n&-n)).tag=2,fa(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oa(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Di(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,Di(e,t,r,n),t.child;case 14:return a=Zo(o=t.type,t.pendingProps),Vi(e,t,o,a=Zo(o.type,a),r,n);case 15:return Fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(r)?(e=!0,wo(t)):e=!1,aa(t,n),ba(t,r,o),wa(t,r,o,n),Hi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Bi(e,t,n)}throw Error(i(156,t.tag))},ts.prototype.render=function(e){Zu(e,this._internalRoot,null,null)},ts.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Zu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,su()),es(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,su()),es(e,67108864))},nt=function(e){if(13===e.tag){var t=su(),n=cu(e);fu(e,n,t),es(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));Z(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Oe=gu,Re=function(e,t,n,r,o){var a=Tl;Tl|=4;try{return Yo(98,e.bind(null,t,n,r,o))}finally{0===(Tl=a)&&(Wl(),qo())}},Ne=function(){0==(49&Tl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,$o())}))}qo()}(),Ou())},ze=function(e,t){var n=Tl;Tl|=2;try{return e(t)}finally{0===(Tl=n)&&(Wl(),qo())}};var as={Events:[no,ro,oo,Me,Le,Ou,{current:!1}]},is={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ls={bundleType:is.bundleType,version:is.version,rendererPackageName:is.rendererPackageName,rendererConfig:is.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ke(e))?null:e.stateNode},findFiberByHostInstance:is.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var us=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!us.isDisabled&&us.supportsFiber)try{ko=us.inject(ls),Ao=us}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=as,t.createPortal=os,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ke(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Tl;if(0!=(48&n))return e(t);Tl|=1;try{if(e)return Yo(99,e.bind(null,t))}finally{Tl=n,qo()}},t.hydrate=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!0,n)},t.render=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ns(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=gu,t.unstable_createPortal=function(e,t){return os(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ns(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rs(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!E.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var S=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+C(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),P(i,t,n,"",(function(e){return e}))):null!=i&&(A(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(S,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+C(l=e[s],s);u+=P(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,n,c=r+C(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function L(){var e=M.current;if(null===e)throw Error(p(321));return e}var O={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?w.postMessage(null):(m=!1,v=null)}catch(e){throw w.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<S(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function A(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>S(i,n))void 0!==u&&0>S(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],_=1,T=null,M=3,L=!1,O=!1,R=!1;function N(e){for(var t=k(P);null!==t;){if(null===t.callback)A(P);else{if(!(t.startTime<=e))break;A(P),t.sortIndex=t.expirationTime,E(C,t)}t=k(P)}}function z(e){if(R=!1,N(e),!O)if(null!==k(C))O=!0,n(j);else{var t=k(P);null!==t&&r(z,t.startTime-e)}}function j(e,n){O=!1,R&&(R=!1,o()),L=!0;var a=M;try{for(N(n),T=k(C);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=T.callback;if("function"==typeof i){T.callback=null,M=T.priorityLevel;var l=i(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===k(C)&&A(C),N(n)}else A(C);T=k(C)}if(null!==T)var u=!0;else{var s=k(P);null!==s&&r(z,s.startTime-n),u=!1}return u}finally{T=null,M=a,L=!1}}var D=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){O||L||(O=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return k(C)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:_++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,E(P,e),null===k(C)&&e===k(P)&&(R?o():R=!0,r(z,i-l))):(e.sortIndex=u,E(C,e),O||L||(O=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var u=r(e,o),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,exports:{}};return o[e].call(n.exports,n,n.exports,i),n.exports}i.m=o,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+".peripleo-lanc.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="peripleo-lanc:",i.l=(e,t,o,a)=>{if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,i.nc&&l.setAttribute("nonce",i.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={179:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var a=i.p+i.u(t),l=new Error;i.l(a,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[a,l,u]=n,s=0;if(a.some((t=>0!==e[t]))){for(r in l)i.o(l,r)&&(i.m[r]=l[r]);u&&u(i)}for(t&&t(n);s<a.length;s++)o=a[s],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkperipleo_lanc=self.webpackChunkperipleo_lanc||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=i(294),t=i(935);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}var r,o=r||(r={});o.Pop="POP",o.Push="PUSH",o.Replace="REPLACE";function a(e){e.preventDefault(),e.returnValue=""}function l(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function s(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function c(e,t){if(!e)throw new Error(t)}const f=(0,e.createContext)(null),d=(0,e.createContext)(null),p=(0,e.createContext)({outlet:null,matches:[]});function h(t){return function(t){let n=(0,e.useContext)(p).outlet;return n?(0,e.createElement)(b.Provider,{value:t},n):n}(t.context)}function m(e){c(!1)}function v(t){let{basename:n="/",children:o=null,location:a,navigationType:i=r.Pop,navigator:l,static:u=!1}=t;y()&&c(!1);let p=T(n),h=(0,e.useMemo)((()=>({basename:p,navigator:l,static:u})),[p,l,u]);"string"==typeof a&&(a=s(a));let{pathname:m="/",search:v="",hash:g="",state:b=null,key:x="default"}=a,w=(0,e.useMemo)((()=>{let e=P(m,p);return null==e?null:{pathname:e,search:v,hash:g,state:b,key:x}}),[p,m,v,g,b,x]);return null==w?null:(0,e.createElement)(f.Provider,{value:h},(0,e.createElement)(d.Provider,{children:o,value:{location:w,navigationType:i}}))}function g(t){let{children:n,location:r}=t;return function(t,n){y()||c(!1);let{matches:r}=(0,e.useContext)(p),o=r[r.length-1],a=o?o.params:{},i=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let l,u=(y()||c(!1),(0,e.useContext)(d).location);if(n){var f;let e="string"==typeof n?s(n):n;"/"===i||(null==(f=e.pathname)?void 0:f.startsWith(i))||c(!1),l=e}else l=u;let m=l.pathname||"/",v=function(e,t,n){void 0===n&&(n="/");let r=P(("string"==typeof t?s(t):t).pathname||"/",n);if(null==r)return null;let o=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=S(o[e],r);return a}(t,{pathname:"/"===i?m:m.slice(i.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,a)=>(0,e.createElement)(p.Provider,{children:void 0!==o.route.element?o.route.element:(0,e.createElement)(h,null),value:{outlet:r,matches:n.concat(t.slice(0,a+1))}})),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},a,e.params),pathname:_([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:_([i,e.pathnameBase])}))),r)}(x(n),r)}function y(){return null!=(0,e.useContext)(d)}const b=(0,e.createContext)(null);function x(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,x(t.props.children));t.type!==m&&c(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=x(t.props.children)),n.push(r)})),n}function w(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(r)||c(!1),a.relativePath=a.relativePath.slice(r.length));let i=_([r,a.relativePath]),l=n.concat(a);e.children&&e.children.length>0&&(!0===e.index&&c(!1),w(e.children,t,l,i)),(null!=e.path||e.index)&&t.push({path:i,score:A(i,e.index),routesMeta:l})})),t}const E=/^:\w+$/,k=e=>"*"===e;function A(e,t){let n=e.split("/"),r=n.length;return n.some(k)&&(r+=-2),t&&(r+=2),n.filter((e=>!k(e))).reduce(((e,t)=>e+(E.test(t)?3:""===t?1:10)),r)}function S(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",s=C({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;a.push({params:r,pathname:_([o,s.pathname]),pathnameBase:_([o,s.pathnameBase]),route:c}),"/"!==s.pathnameBase&&(o=_([o,s.pathnameBase]))}return a}function C(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(l[n]||""),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const _=e=>e.join("/").replace(/\/\/+/g,"/"),T=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");function M(t){let{basename:o,children:i,window:c}=t,f=(0,e.useRef)();null==f.current&&(f.current=function(e){function t(){var e=s(p.location.hash.substr(1)),t=e.pathname,n=e.search;e=e.hash;var r=h.state||{};return[r.idx,{pathname:void 0===t?"/":t,search:void 0===n?"":n,hash:void 0===e?"":e,state:r.usr||null,key:r.key||"default"}]}function o(){if(m)x.call(m),m=null;else{var e=r.Pop,n=t(),o=n[0];if(n=n[1],x.length){if(null!=o){var a=g-o;a&&(m={action:e,location:n,retry:function(){d(-1*a)}},d(a))}}else f(e)}}function i(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=-1===(n=(t=p.location.href).indexOf("#"))?t:t.slice(0,n)),n+"#"+("string"==typeof e?e:u(e))}function c(e,t){return void 0===t&&(t=null),n({pathname:y.pathname,hash:"",search:""},"string"==typeof e?s(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function f(e){v=e,e=t(),g=e[0],y=e[1],b.call({action:v,location:y})}function d(e){h.go(e)}void 0===e&&(e={});var p=void 0===(e=e.window)?document.defaultView:e,h=p.history,m=null;p.addEventListener("popstate",o),p.addEventListener("hashchange",(function(){u(t()[1])!==u(y)&&o()}));var v=r.Pop,g=(e=t())[0],y=e[1],b=l(),x=l();return null==g&&(g=0,h.replaceState(n({},h.state,{idx:g}),"")),{get action(){return v},get location(){return y},createHref:i,push:function e(t,n){var o=r.Push,a=c(t,n);if(!x.length||(x.call({action:o,location:a,retry:function(){e(t,n)}}),0)){var l=[{usr:a.state,key:a.key,idx:g+1},i(a)];a=l[0],l=l[1];try{h.pushState(a,"",l)}catch(e){p.location.assign(l)}f(o)}},replace:function e(t,n){var o=r.Replace,a=c(t,n);x.length&&(x.call({action:o,location:a,retry:function(){e(t,n)}}),1)||(a=[{usr:a.state,key:a.key,idx:g},i(a)],h.replaceState(a[0],"",a[1]),f(o))},go:d,back:function(){d(-1)},forward:function(){d(1)},listen:function(e){return b.push(e)},block:function(e){var t=x.push(e);return 1===x.length&&p.addEventListener("beforeunload",a),function(){t(),x.length||p.removeEventListener("beforeunload",a)}}}}({window:c}));let d=f.current,[p,h]=(0,e.useState)({action:d.action,location:d.location});return(0,e.useLayoutEffect)((()=>d.listen(h)),[d]),(0,e.createElement)(v,{basename:o,children:i,location:p.location,navigationType:p.action,navigator:d})}var L=function(e,t){return L=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},L(e,t)};function O(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}L(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var R=function(){return R=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},R.apply(this,arguments)};function N(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function z(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function j(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;const D=1/60*1e3,I="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),V="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(I())),D);let F=!0,B=!1,U=!1;const $={delta:0,timestamp:0},W=["read","update","preRender","render","postRender"],H=W.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,a=!1;const i=new WeakSet,l={schedule:(e,a=!1,l=!1)=>{const u=l&&o,s=u?t:n;return a&&i.add(e),-1===s.indexOf(e)&&(s.push(e),u&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),i.delete(e)},process:u=>{if(o)a=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(u),i.has(r)&&(l.schedule(r),e())}o=!1,a&&(a=!1,l.process(u))}}};return l}((()=>B=!0)),e)),{}),Y=W.reduce(((e,t)=>{const n=H[t];return e[t]=(e,t=!1,r=!1)=>(B||Z(),n.schedule(e,t,r)),e}),{}),X=W.reduce(((e,t)=>(e[t]=H[t].cancel,e)),{}),q=W.reduce(((e,t)=>(e[t]=()=>H[t].process($),e)),{}),Q=e=>H[e].process($),G=e=>{B=!1,$.delta=F?D:Math.max(Math.min(e-$.timestamp,40),1),$.timestamp=e,U=!0,W.forEach(Q),U=!1,B&&(F=!1,V(G))},Z=()=>{B=!0,F=!0,U||V(G)},K=()=>$,J=Y;function ee(){var t=(0,e.useRef)(!1);return(0,e.useLayoutEffect)((function(){return t.current=!0,function(){t.current=!1}}),[]),t}var te=(0,e.createContext)(null);function ne(t){var n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}var re=0,oe=function(){return re++},ae=function(){return ne(oe)},ie=function(t){var n=t.children,r=t.initial,o=t.isPresent,a=t.onExitComplete,i=t.custom,l=t.presenceAffectsLayout,u=ne(le),s=ae(),c=(0,e.useMemo)((function(){return{id:s,initial:r,isPresent:o,custom:i,onExitComplete:function(e){var t,n;u.set(e,!0);try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(u.values()),o=r.next();!o.done;o=r.next())if(!o.value)return}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}null==a||a()},register:function(e){return u.set(e,!1),function(){return u.delete(e)}}}}),l?void 0:[o]);return(0,e.useMemo)((function(){u.forEach((function(e,t){return u.set(t,!1)}))}),[o]),e.useEffect((function(){!o&&!u.size&&(null==a||a())}),[o]),e.createElement(te.Provider,{value:c},n)};function le(){return new Map}var ue=(0,e.createContext)({}),se="undefined"!=typeof window,ce=se?e.useLayoutEffect:e.useEffect;function fe(t){return(0,e.useEffect)((function(){return function(){return t()}}),[])}var de=function(e){return e.key||""},pe=function(t){var n=t.children,r=t.custom,o=t.initial,a=void 0===o||o,i=t.onExitComplete,l=t.exitBeforeEnter,u=t.presenceAffectsLayout,s=void 0===u||u,c=z(function(){var t=ee(),n=z((0,e.useState)(0),2),r=n[0],o=n[1],a=(0,e.useCallback)((function(){t.current&&o(r+1)}),[r]);return[(0,e.useCallback)((function(){return J.postRender(a)}),[a]),r]}(),1),f=c[0],d=(0,e.useContext)(ue).forceRender;d&&(f=d);var p=ee(),h=function(t){var n=[];return e.Children.forEach(t,(function(t){(0,e.isValidElement)(t)&&n.push(t)})),n}(n),m=h,v=new Set,g=(0,e.useRef)(m),y=(0,e.useRef)(new Map).current,b=(0,e.useRef)(!0);if(ce((function(){b.current=!1,function(e,t){e.forEach((function(e){var n=de(e);t.set(n,e)}))}(h,y),g.current=m})),fe((function(){b.current=!0,y.clear(),v.clear()})),b.current)return e.createElement(e.Fragment,null,m.map((function(t){return e.createElement(ie,{key:de(t),isPresent:!0,initial:!!a&&void 0,presenceAffectsLayout:s},t)})));m=j([],z(m),!1);for(var x=g.current.map(de),w=h.map(de),E=x.length,k=0;k<E;k++){var A=x[k];-1===w.indexOf(A)&&v.add(A)}return l&&v.size&&(m=[]),v.forEach((function(t){if(-1===w.indexOf(t)){var n=y.get(t);if(n){var o=x.indexOf(t);m.splice(o,0,e.createElement(ie,{key:de(n),isPresent:!1,onExitComplete:function(){y.delete(t),v.delete(t);var e=g.current.findIndex((function(e){return e.key===t}));if(g.current.splice(e,1),!v.size){if(g.current=h,!1===p.current)return;f(),i&&i()}},custom:r,presenceAffectsLayout:s},n))}}})),m=m.map((function(t){var n=t.key;return v.has(n)?t:e.createElement(ie,{key:de(t),isPresent:!0,presenceAffectsLayout:s},t)})),e.createElement(e.Fragment,null,v.size?m:m.map((function(t){return(0,e.cloneElement)(t)})))};function he(e,t,n){if(null!==e)for(var r,o,a,i,l,u,s,c,f=0,d=0,p=e.type,h="FeatureCollection"===p,m="Feature"===p,v=h?e.features.length:1,g=0;g<v;g++){l=(c=!!(s=h?e.features[g].geometry:m?e.geometry:e)&&"GeometryCollection"===s.type)?s.geometries.length:1;for(var y=0;y<l;y++){var b=0,x=0;if(null!==(i=c?s.geometries[y]:s)){u=i.coordinates;var w=i.type;switch(f=!n||"Polygon"!==w&&"MultiPolygon"!==w?0:1,w){case null:break;case"Point":if(!1===t(u,d,g,b,x))return!1;d++,b++;break;case"LineString":case"MultiPoint":for(r=0;r<u.length;r++){if(!1===t(u[r],d,g,b,x))return!1;d++,"MultiPoint"===w&&b++}"LineString"===w&&b++;break;case"Polygon":case"MultiLineString":for(r=0;r<u.length;r++){for(o=0;o<u[r].length-f;o++){if(!1===t(u[r][o],d,g,b,x))return!1;d++}"MultiLineString"===w&&b++,"Polygon"===w&&x++}"Polygon"===w&&b++;break;case"MultiPolygon":for(r=0;r<u.length;r++){for(x=0,o=0;o<u[r].length;o++){for(a=0;a<u[r][o].length-f;a++){if(!1===t(u[r][o][a],d,g,b,x))return!1;d++}x++}b++}break;case"GeometryCollection":for(r=0;r<i.geometries.length;r++)if(!1===he(i.geometries[r],t,n))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function me(e){var t=[1/0,1/0,-1/0,-1/0];return he(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}me.default=me;const ve=me;var ge=i(736),ye=i.n(ge),be=i(582),xe=i.n(be),we=function(){function e(){}return e.prototype.expandToken=function(e){for(var t=[],n="",r=0,o=e.length;r<o;++r)n+=e.charAt(r),t.push(n);return t},e}(),Ee=function(){function e(){}return e.prototype.sanitize=function(e){return e?e.toLocaleLowerCase().trim():""},e}();function ke(e,t){t=t||[];for(var n=e=e||{},r=0;r<t.length;r++)if(null==(n=n[t[r]]))return null;return n}var Ae=function(){function e(e){this._uidFieldName=e,this._tokenToIdfCache={},this._tokenMap={}}var t=e.prototype;return t.indexDocument=function(e,t,n){this._tokenToIdfCache={};var r,o=this._tokenMap;"object"!=typeof o[e]?o[e]=r={$numDocumentOccurrences:0,$totalNumOccurrences:1,$uidMap:{}}:(r=o[e]).$totalNumOccurrences++;var a=r.$uidMap;"object"!=typeof a[t]?(r.$numDocumentOccurrences++,a[t]={$document:n,$numTokenOccurrences:1}):a[t].$numTokenOccurrences++},t.search=function(e,t){for(var n={},r=0,o=e.length;r<o;r++){var a,i=e[r],l=this._tokenMap[i];if(!l)return[];if(0===r)for(var u=0,s=(a=Object.keys(l.$uidMap)).length;u<s;u++)n[c=a[u]]=l.$uidMap[c].$document;else for(u=0,s=(a=Object.keys(n)).length;u<s;u++){var c=a[u];"object"!=typeof l.$uidMap[c]&&delete n[c]}}var f=[];for(var c in n)f.push(n[c]);var d=this._createCalculateTfIdf();return f.sort((function(n,r){return d(e,r,t)-d(e,n,t)}))},t._createCalculateIdf=function(){var e=this._tokenMap,t=this._tokenToIdfCache;return function(n,r){if(!t[n]){var o=void 0!==e[n]?e[n].$numDocumentOccurrences:0;t[n]=1+Math.log(r.length/(1+o))}return t[n]}},t._createCalculateTfIdf=function(){var e=this._tokenMap,t=this._uidFieldName,n=this._createCalculateIdf();return function(r,o,a){for(var i=0,l=0,u=r.length;l<u;++l){var s,c=r[l],f=n(c,a);f===1/0&&(f=0),s=t instanceof Array?o&&ke(o,t):o&&o[t],i+=(void 0!==e[c]&&void 0!==e[c].$uidMap[s]?e[c].$uidMap[s].$numTokenOccurrences:0)*f}return i}},e}(),Se=/[^a-zа-яё0-9\-']+/i,Ce=function(){function e(){}return e.prototype.tokenize=function(e){return e.split(Se).filter((function(e){return e}))},e}();function Pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _e=function(){function e(e){if(!e)throw Error("js-search requires a uid field name constructor parameter");this._uidFieldName=e,this._indexStrategy=new we,this._searchIndex=new Ae(e),this._sanitizer=new Ee,this._tokenizer=new Ce,this._documents=[],this._searchableFields=[]}var t,n,r=e.prototype;return r.addDocument=function(e){this.addDocuments([e])},r.addDocuments=function(e){this._documents=this._documents.concat(e),this.indexDocuments_(e,this._searchableFields)},r.addIndex=function(e){this._searchableFields.push(e),this.indexDocuments_(this._documents,[e])},r.search=function(e){var t=this._tokenizer.tokenize(this._sanitizer.sanitize(e));return this._searchIndex.search(t,this._documents)},r.indexDocuments_=function(e,t){this._initialized=!0;for(var n=this._indexStrategy,r=this._sanitizer,o=this._searchIndex,a=this._tokenizer,i=this._uidFieldName,l=0,u=e.length;l<u;l++){var s,c=e[l];s=i instanceof Array?ke(c,i):c[i];for(var f=0,d=t.length;f<d;f++){var p,h=t[f];if(null!=(p=h instanceof Array?ke(c,h):c[h])&&"string"!=typeof p&&p.toString&&(p=p.toString()),"string"==typeof p)for(var m=a.tokenize(r.sanitize(p)),v=0,g=m.length;v<g;v++)for(var y=m[v],b=n.expandToken(y),x=0,w=b.length;x<w;x++){var E=b[x];o.indexDocument(E,s,c)}}}},t=e,(n=[{key:"indexStrategy",set:function(e){if(this._initialized)throw Error("IIndexStrategy cannot be set after initialization");this._indexStrategy=e},get:function(){return this._indexStrategy}},{key:"sanitizer",set:function(e){if(this._initialized)throw Error("ISanitizer cannot be set after initialization");this._sanitizer=e},get:function(){return this._sanitizer}},{key:"searchIndex",set:function(e){if(this._initialized)throw Error("ISearchIndex cannot be set after initialization");this._searchIndex=e},get:function(){return this._searchIndex}},{key:"tokenizer",set:function(e){if(this._initialized)throw Error("ITokenizer cannot be set after initialization");this._tokenizer=e},get:function(){return this._tokenizer}}])&&Pe(t.prototype,n),e}();function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){Le(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Le(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Re(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t,n){return t&&Ne(e.prototype,t),n&&Ne(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var De=function(e){var t;return null===(t=e.geometry)||void 0===t?void 0:t.type},Ie=ze((function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),je(this,"loadDataset",(function(e,n){var r=e.name,o=e.format,a=e.src;return"LINKED_PLACES"===o?function(e,t,n){return fetch(t).then((function(e){return e.json()})).then((function(t){console.log("Importing LP: ".concat(e," (").concat(t.features.length," features)")),n.graph.beginUpdate();var r=t.features.map((function(t){var r=function(e,t){var n=Me({},e),r=$e(e["@id"]);return delete n["@id"],n.id=r,n.title=n.properties.title,n.dataset=t,n.properties.id=r,n.properties.dataset=t,n}(t,e);n.graph.addNode(r.id,r);var o=We(r);return o&&n.spatialIndex.insert(Me(Me({},o),{},{node:r})),r})),o=r.filter((function(e){var t;return(null===(t=e.links)||void 0===t?void 0:t.length)>0})).reduce((function(e,t){return e+t.links.reduce((function(e,r){if(r.identifier||r.id){var o=t.id,a=$e(r.id||r.identifier);return r.id=a,n.graph.addLink(o,a,r),e+1}return console.warn("Link does not declare identifier",r,"on node",t),e}),0)}),0);return n.graph.endUpdate(),console.log("Indexing..."),console.time("Took"),n.index(r),console.timeEnd("Took"),{nodes:r.length,edges:o}}))}(r,a,t):new Promise((function(e,t){return t(new Error("Unsupported format: "+o))}))})),je(this,"index",(function(e){return t.searchIndex.addDocuments(e.map((function(e){return function(e){var t,n;return{id:e.id,dataset:e.dataset,title:e.title,description:null===(t=e.properties)||void 0===t?void 0:t.description,names:e.name?[e.name]:null===(n=e.names)||void 0===n?void 0:n.map((function(e){return e.toponym}))}}(e)})))})),je(this,"countNodes",(function(){var e=0;return t.graph.forEachNode((function(){e+=1})),e})),je(this,"countEdges",(function(){var e=0;return t.graph.forEachLink((function(){e+=1})),e})),je(this,"getNode",(function(e){var n;return null===(n=t.graph.getNode(e))||void 0===n?void 0:n.data})),je(this,"getNodesInBounds",(function(e,n){var r,o,a,i;if(4===e.length){var l=Oe(e,4);r=l[0],o=l[1],a=l[2],i=l[3]}else{var u=Oe(e,2),s=Oe(u[0],2);r=s[0],o=s[1];var c=Oe(u[1],2);a=c[0],i=c[1]}var f=t.spatialIndex.search({minX:r,minY:o,maxX:a,maxY:i}),d=n?f.filter((function(e){return e.node.dataset===n})):f;return d.filter((function(e){return"Point"===e.node.geometry.type||function(e){return e.minX>r&&e.maxX<a&&e.minY>o&&e.maxY<i}(e)})).map((function(e){return e.node}))})),je(this,"search",(function(e){return t.searchIndex.search(e).map((function(e){return t.getNode(e.id)}))})),je(this,"searchMappable",(function(e){return t.search(e).filter(De)})),this.graph=ye()(),this.spatialIndex=new(xe()),this.searchIndex=new _e("id"),this.searchIndex.tokenizer={tokenize:function(e){return e.replace(/[.,'"#!$%^&*;:{}=\-_`~()]/g,"").split(/[\s,-]+/)}},this.searchIndex.addIndex("title"),this.searchIndex.addIndex("description"),this.searchIndex.addIndex("names")})),Ve=(0,e.createContext)(),Fe=function(t){var n=t.children,r={store:new Ie};return e.createElement(Ve.Provider,{value:r},n)};function Be(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ue(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $e=function(e){return e.replace("https://","http://")},We=function(e){if(e.geometry){if("Point"===e.geometry.type){var t=Be(e.geometry.coordinates,2),n=t[0],r=t[1];return{minX:n,minY:r,maxX:n,maxY:r}}try{var o=Be(ve(e),4);return{minX:o[0],minY:o[1],maxX:o[2],maxY:o[3]}}catch(t){console.error("Error parsing geometry for node",e)}}},He=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},Ye={measureLayout:He(["layout","layoutId","drag"]),animation:He(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:He(["exit"]),drag:He(["drag","dragControls"]),focus:He(["whileFocus"]),hover:He(["whileHover","onHoverStart","onHoverEnd"]),tap:He(["whileTap","onTap","onTapStart","onTapCancel"]),pan:He(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:He(["whileInView","onViewportEnter","onViewportLeave"])},Xe=(0,e.createContext)({strict:!1}),qe=Object.keys(Ye),Qe=qe.length,Ge=(0,e.createContext)({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),Ze=(0,e.createContext)({}),Ke={current:null},Je=!1;function et(t,n,r,o){var a,i,l=(0,e.useContext)(Xe),u=(0,e.useContext)(Ze).visualElement,s=(0,e.useContext)(te),c=(!Je&&function(){if(Je=!0,"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return Ke.current=e.matches};e.addListener(t),t()}else Ke.current=!1}(),a=z((0,e.useState)(Ke.current),1)[0],"never"!==(i=(0,e.useContext)(Ge).reducedMotion)&&("always"===i||a)),f=(0,e.useRef)(void 0);o||(o=l.renderer),!f.current&&o&&(f.current=o(t,{visualState:n,parent:u,props:r,presenceId:null==s?void 0:s.id,blockInitialAnimation:!1===(null==s?void 0:s.initial),shouldReduceMotion:c}));var d=f.current;return ce((function(){null==d||d.syncRender()})),(0,e.useEffect)((function(){var e;null===(e=null==d?void 0:d.animationState)||void 0===e||e.animateChanges()})),ce((function(){return function(){return null==d?void 0:d.notifyUnmount()}}),[]),d}function tt(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function nt(e){return Array.isArray(e)}function rt(e){return"string"==typeof e||nt(e)}function ot(e,t,n,r,o){var a;return void 0===r&&(r={}),void 0===o&&(o={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),"string"==typeof t&&(t=null===(a=e.variants)||void 0===a?void 0:a[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),t}function at(e,t,n){var r=e.getProps();return ot(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function it(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||rt(e.initial)||rt(e.animate)||rt(e.whileHover)||rt(e.whileDrag)||rt(e.whileTap)||rt(e.whileFocus)||rt(e.exit)}function lt(e){return Boolean(it(e)||e.variants)}function ut(e){return Array.isArray(e)?e.join(" "):e}const st=(e,t,n)=>-n*e+n*t+e;function ct(e,t){return t?e*(1e3/t):0}function ft(e,t){-1===e.indexOf(t)&&e.push(t)}function dt(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var pt=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return ft(this.subscriptions,e),function(){return dt(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var a=this.subscriptions[o];a&&a(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),ht=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new pt,this.velocityUpdateSubscribers=new pt,this.renderSubscribers=new pt,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=K(),o=r.delta,a=r.timestamp;n.lastUpdated!==a&&(n.timeDelta=o,n.lastUpdated=a,J.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return J.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?ct(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function mt(e){return new ht(e)}var vt=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)};const gt=(e,t,n)=>Math.min(Math.max(n,e),t);function yt(e,t){return e*Math.sqrt(1-t*t)}const bt=["duration","bounce"],xt=["stiffness","damping","mass"];function wt(e,t){return t.some((t=>void 0!==e[t]))}function Et(e){var{from:t=0,to:n=1,restSpeed:r=2,restDelta:o}=e,a=N(e,["from","to","restSpeed","restDelta"]);const i={done:!1,value:t};let{stiffness:l,damping:u,mass:s,velocity:c,duration:f,isResolvedFromDuration:d}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!wt(e,xt)&&wt(e,bt)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,a,i=1-t;i=gt(.05,1,i),e=gt(.01,10,e/1e3),i<1?(o=t=>{const r=t*i,o=r*e;return.001-(r-n)/yt(t,i)*Math.exp(-o)},a=t=>{const r=t*i*e,a=r*n+n,l=Math.pow(i,2)*Math.pow(t,2)*e,u=Math.exp(-r),s=yt(Math.pow(t,2),i);return(.001-o(t)>0?-1:1)*((a-l)*u)/s}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,a=t=>Math.exp(-t*e)*(e*e*(n-t)));const l=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(o,a,5/e);if(e*=1e3,isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*r;return{stiffness:t,damping:2*i*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(a),p=kt,h=kt;function m(){const e=c?-c/1e3:0,r=n-t,a=u/(2*Math.sqrt(l*s)),i=Math.sqrt(l/s)/1e3;if(void 0===o&&(o=Math.min(Math.abs(n-t)/100,.4)),a<1){const t=yt(i,a);p=o=>{const l=Math.exp(-a*i*o);return n-l*((e+a*i*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},h=n=>{const o=Math.exp(-a*i*n);return a*i*o*(Math.sin(t*n)*(e+a*i*r)/t+r*Math.cos(t*n))-o*(Math.cos(t*n)*(e+a*i*r)-t*r*Math.sin(t*n))}}else if(1===a)p=t=>n-Math.exp(-i*t)*(r+(e+i*r)*t);else{const t=i*Math.sqrt(a*a-1);p=o=>{const l=Math.exp(-a*i*o),u=Math.min(t*o,300);return n-l*((e+a*i*r)*Math.sinh(u)+t*r*Math.cosh(u))/t}}}return m(),{next:e=>{const t=p(e);if(d)i.done=e>=f;else{const a=1e3*h(e),l=Math.abs(a)<=r,u=Math.abs(n-t)<=o;i.done=l&&u}return i.value=i.done?n:t,i},flipTarget:()=>{c=-c,[t,n]=[n,t],m()}}}Et.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const kt=e=>0,At=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},St=(e,t)=>n=>Math.max(Math.min(n,t),e),Ct=e=>e%1?Number(e.toFixed(5)):e,Pt=/(-)?([\d]*\.?[\d])+/g,_t=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,Tt=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function Mt(e){return"string"==typeof e}const Lt={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Ot=Object.assign(Object.assign({},Lt),{transform:St(0,1)}),Rt=Object.assign(Object.assign({},Lt),{default:1}),Nt=(e,t)=>n=>Boolean(Mt(n)&&Tt.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),zt=(e,t,n)=>r=>{if(!Mt(r))return r;const[o,a,i,l]=r.match(Pt);return{[e]:parseFloat(o),[t]:parseFloat(a),[n]:parseFloat(i),alpha:void 0!==l?parseFloat(l):1}},jt=St(0,255),Dt=Object.assign(Object.assign({},Lt),{transform:e=>Math.round(jt(e))}),It={test:Nt("rgb","red"),parse:zt("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Dt.transform(e)+", "+Dt.transform(t)+", "+Dt.transform(n)+", "+Ct(Ot.transform(r))+")"},Vt={test:Nt("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:It.transform},Ft=e=>({test:t=>Mt(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),Bt=Ft("deg"),Ut=Ft("%"),$t=Ft("px"),Wt=Ft("vh"),Ht=Ft("vw"),Yt=Object.assign(Object.assign({},Ut),{parse:e=>Ut.parse(e)/100,transform:e=>Ut.transform(100*e)}),Xt={test:Nt("hsl","hue"),parse:zt("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Ut.transform(Ct(t))+", "+Ut.transform(Ct(n))+", "+Ct(Ot.transform(r))+")"};function qt(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function Qt({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,a=0,i=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,l=2*n-r;o=qt(l,r,e+1/3),a=qt(l,r,e),i=qt(l,r,e-1/3)}else o=a=i=n;return{red:Math.round(255*o),green:Math.round(255*a),blue:Math.round(255*i),alpha:r}}const Gt=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},Zt=[Vt,It,Xt],Kt=e=>Zt.find((t=>t.test(e))),Jt=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,en=(e,t)=>{let n=Kt(e),r=Kt(t);Jt(e),Jt(t);let o=n.parse(e),a=r.parse(t);n===Xt&&(o=Qt(o),n=It),r===Xt&&(a=Qt(a),r=It);const i=Object.assign({},o);return e=>{for(const t in i)"alpha"!==t&&(i[t]=Gt(o[t],a[t],e));return i.alpha=st(o.alpha,a.alpha,e),n.transform(i)}},tn={test:e=>It.test(e)||Vt.test(e)||Xt.test(e),parse:e=>It.test(e)?It.parse(e):Xt.test(e)?Xt.parse(e):Vt.parse(e),transform:e=>Mt(e)?e:e.hasOwnProperty("red")?It.transform(e):Xt.transform(e)},nn="${c}",rn="${n}";function on(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(_t);r&&(n=r.length,e=e.replace(_t,nn),t.push(...r.map(tn.parse)));const o=e.match(Pt);return o&&(e=e.replace(Pt,rn),t.push(...o.map(Lt.parse))),{values:t,numColors:n,tokenised:e}}function an(e){return on(e).values}function ln(e){const{values:t,numColors:n,tokenised:r}=on(e),o=t.length;return e=>{let t=r;for(let r=0;r<o;r++)t=t.replace(r<n?nn:rn,r<n?tn.transform(e[r]):Ct(e[r]));return t}}const un=e=>"number"==typeof e?0:e,sn={test:function(e){var t,n,r,o;return isNaN(e)&&Mt(e)&&(null!==(n=null===(t=e.match(Pt))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(o=null===(r=e.match(_t))||void 0===r?void 0:r.length)&&void 0!==o?o:0)>0},parse:an,createTransformer:ln,getAnimatableNone:function(e){const t=an(e);return ln(e)(t.map(un))}},cn=e=>"number"==typeof e,fn=(e,t)=>n=>t(e(n)),dn=(...e)=>e.reduce(fn);function pn(e,t){return cn(e)?n=>st(e,t,n):tn.test(e)?en(e,t):gn(e,t)}const hn=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>pn(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},mn=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=pn(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function vn(e){const t=sn.parse(e),n=t.length;let r=0,o=0,a=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?a++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:a}}const gn=(e,t)=>{const n=sn.createTransformer(t),r=vn(e),o=vn(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&r.numNumbers>=o.numNumbers?dn(hn(r.parsed,o.parsed),n):n=>`${n>0?t:e}`},yn=(e,t)=>n=>st(e,t,n);function bn(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const a=e.length;t.length,!r||!Array.isArray(r)||r.length,e[0]>e[a-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const i=function(e,t,n){const r=[],o=n||("number"==typeof(a=e[0])?yn:"string"==typeof a?tn.test(a)?en:gn:Array.isArray(a)?hn:"object"==typeof a?mn:void 0);var a;const i=e.length-1;for(let n=0;n<i;n++){let a=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;a=dn(e,a)}r.push(a)}return r}(t,r,o),l=2===a?function([e,t],[n]){return r=>n(At(e,t,r))}(e,i):function(e,t){const n=e.length,r=n-1;return o=>{let a=0,i=!1;if(o<=e[0]?i=!0:o>=e[r]&&(a=r-1,i=!0),!i){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);a=t-1}const l=At(e[a],e[a+1],o);return t[a](l)}}(e,i);return n?t=>l(gt(e[0],e[a-1],t)):l}const xn=e=>t=>1-e(1-t),wn=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,En=e=>t=>t*t*((e+1)*t-e),kn=e=>e,An=(2,e=>Math.pow(e,2));const Sn=xn(An),Cn=wn(An),Pn=e=>1-Math.sin(Math.acos(e)),_n=xn(Pn),Tn=wn(_n),Mn=En(1.525),Ln=xn(Mn),On=wn(Mn),Rn=(e=>{const t=En(1.525);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))})(),Nn=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},zn=xn(Nn);function jn(e,t){return e.map((()=>t||Cn)).splice(0,e.length-1)}function Dn({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const a={done:!1,value:e},i=Array.isArray(t)?t:[e,t],l=function(e,t){return e.map((e=>e*t))}(r&&r.length===i.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(i),o);function u(){return bn(l,i,{ease:Array.isArray(n)?n:jn(i,n)})}let s=u();return{next:e=>(a.value=s(e),a.done=e>=o,a),flipTarget:()=>{i.reverse(),s=u()}}}const In={keyframes:Dn,spring:Et,decay:function({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:a}){const i={done:!1,value:t};let l=n*e;const u=t+l,s=void 0===a?u:a(u);return s!==u&&(l=s-t),{next:e=>{const t=-l*Math.exp(-e/r);return i.done=!(t>o||t<-o),i.value=i.done?s:s+t,i},flipTarget:()=>{}}}};function Vn(e,t,n=0){return e-t-n}const Fn=e=>{const t=({delta:t})=>e(t);return{start:()=>J.update(t,!0),stop:()=>X.update(t)}};function Bn(e){var t,n,{from:r,autoplay:o=!0,driver:a=Fn,elapsed:i=0,repeat:l=0,repeatType:u="loop",repeatDelay:s=0,onPlay:c,onStop:f,onComplete:d,onRepeat:p,onUpdate:h}=e,m=N(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let v,g,y,{to:b}=m,x=0,w=m.duration,E=!1,k=!0;const A=function(e){if(Array.isArray(e.to))return Dn;if(In[e.type])return In[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?Dn:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?Et:Dn}(m);(null===(n=(t=A).needsInterpolation)||void 0===n?void 0:n.call(t,r,b))&&(y=bn([0,100],[r,b],{clamp:!1}),r=0,b=100);const S=A(Object.assign(Object.assign({},m),{from:r,to:b}));return o&&(null==c||c(),v=a((function(e){if(k||(e=-e),i+=e,!E){const e=S.next(Math.max(0,i));g=e.value,y&&(g=y(g)),E=k?e.done:i<=0}null==h||h(g),E&&(0===x&&(null!=w||(w=i)),x<l?function(e,t,n,r){return r?e>=t+n:e<=-n}(i,w,s,k)&&(x++,"reverse"===u?(k=x%2==0,i=function(e,t,n=0,r=!0){return r?Vn(t+-e,t,n):t-(e-t)+n}(i,w,s,k)):(i=Vn(i,w,s),"mirror"===u&&S.flipTarget()),E=!1,p&&p()):(v.stop(),d&&d()))})),v.start()),{stop:()=>{null==f||f(),v.stop()}}}var Un=function(e){return 1e3*e};const $n=(e,t)=>1-3*t+3*e,Wn=(e,t)=>3*t-6*e,Hn=e=>3*e,Yn=(e,t,n)=>(($n(t,n)*e+Wn(t,n))*e+Hn(t))*e,Xn=(e,t,n)=>3*$n(t,n)*e*e+2*Wn(t,n)*e+Hn(t),qn=.1;function Qn(e,t,n,r){if(e===t&&n===r)return kn;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=Yn(t*qn,e,n);return a=>0===a||1===a?a:Yn(function(t){let r=0,a=1;for(;10!==a&&o[a]<=t;++a)r+=qn;--a;const i=r+(t-o[a])/(o[a+1]-o[a])*qn,l=Xn(i,e,n);return l>=.001?function(e,t,n,r){for(let o=0;o<8;++o){const o=Xn(t,n,r);if(0===o)return t;t-=(Yn(t,n,r)-e)/o}return t}(t,i,e,n):0===l?i:function(e,t,n,r,o){let a,i,l=0;do{i=t+(n-t)/2,a=Yn(i,r,o)-e,a>0?n=i:t=i}while(Math.abs(a)>1e-7&&++l<10);return i}(t,r,r+qn,e,n)}(a),t,r)}var Gn={linear:kn,easeIn:An,easeInOut:Cn,easeOut:Sn,circIn:Pn,circInOut:Tn,circOut:_n,backIn:Mn,backInOut:On,backOut:Ln,anticipate:Rn,bounceIn:zn,bounceInOut:e=>e<.5?.5*(1-Nn(1-2*e)):.5*Nn(2*e-1)+.5,bounceOut:Nn},Zn=function(e){if(Array.isArray(e)){e.length;var t=z(e,4);return Qn(t[0],t[1],t[2],t[3])}return"string"==typeof e?("Invalid easing type '".concat(e,"'"),Gn[e]):e},Kn=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!sn.test(t)||t.startsWith("url(")))},Jn=function(e){return Array.isArray(e)},er=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},tr=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},nr=function(){return{type:"keyframes",ease:"linear",duration:.3}},rr=function(e){return{type:"keyframes",duration:.8,values:e}},or={x:er,y:er,z:er,rotate:er,rotateX:er,rotateY:er,rotateZ:er,scaleX:tr,scaleY:tr,scale:tr,opacity:nr,backgroundColor:nr,color:nr,default:tr};const ar=new Set(["brightness","contrast","saturate","opacity"]);function ir(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(Pt)||[];if(!r)return e;const o=n.replace(r,"");let a=ar.has(t)?1:0;return r!==n&&(a*=100),t+"("+a+o+")"}const lr=/([a-z-]*)\(.*?\)/g,ur=Object.assign(Object.assign({},sn),{getAnimatableNone:e=>{const t=e.match(lr);return t?t.map(ir).join(" "):e}});var sr=R(R({},Lt),{transform:Math.round}),cr={borderWidth:$t,borderTopWidth:$t,borderRightWidth:$t,borderBottomWidth:$t,borderLeftWidth:$t,borderRadius:$t,radius:$t,borderTopLeftRadius:$t,borderTopRightRadius:$t,borderBottomRightRadius:$t,borderBottomLeftRadius:$t,width:$t,maxWidth:$t,height:$t,maxHeight:$t,size:$t,top:$t,right:$t,bottom:$t,left:$t,padding:$t,paddingTop:$t,paddingRight:$t,paddingBottom:$t,paddingLeft:$t,margin:$t,marginTop:$t,marginRight:$t,marginBottom:$t,marginLeft:$t,rotate:Bt,rotateX:Bt,rotateY:Bt,rotateZ:Bt,scale:Rt,scaleX:Rt,scaleY:Rt,scaleZ:Rt,skew:Bt,skewX:Bt,skewY:Bt,distance:$t,translateX:$t,translateY:$t,translateZ:$t,x:$t,y:$t,z:$t,perspective:$t,transformPerspective:$t,opacity:Ot,originX:Yt,originY:Yt,originZ:$t,zIndex:sr,fillOpacity:Ot,strokeOpacity:Ot,numOctaves:sr},fr=R(R({},cr),{color:tn,backgroundColor:tn,outlineColor:tn,fill:tn,stroke:tn,borderColor:tn,borderTopColor:tn,borderRightColor:tn,borderBottomColor:tn,borderLeftColor:tn,filter:ur,WebkitFilter:ur}),dr=function(e){return fr[e]};function pr(e,t){var n,r=dr(e);return r!==ur&&(r=sn),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var hr=function(e){return Jn(e)?e[e.length-1]||0:e};function mr(e,t,n){var r,o,a,i;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=j([],z(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=N(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=R(R({},e),(o=n,a=t.to,i=Jn(a)?rr:or[o]||or.default,R({to:a},i(a))))),R(R({},t),function(e){var t=e.ease,n=e.times,r=e.yoyo,o=e.flip,a=e.loop,i=N(e,["ease","times","yoyo","flip","loop"]),l=R({},i);return n&&(l.offset=n),i.duration&&(l.duration=Un(i.duration)),i.repeatDelay&&(l.repeatDelay=Un(i.repeatDelay)),t&&(l.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(Zn):Zn(t)),"tween"===i.type&&(l.type="keyframes"),(r||a||o)&&(r?l.repeatType="reverse":a?l.repeatType="loop":o&&(l.repeatType="mirror"),l.repeat=a||r||o||i.repeat),"spring"!==i.type&&(l.type="keyframes"),l}(e))}function vr(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function gr(e){return"number"==typeof e?0:pr("",e)}function yr(e,t){return e[t]||e.default||e}function br(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var a,i,l=function(e,t,n,r,o){var a,i=yr(r,e),l=null!==(a=i.from)&&void 0!==a?a:t.get(),u=Kn(e,n);"none"===l&&u&&"string"==typeof n?l=pr(e,n):vr(l)&&"string"==typeof n?l=gr(n):!Array.isArray(n)&&vr(n)&&"string"==typeof l&&(n=gr(l));var s=Kn(e,l);return"You are trying to animate ".concat(e,' from "').concat(l,'" to "').concat(n,'". ').concat(l," is not an animatable value - to enable this animation set ").concat(l," to a value animatable to ").concat(n," via the `style` property."),s&&u&&!1!==i.type?function(){var r={from:l,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===i.type||"decay"===i.type?function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:a=750,bounceStiffness:i=500,bounceDamping:l=10,restDelta:u=1,modifyTarget:s,driver:c,onUpdate:f,onComplete:d,onStop:p}){let h;function m(e){return void 0!==n&&e<n||void 0!==r&&e>r}function v(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function g(e){null==h||h.stop(),h=Bn(Object.assign(Object.assign({},e),{driver:c,onUpdate:t=>{var n;null==f||f(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:d,onStop:p}))}function y(e){g(Object.assign({type:"spring",stiffness:i,damping:l,restDelta:u},e))}if(m(e))y({from:e,velocity:t,to:v(e)});else{let r=o*t+e;void 0!==s&&(r=s(r));const i=v(r),l=i===n?-1:1;let c,f;const d=e=>{c=f,f=e,t=ct(e-c,K().delta),(1===l&&e>i||-1===l&&e<i)&&y({from:e,to:i,velocity:t})};g({type:"decay",from:e,velocity:t,timeConstant:a,power:o,restDelta:u,modifyTarget:s,onUpdate:m(r)?d:void 0})}return{stop:()=>null==h?void 0:h.stop()}}(R(R({},r),i)):Bn(R(R({},mr(i,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=i.onUpdate)||void 0===t||t.call(i,e)},onComplete:function(){var e;r.onComplete(),null===(e=i.onComplete)||void 0===e||e.call(i)}}))}:function(){var e,r,a=hr(n);return t.set(a),o(),null===(e=null==i?void 0:i.onUpdate)||void 0===e||e.call(i,a),null===(r=null==i?void 0:i.onComplete)||void 0===r||r.call(i),{stop:function(){}}}}(e,t,n,r,o),u=function(e,t){var n,r;return null!==(r=null!==(n=(yr(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(r,e),s=function(){return i=l()};return u?a=window.setTimeout(s,Un(u)):s(),function(){clearTimeout(a),null==i||i.stop()}}))}var xr=["TopLeft","TopRight","BottomLeft","BottomRight"],wr=xr.length,Er=function(e){return"string"==typeof e?parseFloat(e):e},kr=function(e){return"number"==typeof e||$t.test(e)};function Ar(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var Sr=Pr(0,.5,_n),Cr=Pr(.5,.95,kn);function Pr(e,t,n){return function(r){return r<e?0:r>t?1:n(At(e,t,r))}}function _r(e,t){e.min=t.min,e.max=t.max}function Tr(e,t){_r(e.x,t.x),_r(e.y,t.y)}function Mr(e){return void 0===e||1===e}function Lr(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Mr(t)||!Mr(n)||!Mr(r)}function Or(e){return Lr(e)||Rr(e.x)||Rr(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function Rr(e){return e&&"0%"!==e}function Nr(e,t,n){return n+t*(e-n)}function zr(e,t,n,r,o){return void 0!==o&&(e=Nr(e,o,r)),Nr(e,n,r)+t}function jr(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=zr(e.min,t,n,r,o),e.max=zr(e.max,t,n,r,o)}function Dr(e,t){var n=t.x,r=t.y;jr(e.x,n.translate,n.scale,n.originPoint),jr(e.y,r.translate,r.scale,r.originPoint)}function Ir(e,t){e.min=e.min+t,e.max=e.max+t}function Vr(e,t,n){var r=z(n,3),o=r[0],a=r[1],i=r[2],l=void 0!==t[i]?t[i]:.5,u=st(e.min,e.max,l);jr(e,t[o],t[a],u,t.scale)}var Fr=["x","scaleX","originX"],Br=["y","scaleY","originY"];function Ur(e,t){Vr(e.x,t,Fr),Vr(e.y,t,Br)}const $r=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),Wr=e=>$r(e)&&e.hasOwnProperty("z"),Hr=(e,t)=>Math.abs(e-t);function Yr(e,t){if(cn(e)&&cn(t))return Hr(e,t);if($r(e)&&$r(t)){const n=Hr(e.x,t.x),r=Hr(e.y,t.y),o=Wr(e)&&Wr(t)?Hr(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}function Xr(e){return e.max-e.min}function qr(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),Yr(e,t)<n}function Qr(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=st(t.min,t.max,e.origin),e.scale=Xr(n)/Xr(t),(qr(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=st(n.min,n.max,e.origin)-e.originPoint,(qr(e.translate)||isNaN(e.translate))&&(e.translate=0)}function Gr(e,t,n,r){Qr(e.x,t.x,n.x,null==r?void 0:r.originX),Qr(e.y,t.y,n.y,null==r?void 0:r.originY)}function Zr(e,t,n){e.min=n.min+t.min,e.max=e.min+Xr(t)}function Kr(e,t,n){e.min=t.min-n.min,e.max=e.min+Xr(t)}function Jr(e,t,n){Kr(e.x,t.x,n.x),Kr(e.y,t.y,n.y)}function eo(e,t,n,r,o){return e=Nr(e-=t,1/n,r),void 0!==o&&(e=Nr(e,1/o,r)),e}function to(e,t,n,r,o){var a=z(n,3),i=a[0],l=a[1],u=a[2];!function(e,t,n,r,o,a,i){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===a&&(a=e),void 0===i&&(i=e),Ut.test(t)&&(t=parseFloat(t),t=st(i.min,i.max,t/100)-i.min),"number"==typeof t){var l=st(a.min,a.max,r);e===a&&(l-=t),e.min=eo(e.min,t,n,l,o),e.max=eo(e.max,t,n,l,o)}}(e,t[i],t[l],t[u],t.scale,r,o)}var no=["x","scaleX","originX"],ro=["y","scaleY","originY"];function oo(e,t,n,r){to(e.x,t,no,null==n?void 0:n.x,null==r?void 0:r.x),to(e.y,t,ro,null==n?void 0:n.y,null==r?void 0:r.y)}function ao(e){return 0===e.translate&&1===e.scale}function io(e){return ao(e.x)&&ao(e.y)}function lo(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var uo=function(){function e(){this.members=[]}return e.prototype.add=function(e){ft(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(dt(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var o=this.members[r];if(!1!==o.isPresent){t=o;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,o,a;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(a=null===(r=e.resumingFrom)||void 0===r?void 0:(o=r.options).onExitComplete)||void 0===a||a.call(o)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),so={};function co(e,t,n){var r=e.x.translate/t.x,o=e.y.translate/t.y,a="translate3d(".concat(r,"px, ").concat(o,"px, 0) ");if(n){var i=n.rotate,l=n.rotateX,u=n.rotateY;i&&(a+="rotate(".concat(i,"deg) ")),l&&(a+="rotateX(".concat(l,"deg) ")),u&&(a+="rotateY(".concat(u,"deg) "))}return"translate3d(0px, 0px, 0) scale(1, 1)"===(a+="scale(".concat(e.x.scale,", ").concat(e.y.scale,")"))?"none":a}function fo(e){return[e("x"),e("y")]}var po=["","X","Y","Z"],ho=["transformPerspective","x","y","z"];function mo(e,t){return ho.indexOf(e)-ho.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return po.forEach((function(t){return ho.push(e+t)}))}));var vo=new Set(ho);function go(e){return vo.has(e)}var yo=new Set(["originX","originY","originZ"]);function bo(e){return yo.has(e)}var xo=function(e,t){return e.depth-t.depth},wo=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){ft(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){dt(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(xo),this.isDirty=!1,this.children.forEach(e)},e}();function Eo(e){var t,n=vt(e)?e.get():e;return t=n,Boolean(t&&"object"==typeof t&&t.mix&&t.toValue)?n.toValue():n}var ko={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function Ao(e){var t=e.attachResizeListener,n=e.defaultParent,r=e.measureScroll,o=e.resetTransform;return function(){function e(e,t,r){var o=this;void 0===t&&(t={}),void 0===r&&(r=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){o.isUpdating&&(o.isUpdating=!1,o.clearAllSnapshots())},this.updateProjection=function(){o.nodes.forEach(Lo),o.nodes.forEach(Oo)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=r?r.root||r:this,this.path=r?j(j([],z(r.path),!1),[r],!1):[],this.parent=r,this.depth=r?r.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var a=0;a<this.path.length;a++)this.path[a].shouldResetTransform=!0;this.root===this&&(this.nodes=new wo)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new pt),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.eventHandlers.get(e);null==r||r.notify.apply(r,j([],z(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var r,o=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var a=this.options,i=a.layoutId,l=a.layout,u=a.visualElement;if(u&&!u.getInstance()&&u.mount(e),this.root.nodes.add(this),null===(r=this.parent)||void 0===r||r.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(l||i)&&(this.isLayoutDirty=!0),t){var s,c=function(){return o.root.updateBlockedByResize=!1};t(e,(function(){o.root.updateBlockedByResize=!0,clearTimeout(s),s=window.setTimeout(c,250),ko.hasAnimatedSinceResize&&(ko.hasAnimatedSinceResize=!1,o.nodes.forEach(Mo))}))}i&&this.root.registerSharedNode(i,this),!1!==this.options.animate&&u&&(i||l)&&this.addEventListener("didUpdate",(function(e){var t,n,r,a,i,l=e.delta,s=e.hasLayoutChanged,c=e.hasRelativeTargetChanged,f=e.layout;if(o.isTreeAnimationBlocked())return o.target=void 0,void(o.relativeTarget=void 0);var d=null!==(n=null!==(t=o.options.transition)&&void 0!==t?t:u.getDefaultTransition())&&void 0!==n?n:Io,p=u.getProps().onLayoutAnimationComplete,h=!o.targetLayout||!lo(o.targetLayout,f)||c,m=!s&&c;if((null===(r=o.resumeFrom)||void 0===r?void 0:r.instance)||m||s&&(h||!o.currentAnimation)){o.resumeFrom&&(o.resumingFrom=o.resumeFrom,o.resumingFrom.resumingFrom=void 0),o.setAnimationOrigin(l,m);var v=R(R({},yr(d,"layout")),{onComplete:p});u.shouldReduceMotion&&(v.delay=0,v.type=!1),o.startAnimation(v)}else s||0!==o.animationProgress||o.finishAnimation(),o.isLead()&&(null===(i=(a=o.options).onExitComplete)||void 0===i||i.call(a));o.targetLayout=f}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,X.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach(Ro))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var o=0;o<this.path.length;o++){var a=this.path[o];a.shouldResetTransform=!0,a.updateScroll()}var i=this.options,l=i.layoutId,u=i.layout;if(void 0!==l||u){var s=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==s?void 0:s(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(_o);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Vo),this.potentialNodes.clear()),this.nodes.forEach(To),this.nodes.forEach(So),this.nodes.forEach(Co),this.clearAllSnapshots(),q.update(),q.preRender(),q.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(Po),this.sharedNodes.forEach(No)},e.prototype.scheduleUpdateProjection=function(){J.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;J.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));Bo(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();Bo(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.scroll=r(this.instance))},e.prototype.resetTransform=function(){var e;if(o){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!io(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,a=null==r?void 0:r(this.latestValues,""),i=a!==this.prevTransformTemplateValue;t&&(n||Or(this.latestValues)||i)&&(o(this.instance,a),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(Ir(t.x,n.x),Ir(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};Tr(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],o=r.scroll,a=r.options;r!==this.root&&o&&a.layoutScroll&&(Ir(t.x,o.x),Ir(t.y,o.y))}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};Tr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];!t&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Ur(n,{x:-o.scroll.x,y:-o.scroll.y}),Or(o.latestValues)&&Ur(n,o.latestValues)}return Or(this.latestValues)&&Ur(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};Tr(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];if(o.instance&&Or(o.latestValues)){Lr(o.latestValues)&&o.updateSnapshot();var a={x:{min:0,max:0},y:{min:0,max:0}};Tr(a,o.measure()),oo(n,o.latestValues,null===(t=o.snapshot)||void 0===t?void 0:t.layout,a)}}return Or(this.latestValues)&&oo(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=R(R(R({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,o=this.options,a=o.layout,i=o.layoutId;this.layout&&(a||i)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Jr(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),Tr(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,Zr(t.x,n.x,r.x),Zr(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):Tr(this.target,this.layout.actual),Dr(this.target,this.targetDelta)):Tr(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},Jr(this.relativeTargetOrigin,this.target,this.relativeParent.target),Tr(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Or(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var o=this.getLead();Tr(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var o,a;void 0===r&&(r=!1);var i=n.length;if(i){var l,u;t.x=t.y=1;for(var s=0;s<i;s++)u=(l=n[s]).projectionDelta,"contents"!==(null===(a=null===(o=l.instance)||void 0===o?void 0:o.style)||void 0===a?void 0:a.display)&&(r&&l.options.layoutScroll&&l.scroll&&l!==l.root&&Ur(e,{x:-l.scroll.x,y:-l.scroll.y}),u&&(t.x*=u.x.scale,t.y*=u.y.scale,Dr(e,u)),r&&Or(l.latestValues)&&Ur(e,l.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);var a=o.target;if(a){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var i=this.treeScale.x,l=this.treeScale.y,u=this.projectionTransform;Gr(this.projectionDelta,this.layoutCorrected,a,this.latestValues),this.projectionTransform=co(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===i&&this.treeScale.y===l||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",a))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,r=this;void 0===t&&(t=!1);var o=this.snapshot,a=(null==o?void 0:o.latestValues)||{},i=R({},this.latestValues),l={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var u={x:{min:0,max:0},y:{min:0,max:0}},s=null==o?void 0:o.isShared,c=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,f=Boolean(s&&!c&&!0===this.options.crossfade&&!this.path.some(Do));this.animationProgress=0,this.mixTargetDelta=function(t){var n,o,d,p,h,m=t/1e3;zo(l.x,e.x,m),zo(l.y,e.y,m),r.setTargetDelta(l),r.relativeTarget&&r.relativeTargetOrigin&&r.layout&&(null===(n=r.relativeParent)||void 0===n?void 0:n.layout)&&(Jr(u,r.layout.actual,r.relativeParent.layout.actual),o=r.relativeTarget,d=r.relativeTargetOrigin,p=u,h=m,jo(o.x,d.x,p.x,h),jo(o.y,d.y,p.y,h)),s&&(r.animationValues=i,function(e,t,n,r,o,a){var i,l,u,s;o?(e.opacity=st(0,null!==(i=n.opacity)&&void 0!==i?i:1,Sr(r)),e.opacityExit=st(null!==(l=t.opacity)&&void 0!==l?l:1,0,Cr(r))):a&&(e.opacity=st(null!==(u=t.opacity)&&void 0!==u?u:1,null!==(s=n.opacity)&&void 0!==s?s:1,r));for(var c=0;c<wr;c++){var f="border".concat(xr[c],"Radius"),d=Ar(t,f),p=Ar(n,f);void 0===d&&void 0===p||(d||(d=0),p||(p=0),0===d||0===p||kr(d)===kr(p)?(e[f]=Math.max(st(Er(d),Er(p),r),0),(Ut.test(p)||Ut.test(d))&&(e[f]+="%")):e[f]=p)}(t.rotate||n.rotate)&&(e.rotate=st(t.rotate||0,n.rotate||0,r))}(i,a,r.latestValues,m,f,c)),r.root.scheduleUpdateProjection(),r.scheduleRender(),r.animationProgress=m},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,r=this;null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(X.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=J.update((function(){ko.hasAnimatedSinceResize=!0,r.currentAnimation=function(e,t,n){void 0===n&&(n={});var r=vt(0)?0:mt(0);return br("",r,1e3,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}(0,0,R(R({},e),{onUpdate:function(t){var n;r.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),r.completeAnimation()}})),r.resumingFrom&&(r.resumingFrom.currentAnimation=r.currentAnimation),r.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,o=e.latestValues;t&&n&&r&&(Tr(t,n),Ur(t,o),Gr(this.projectionDeltaWithTransform,this.layoutCorrected,t,o))},e.prototype.registerSharedNode=function(e,t){var n,r,o;this.sharedNodes.has(e)||this.sharedNodes.set(e,new uo),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(o=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===o?void 0:o.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,o=t.preserveFollowOpacity,a=this.getStack();a&&a.promote(this,o),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<po.length;r++){var o="rotate"+po[r];e.getStaticValue(o)&&(t=!0,n[o]=e.getStaticValue(o),e.setStaticValue(o,0))}if(t){for(var o in null==e||e.syncRender(),n)e.setStaticValue(o,n[o]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,o,a,i;void 0===e&&(e={});var l={};if(!this.instance||this.isSVG)return l;if(!this.isVisible)return{visibility:"hidden"};l.visibility="";var u=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=Eo(e.pointerEvents)||"",l.transform=u?u(this.latestValues,""):"none",l;var s=this.getLead();if(!this.projectionDelta||!this.layout||!s.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=Eo(e.pointerEvents)||""),this.hasProjected&&!Or(this.latestValues)&&(c.transform=u?u({},""):"none",this.hasProjected=!1),c}var f=s.animationValues||s.latestValues;this.applyTransformsToTarget(),l.transform=co(this.projectionDeltaWithTransform,this.treeScale,f),u&&(l.transform=u(f,l.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in l.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),s.animationValues?l.opacity=s===this?null!==(o=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:l.opacity=s===this?null!==(a=f.opacity)&&void 0!==a?a:"":null!==(i=f.opacityExit)&&void 0!==i?i:0,so)if(void 0!==f[m]){var v=so[m],g=v.correct,y=v.applyTo,b=g(f[m],s);if(y)for(var x=y.length,w=0;w<x;w++)l[y[w]]=b;else l[m]=b}return this.options.layoutId&&(l.pointerEvents=s===this?Eo(e.pointerEvents)||"":"none"),l},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(_o),this.root.sharedNodes.clear()},e}()}function So(e){e.updateLayout()}function Co(e){var t,n,r,o,a=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&a&&e.hasListeners("didUpdate")){var i=e.layout,l=i.actual,u=i.measured;"size"===e.options.animationType?fo((function(e){var t=a.isShared?a.measured[e]:a.layout[e],n=Xr(t);t.min=l[e].min,t.max=t.min+n})):"position"===e.options.animationType&&fo((function(e){var t=a.isShared?a.measured[e]:a.layout[e],n=Xr(l[e]);t.max=t.min+n}));var s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};Gr(s,l,a.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};a.isShared?Gr(c,e.applyTransform(u,!0),a.measured):Gr(c,l,a.layout);var f=!io(s),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};Jr(v,a.layout,h.layout);var g={x:{min:0,max:0},y:{min:0,max:0}};Jr(g,l,m.actual),lo(v,g)||(d=!0)}}e.notifyListeners("didUpdate",{layout:l,snapshot:a,delta:c,layoutDelta:s,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(o=(r=e.options).onExitComplete)||void 0===o||o.call(r));e.options.transition=void 0}function Po(e){e.clearSnapshot()}function _o(e){e.clearMeasurements()}function To(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function Mo(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function Lo(e){e.resolveTargetDelta()}function Oo(e){e.calcProjection()}function Ro(e){e.resetRotation()}function No(e){e.removeLeadSnapshot()}function zo(e,t,n){e.translate=st(t.translate,0,n),e.scale=st(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function jo(e,t,n,r){e.min=st(t.min,n.min,r),e.max=st(t.max,n.max,r)}function Do(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var Io={duration:.45,ease:[.4,0,.1,1]};function Vo(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var o=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));o&&e.mount(o,!0)}function Fo(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function Bo(e){Fo(e.x),Fo(e.y)}var Uo=1,$o=(0,e.createContext)({}),Wo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(e.Component);function Ho(t){var n=t.preloadedFeatures,r=t.createVisualElement,o=t.projectionNodeConstructor,a=t.useRender,i=t.useVisualState,l=t.Component;return n&&function(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?Ye.projectionNodeConstructor=e[t]:Ye[t].Component=e[t])}(n),(0,e.forwardRef)((function(t,n){var u=function(t){var n,r=t.layoutId,o=null===(n=(0,e.useContext)(ue))||void 0===n?void 0:n.id;return o&&void 0!==r?o+"-"+r:r}(t);t=R(R({},t),{layoutId:u});var s=(0,e.useContext)(Ge),c=null,f=function(t){var n=function(e,t){if(it(e)){var n=e.initial,r=e.animate;return{initial:!1===n||rt(n)?n:void 0,animate:rt(r)?r:void 0}}return!1!==e.inherit?t:{}}(t,(0,e.useContext)(Ze)),r=n.initial,o=n.animate;return(0,e.useMemo)((function(){return{initial:r,animate:o}}),[ut(r),ut(o)])}(t),d=s.isStatic?void 0:ne((function(){if(ko.hasEverUpdated)return Uo++})),p=i(t,s.isStatic);return!s.isStatic&&se&&(f.visualElement=et(l,p,R(R({},s),t),r),function(t,n,r,o){var a,i=n.layoutId,l=n.layout,u=n.drag,s=n.dragConstraints,c=n.layoutScroll,f=(0,e.useContext)($o);o&&r&&!(null==r?void 0:r.projection)&&(r.projection=new o(t,r.getLatestValues(),null===(a=r.parent)||void 0===a?void 0:a.projection),r.projection.setOptions({layoutId:i,layout:l,alwaysMeasureLayout:Boolean(u)||s&&tt(s),visualElement:r,scheduleRender:function(){return r.scheduleRender()},animationType:"string"==typeof l?l:"both",initialPromotionConfig:f,layoutScroll:c}))}(d,t,f.visualElement,o||Ye.projectionNodeConstructor),c=function(t,n,r){var o=[];if((0,e.useContext)(Xe),!n)return null;for(var a=0;a<Qe;a++){var i=qe[a],l=Ye[i],u=l.isEnabled,s=l.Component;u(t)&&s&&o.push(e.createElement(s,R({key:i},t,{visualElement:n})))}return o}(t,f.visualElement)),e.createElement(Wo,{visualElement:f.visualElement,props:R(R({},s),t)},c,e.createElement(Ze.Provider,{value:f},a(l,t,d,function(t,n,r){return(0,e.useCallback)((function(e){var o;e&&(null===(o=t.mount)||void 0===o||o.call(t,e)),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):tt(r)&&(r.current=e))}),[n])}(p,f.visualElement,n),p,s.isStatic,f.visualElement)))}))}function Yo(e){function t(t,n){return void 0===n&&(n={}),Ho(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var Xo=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function qo(e){return"string"==typeof e&&!e.includes("-")&&!!(Xo.indexOf(e)>-1||/[A-Z]/.test(e))}function Qo(e,t){var n=t.layout,r=t.layoutId;return go(e)||bo(e)||(n||void 0!==r)&&(!!so[e]||"opacity"===e)}var Go={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Zo(e){return e.startsWith("--")}var Ko=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function Jo(e,t,n,r){var o,a=e.style,i=e.vars,l=e.transform,u=e.transformKeys,s=e.transformOrigin;u.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(Zo(p))i[p]=h;else{var m=cr[p],v=Ko(h,m);if(go(p)){if(c=!0,l[p]=v,u.push(p),!d)continue;h!==(null!==(o=m.default)&&void 0!==o?o:0)&&(d=!1)}else bo(p)?(s[p]=v,f=!0):a[p]=v}}c?a.transform=function(e,t,n,r){var o=e.transform,a=e.transformKeys,i=t.enableHardwareAcceleration,l=void 0===i||i,u=t.allowTransformNone,s=void 0===u||u,c="";a.sort(mo);for(var f=!1,d=a.length,p=0;p<d;p++){var h=a[p];c+="".concat(Go[h]||h,"(").concat(o[h],") "),"z"===h&&(f=!0)}return!f&&l?c+="translateZ(0)":c=c.trim(),r?c=r(o,n?"":c):s&&n&&(c="none"),c}(e,n,d,r):r?a.transform=r({},""):!t.transform&&a.transform&&(a.transform="none"),f&&(a.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,a=e.originZ,i=void 0===a?0:a;return"".concat(n," ").concat(o," ").concat(i)}(s))}function ea(e,t,n){for(var r in t)vt(t[r])||Qo(r,n)||(e[r]=t[r])}function ta(t,n,r){var o={},a=function(t,n,r){var o={};return ea(o,t.style||{},t),Object.assign(o,function(t,n,r){var o=t.transformTemplate;return(0,e.useMemo)((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};Jo(e,n,{enableHardwareAcceleration:!r},o);var t=e.style;return R(R({},e.vars),t)}),[n])}(t,n,r)),t.transformValues&&(o=t.transformValues(o)),o}(t,n,r);return Boolean(t.drag)&&!1!==t.dragListener&&(o.draggable=!1,a.userSelect=a.WebkitUserSelect=a.WebkitTouchCallout="none",a.touchAction=!0===t.drag?"none":"pan-".concat("x"===t.drag?"y":"x")),o.style=a,o}var na=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function ra(e){return na.has(e)}var oa,aa=function(e){return!ra(e)};try{(oa=require("@emotion/is-prop-valid").default)&&(aa=function(e){return e.startsWith("on")?!ra(e):oa(e)})}catch(e){}function ia(e,t,n){return"string"==typeof e?e:$t.transform(t+n*e)}var la={offset:"stroke-dashoffset",array:"stroke-dasharray"},ua={offset:"strokeDashoffset",array:"strokeDasharray"};function sa(e,t,n,r){var o=t.attrX,a=t.attrY,i=t.originX,l=t.originY,u=t.pathLength,s=t.pathSpacing,c=void 0===s?1:s,f=t.pathOffset,d=void 0===f?0:f;Jo(e,N(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,r),e.attrs=e.style,e.style={};var p=e.attrs,h=e.style,m=e.dimensions;p.transform&&(m&&(h.transform=p.transform),delete p.transform),m&&(void 0!==i||void 0!==l||h.transform)&&(h.transformOrigin=function(e,t,n){var r=ia(t,e.x,e.width),o=ia(n,e.y,e.height);return"".concat(r," ").concat(o)}(m,void 0!==i?i:.5,void 0!==l?l:.5)),void 0!==o&&(p.x=o),void 0!==a&&(p.y=a),void 0!==u&&function(e,t,n,r,o){void 0===n&&(n=1),void 0===r&&(r=0),void 0===o&&(o=!0),e.pathLength=1;var a=o?la:ua;e[a.offset]=$t.transform(-r);var i=$t.transform(t),l=$t.transform(n);e[a.array]="".concat(i," ").concat(l)}(p,u,c,d,!1)}var ca=function(){return R(R({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function fa(t,n){var r=(0,e.useMemo)((function(){var e=ca();return sa(e,n,{enableHardwareAcceleration:!1},t.transformTemplate),R(R({},e.attrs),{style:R({},e.style)})}),[n]);if(t.style){var o={};ea(o,t.style,t),r.style=R(R({},o),r.style)}return r}function da(t){return void 0===t&&(t=!1),function(n,r,o,a,i,l){var u=i.latestValues,s=(qo(n)?fa:ta)(r,u,l),c=function(e,t,n){var r={};for(var o in e)(aa(o)||!0===n&&ra(o)||!t&&!ra(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}(r,"string"==typeof n,t),f=R(R(R({},c),s),{ref:a});return o&&(f["data-projection-id"]=o),(0,e.createElement)(n,f)}}var pa=/([a-z])([A-Z])/g,ha=function(e){return e.replace(pa,"$1-$2").toLowerCase()};function ma(e,t,n,r){var o=t.style,a=t.vars;for(var i in Object.assign(e.style,o,r&&r.getProjectionStyles(n)),a)e.style.setProperty(i,a[i])}var va=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function ga(e,t){for(var n in ma(e,t),t.attrs)e.setAttribute(va.has(n)?n:ha(n),t.attrs[n])}function ya(e){var t=e.style,n={};for(var r in t)(vt(t[r])||Qo(r,e))&&(n[r]=t[r]);return n}function ba(e){var t=ya(e);for(var n in e)vt(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function xa(e){return"object"==typeof e&&"function"==typeof e.start}function wa(e,t,n,r){var o=e.scrapeMotionValuesFromProps,a=e.createRenderState,i=e.onMount,l={latestValues:ka(t,n,r,o),renderState:a()};return i&&(l.mount=function(e){return i(t,e,l)}),l}var Ea=function(t){return function(n,r){var o=(0,e.useContext)(Ze),a=(0,e.useContext)(te);return r?wa(t,n,o,a):ne((function(){return wa(t,n,o,a)}))}};function ka(e,t,n,r){var o={},a=!1===(null==n?void 0:n.initial),i=r(e);for(var l in i)o[l]=Eo(i[l]);var u=e.initial,s=e.animate,c=it(e),f=lt(e);t&&f&&!c&&!1!==e.inherit&&(null!=u||(u=t.initial),null!=s||(s=t.animate));var d=a||!1===u,p=d?s:u;return p&&"boolean"!=typeof p&&!xa(p)&&(Array.isArray(p)?p:[p]).forEach((function(t){var n=ot(e,t);if(n){var r=n.transitionEnd;n.transition;var a=N(n,["transitionEnd","transition"]);for(var i in a){var l=a[i];Array.isArray(l)&&(l=l[d?l.length-1:0]),null!==l&&(o[i]=l)}for(var i in r)o[i]=r[i]}})),o}var Aa,Sa={useVisualState:Ea({scrapeMotionValuesFromProps:ba,createRenderState:ca,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}sa(r,o,{enableHardwareAcceleration:!1},e.transformTemplate),ga(t,r)}})},Ca={useVisualState:Ea({scrapeMotionValuesFromProps:ya,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function Pa(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function _a(t,n,r,o){(0,e.useEffect)((function(){var e=t.current;if(r&&e)return Pa(e,n,r,o)}),[t,n,r,o])}function Ta(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Ma(e){return!!e.touches}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.InView="whileInView",e.Exit="exit"}(Aa||(Aa={}));var La={pageX:0,pageY:0};function Oa(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||La;return{x:n[t+"X"],y:n[t+"Y"]}}function Ra(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Na(e,t){return void 0===t&&(t="page"),{point:Ma(e)?Oa(e,t):Ra(e,t)}}var za=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Na(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},ja={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Da={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Ia(e){return se&&null===window.onpointerdown?e:se&&null===window.ontouchstart?Da[e]:se&&null===window.onmousedown?ja[e]:e}function Va(e,t,n,r){return Pa(e,Ia(t),za(n,"pointerdown"===t),r)}function Fa(e,t,n,r){return _a(e,Ia(t),n&&za(n,"pointerdown"===t),r)}function Ba(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Ua=Ba("dragHorizontal"),$a=Ba("dragVertical");function Wa(e){var t=!1;if("y"===e)t=$a();else if("x"===e)t=Ua();else{var n=Ua(),r=$a();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function Ha(){var e=Wa(!0);return!e||(e(),!1)}function Ya(e,t,n){return function(r,o){var a;Ta(r)&&!Ha()&&(null===(a=e.animationState)||void 0===a||a.setActive(Aa.Hover,t),null==n||n(r,o))}}var Xa=function(e,t){return!!t&&(e===t||Xa(e,t.parentElement))},qa=new WeakMap,Qa=new WeakMap,Ga=function(e){var t;null===(t=qa.get(e.target))||void 0===t||t(e)},Za=function(e){e.forEach(Ga)};var Ka={some:0,all:1};function Ja(t,n,r,o){var a=o.root,i=o.margin,l=o.amount,u=void 0===l?"some":l,s=o.once;(0,e.useEffect)((function(){if(t){var e={root:null==a?void 0:a.current,rootMargin:i,threshold:"number"==typeof u?u:Ka[u]};return function(e,t,n){var r=function(e){var t=e.root,n=N(e,["root"]),r=t||document;Qa.has(r)||Qa.set(r,{});var o=Qa.get(r),a=JSON.stringify(n);return o[a]||(o[a]=new IntersectionObserver(Za,R({root:t},n))),o[a]}(t);return qa.set(e,n),r.observe(e),function(){qa.delete(e),r.unobserve(e)}}(r.getInstance(),e,(function(e){var t,o=e.isIntersecting;if(n.isInView!==o&&(n.isInView=o,!s||o||!n.hasEnteredView)){o&&(n.hasEnteredView=!0),null===(t=r.animationState)||void 0===t||t.setActive(Aa.InView,o);var a=r.getProps(),i=o?a.onViewportEnter:a.onViewportLeave;null==i||i(e)}}))}}),[t,a,i,u])}function ei(t,n,r,o){var a=o.fallback,i=void 0===a||a;(0,e.useEffect)((function(){t&&i&&requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var t=r.getProps().onViewportEnter;null==t||t(null),null===(e=r.animationState)||void 0===e||e.setActive(Aa.InView,!0)}))}),[t])}var ti=function(e){return function(t){return e(t),null}},ni={inView:ti((function(t){var n=t.visualElement,r=t.whileInView,o=t.onViewportEnter,a=t.onViewportLeave,i=t.viewport,l=void 0===i?{}:i,u=(0,e.useRef)({hasEnteredView:!1,isInView:!1}),s=Boolean(r||o||a);l.once&&u.current.hasEnteredView&&(s=!1),("undefined"==typeof IntersectionObserver?ei:Ja)(s,u.current,n,l)})),tap:ti((function(t){var n=t.onTap,r=t.onTapStart,o=t.onTapCancel,a=t.whileTap,i=t.visualElement,l=n||r||o||a,u=(0,e.useRef)(!1),s=(0,e.useRef)(null);function c(){var e;null===(e=s.current)||void 0===e||e.call(s),s.current=null}function f(){var e;return c(),u.current=!1,null===(e=i.animationState)||void 0===e||e.setActive(Aa.Tap,!1),!Ha()}function d(e,t){f()&&(Xa(i.getInstance(),e.target)?null==n||n(e,t):null==o||o(e,t))}function p(e,t){f()&&(null==o||o(e,t))}Fa(i,"pointerdown",l?function(e,t){var n;c(),u.current||(u.current=!0,s.current=dn(Va(window,"pointerup",d),Va(window,"pointercancel",p)),null===(n=i.animationState)||void 0===n||n.setActive(Aa.Tap,!0),null==r||r(e,t))}:void 0),fe(c)})),focus:ti((function(e){var t=e.whileFocus,n=e.visualElement;_a(n,"focus",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Aa.Focus,!0)}:void 0),_a(n,"blur",t?function(){var e;null===(e=n.animationState)||void 0===e||e.setActive(Aa.Focus,!1)}:void 0)})),hover:ti((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,o=e.visualElement;Fa(o,"pointerenter",t||r?Ya(o,!0,t):void 0),Fa(o,"pointerleave",n||r?Ya(o,!1,n):void 0)}))};function ri(){var t=(0,e.useContext)(te);if(null===t)return[!0,null];var n=t.isPresent,r=t.onExitComplete,o=t.register,a=ae();return(0,e.useEffect)((function(){return o(a)}),[]),!n&&r?[!1,function(){return null==r?void 0:r(a)}]:[!0]}function oi(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var ai=function(e){return function(t){return t.test(e)}},ii=[Lt,$t,Ut,Bt,Ht,Wt,{test:function(e){return"auto"===e},parse:function(e){return e}}],li=function(e){return ii.find(ai(e))},ui=j(j([],z(ii),!1),[tn,sn],!1),si=function(e){return ui.find(ai(e))};function ci(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,mt(n))}function fi(e,t){if(t)return(t[e]||t.default||t).from}function di(e,t,n){var r;void 0===n&&(n={});var o=at(e,t,n.custom),a=(o||{}).transition,i=void 0===a?e.getDefaultTransition()||{}:a;n.transitionOverride&&(i=n.transitionOverride);var l=o?function(){return pi(e,o,n)}:function(){return Promise.resolve()},u=(null===(r=e.variantChildren)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var o=i.delayChildren,a=void 0===o?0:o,l=i.staggerChildren,u=i.staggerDirection;return function(e,t,n,r,o,a){void 0===n&&(n=0),void 0===r&&(r=0),void 0===o&&(o=1);var i=[],l=(e.variantChildren.size-1)*r,u=1===o?function(e){return void 0===e&&(e=0),e*r}:function(e){return void 0===e&&(e=0),l-e*r};return Array.from(e.variantChildren).sort(hi).forEach((function(e,r){i.push(di(e,t,R(R({},a),{delay:n+u(r)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(i)}(e,t,a+r,l,u,n)}:function(){return Promise.resolve()},s=i.when;if(s){var c=z("beforeChildren"===s?[l,u]:[u,l],2),f=c[0],d=c[1];return f().then(d)}return Promise.all([l(),u(n.delay)])}function pi(e,t,n){var r,o=void 0===n?{}:n,a=o.delay,i=void 0===a?0:a,l=o.transitionOverride,u=o.type,s=e.makeTargetAnimatable(t),c=s.transition,f=void 0===c?e.getDefaultTransition():c,d=s.transitionEnd,p=N(s,["transition","transitionEnd"]);l&&(f=l);var h=[],m=u&&(null===(r=e.animationState)||void 0===r?void 0:r.getState()[u]);for(var v in p){var g=e.getValue(v),y=p[v];if(!(!g||void 0===y||m&&mi(m,v))){var b=R({delay:i},f);e.shouldReduceMotion&&go(v)&&(b=R(R({},b),{type:!1,delay:0}));var x=br(v,g,y,b);h.push(x)}}return Promise.all(h).then((function(){d&&function(e,t){var n=at(e,t),r=n?e.makeTargetAnimatable(n,!1):{},o=r.transitionEnd,a=void 0===o?{}:o;r.transition;var i=N(r,["transitionEnd","transition"]);for(var l in i=R(R({},i),a))ci(e,l,hr(i[l]))}(e,d)}))}function hi(e,t){return e.sortNodePosition(t)}function mi(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}var vi=[Aa.Animate,Aa.InView,Aa.Focus,Aa.Hover,Aa.Tap,Aa.Drag,Aa.Exit],gi=j([],z(vi),!1).reverse(),yi=vi.length;function bi(e){var t,n=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return function(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var o=t.map((function(t){return di(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=di(e,t,n);else{var a="function"==typeof t?at(e,t,n.custom):t;r=pi(e,a,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}(e,n,r)})))}}(e),r=((t={})[Aa.Animate]=xi(!0),t[Aa.InView]=xi(),t[Aa.Hover]=xi(),t[Aa.Tap]=xi(),t[Aa.Drag]=xi(),t[Aa.Focus]=xi(),t[Aa.Exit]=xi(),t),o={},a=!0,i=function(t,n){var r=at(e,n);if(r){r.transition;var o=r.transitionEnd,a=N(r,["transition","transitionEnd"]);t=R(R(R({},t),a),o)}return t};function l(t,l){for(var u,s=e.getProps(),c=e.getVariantContext(!0)||{},f=[],d=new Set,p={},h=1/0,m=function(n){var o=gi[n],m=r[o],v=null!==(u=s[o])&&void 0!==u?u:c[o],g=rt(v),y=o===l?m.isActive:null;!1===y&&(h=n);var b=v===c[o]&&v!==s[o]&&g;if(b&&a&&e.manuallyAnimateOnMount&&(b=!1),m.protectedKeys=R({},p),!m.isActive&&null===y||!v&&!m.prevProp||xa(v)||"boolean"==typeof v)return"continue";var x=function(e,t){return"string"==typeof t?t!==e:!!nt(t)&&!oi(t,e)}(m.prevProp,v),w=x||o===l&&m.isActive&&!b&&g||n>h&&g,E=Array.isArray(v)?v:[v],k=E.reduce(i,{});!1===y&&(k={});var A=m.prevResolvedValues,S=void 0===A?{}:A,C=R(R({},S),k),P=function(e){w=!0,d.delete(e),m.needsAnimating[e]=!0};for(var _ in C){var T=k[_],M=S[_];p.hasOwnProperty(_)||(T!==M?Jn(T)&&Jn(M)?!oi(T,M)||x?P(_):m.protectedKeys[_]=!0:void 0!==T?P(_):d.add(_):void 0!==T&&d.has(_)?P(_):m.protectedKeys[_]=!0)}m.prevProp=v,m.prevResolvedValues=k,m.isActive&&(p=R(R({},p),k)),a&&e.blockInitialAnimation&&(w=!1),w&&!b&&f.push.apply(f,j([],z(E.map((function(e){return{animation:e,options:R({type:o},t)}}))),!1))},v=0;v<yi;v++)m(v);if(o=R({},p),d.size){var g={};d.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(g[t]=n)})),f.push({animation:g})}var y=Boolean(f.length);return a&&!1===s.initial&&!e.manuallyAnimateOnMount&&(y=!1),a=!1,y?n(f):Promise.resolve()}return{isAnimated:function(e){return void 0!==o[e]},animateChanges:l,setActive:function(t,n,o){var a;return r[t].isActive===n?Promise.resolve():(null===(a=e.variantChildren)||void 0===a||a.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n,l(o,t))},setAnimateFunction:function(t){n=t(e)},getState:function(){return r}}}function xi(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var wi={animation:ti((function(t){var n=t.visualElement,r=t.animate;n.animationState||(n.animationState=bi(n)),xa(r)&&(0,e.useEffect)((function(){return r.subscribe(n)}),[r])})),exit:ti((function(t){var n=t.custom,r=t.visualElement,o=z(ri(),2),a=o[0],i=o[1],l=(0,e.useContext)(te);(0,e.useEffect)((function(){var e,t;r.isPresent=a;var o=null===(e=r.animationState)||void 0===e?void 0:e.setActive(Aa.Exit,!a,{custom:null!==(t=null==l?void 0:l.custom)&&void 0!==t?t:n});!a&&(null==o||o.then(i))}),[a])}))},Ei=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=Si(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=Yr(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,a=K().timestamp;r.history.push(R(R({},o),{timestamp:a}));var i=r.handlers,l=i.onStart,u=i.onMove;t||(l&&l(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),u&&u(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=ki(t,r.transformPagePoint),Ta(e)&&0===e.buttons?r.handlePointerUp(e,t):J.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers,o=n.onEnd,a=n.onSessionEnd,i=Si(ki(t,r.transformPagePoint),r.history);r.startEvent&&o&&o(e,i),a&&a(e,i)},!(Ma(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var a=ki(Na(e),this.transformPagePoint),i=a.point,l=K().timestamp;this.history=[R(R({},i),{timestamp:l})];var u=t.onSessionStart;u&&u(e,Si(a,this.history)),this.removeListeners=dn(Va(window,"pointermove",this.handlePointerMove),Va(window,"pointerup",this.handlePointerUp),Va(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),X.update(this.updatePoint)},e}();function ki(e,t){return t?{point:t(e.point)}:e}function Ai(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Si(e,t){var n=e.point;return{point:n,delta:Ai(n,Pi(t)),offset:Ai(n,Ci(t)),velocity:_i(t,.1)}}function Ci(e){return e[0]}function Pi(e){return e[e.length-1]}function _i(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Pi(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Un(t)));)n--;if(!r)return{x:0,y:0};var a=(o.timestamp-r.timestamp)/1e3;if(0===a)return{x:0,y:0};var i={x:(o.x-r.x)/a,y:(o.y-r.y)/a};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function Ti(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function Mi(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=z([o,r],2))[0],o=n[1]),{min:r,max:o}}var Li=.35;function Oi(e,t,n){return{min:Ri(e,t),max:Ri(e,n)}}function Ri(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function Ni(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function zi(e,t){return Ni(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var ji=new WeakMap,Di=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,t){var n=this,r=(void 0===t?{}:t).snapToCursor,o=void 0!==r&&r;!1!==this.visualElement.isPresent&&(this.panSession=new Ei(e,{onSessionStart:function(e){n.stopAnimation(),o&&n.snapToCursor(Na(e,"page").point)},onStart:function(e,t){var r,o=n.getProps(),a=o.drag,i=o.dragPropagation,l=o.onDragStart;(!a||i||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=Wa(a),n.openGlobalLock))&&(n.isDragging=!0,n.currentDirection=null,n.resolveConstraints(),n.visualElement.projection&&(n.visualElement.projection.isAnimationBlocked=!0,n.visualElement.projection.target=void 0),fo((function(e){var t,r,o=n.getAxisMotionValue(e).get()||0;if(Ut.test(o)){var a=null===(r=null===(t=n.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===r?void 0:r.actual[e];a&&(o=Xr(a)*(parseFloat(o)/100))}n.originPoint[e]=o})),null==l||l(e,t),null===(r=n.visualElement.animationState)||void 0===r||r.setActive(Aa.Drag,!0))},onMove:function(e,t){var r=n.getProps(),o=r.dragPropagation,a=r.dragDirectionLock,i=r.onDirectionLock,l=r.onDrag;if(o||n.openGlobalLock){var u=t.offset;if(a&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(u),void(null!==n.currentDirection&&(null==i||i(n.currentDirection)));n.updateAxis("x",t.point,u),n.updateAxis("y",t.point,u),n.visualElement.syncRender(),null==l||l(e,t)}},onSessionEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var o=this.getProps().onDragEnd;null==o||o(e,t)}},e.prototype.cancel=function(){var e,t;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(Aa.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r,o,a,i,l,u=this.getProps().drag;if(n&&Ii(e,u,this.currentDirection)){var s=this.getAxisMotionValue(e),c=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(r=c,o=this.constraints[e],a=this.elastic[e],i=o.min,l=o.max,void 0!==i&&r<i?r=a?st(i,r,a.min):Math.max(r,i):void 0!==l&&r>l&&(r=a?st(l,r,a.max):Math.min(r,l)),c=r),s.set(c)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,o=(this.visualElement.projection||{}).layout,a=this.constraints;n&&tt(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!o)&&function(e,t){var n=t.top,r=t.left,o=t.bottom,a=t.right;return{x:Ti(e.x,r,a),y:Ti(e.y,n,o)}}(o.actual,n),this.elastic=function(e){return void 0===e&&(e=Li),!1===e?e=0:!0===e&&(e=Li),{x:Oi(e,"left","right"),y:Oi(e,"top","bottom")}}(r),a!==this.constraints&&o&&this.constraints&&!this.hasMutatedConstraints&&fo((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!tt(t))return!1;var r=t.current,o=this.visualElement.projection;if(!o||!o.layout)return!1;var a=function(e,t,n){var r=zi(e,n),o=t.scroll;return o&&(Ir(r.x,o.x),Ir(r.y,o.y)),r}(r,o.root,this.visualElement.getTransformPagePoint()),i=function(e,t){return{x:Mi(e.x,t.x),y:Mi(e.y,t.y)}}(o.layout.actual,a);if(n){var l=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(i));this.hasMutatedConstraints=!!l,l&&(i=Ni(l))}return i},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),r=n.drag,o=n.dragMomentum,a=n.dragElastic,i=n.dragTransition,l=n.dragSnapToOrigin,u=n.onDragTransitionEnd,s=this.constraints||{},c=fo((function(n){var u;if(Ii(n,r,t.currentDirection)){var c=null!==(u=null==s?void 0:s[n])&&void 0!==u?u:{};l&&(c={min:0,max:0});var f=a?200:1e6,d=a?40:1e7,p=R(R({type:"inertia",velocity:o?e[n]:0,bounceStiffness:f,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10},i),c);return t.startAxisValueAnimation(n,p)}}));return Promise.all(c).then(u)},e.prototype.startAxisValueAnimation=function(e,t){return br(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;fo((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;fo((function(n){if(Ii(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,o=t.getAxisMotionValue(n);if(r&&r.layout){var a=r.layout.actual[n],i=a.min,l=a.max;o.set(e[n]-st(i,l,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,o=n.dragConstraints,a=this.visualElement.projection;if(tt(o)&&a&&this.constraints){this.stopAnimation();var i={x:0,y:0};fo((function(e){var n=t.getAxisMotionValue(e);if(n){var r=n.get();i[e]=function(e,t){var n=.5,r=Xr(e),o=Xr(t);return o>r?n=At(t.min,t.max-r,e.min):r>o&&(n=At(e.min,e.max-o,t.min)),gt(0,1,n)}({min:r,max:r},t.constraints[e])}}));var l=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=l?l({},""):"none",null===(e=a.root)||void 0===e||e.updateScroll(),a.updateLayout(),this.resolveConstraints(),fo((function(e){if(Ii(e,r,null)){var n=t.getAxisMotionValue(e),o=t.constraints[e],a=o.min,l=o.max;n.set(st(a,l,i[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;ji.set(this.visualElement,this);var n=Va(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=function(){tt(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},o=this.visualElement.projection,a=o.addEventListener("measure",r);o&&!o.layout&&(null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout()),r();var i=Pa(window,"resize",(function(){t.scalePositionWithinConstraints()}));return o.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(fo((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){i(),n(),a()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,a=e.dragPropagation,i=void 0!==a&&a,l=e.dragConstraints,u=void 0!==l&&l,s=e.dragElastic,c=void 0===s?Li:s,f=e.dragMomentum,d=void 0===f||f;return R(R({},e),{drag:n,dragDirectionLock:o,dragPropagation:i,dragConstraints:u,dragElastic:c,dragMomentum:d})},e}();function Ii(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Vi={pan:ti((function(t){var n=t.onPan,r=t.onPanStart,o=t.onPanEnd,a=t.onPanSessionStart,i=t.visualElement,l=n||r||o||a,u=(0,e.useRef)(null),s=(0,e.useContext)(Ge).transformPagePoint,c={onSessionStart:a,onStart:r,onMove:n,onEnd:function(e,t){u.current=null,o&&o(e,t)}};(0,e.useEffect)((function(){null!==u.current&&u.current.updateHandlers(c)})),Fa(i,"pointerdown",l&&function(e){u.current=new Ei(e,c,{transformPagePoint:s})}),fe((function(){return u.current&&u.current.end()}))})),drag:ti((function(t){var n=t.dragControls,r=t.visualElement,o=ne((function(){return new Di(r)}));(0,e.useEffect)((function(){return n&&n.subscribe(o)}),[o,n]),(0,e.useEffect)((function(){return o.addListeners()}),[o])}))},Fi=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"],Bi=function(e){var t=e.treeType,n=void 0===t?"":t,r=e.build,o=e.getBaseTarget,a=e.makeTargetAnimatable,i=e.measureViewportBox,l=e.render,u=e.readValueFromInstance,s=e.removeValueFromRenderState,c=e.sortNodePosition,f=e.scrapeMotionValuesFromProps;return function(e,t){var d=e.parent,p=e.props,h=e.presenceId,m=e.blockInitialAnimation,v=e.visualState,g=e.shouldReduceMotion;void 0===t&&(t={});var y,b,x=!1,w=v.latestValues,E=v.renderState,k=function(){var e=Fi.map((function(){return new pt})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Fi.forEach((function(r){var o,a="on"+r,i=e[a];null===(o=t[r])||void 0===o||o.call(t),i&&(t[r]=n[a](i))}))}};return e.forEach((function(e,t){n["on"+Fi[t]]=function(t){return e.add(t)},n["notify"+Fi[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,j([],z(t),!1))}})),n}(),A=new Map,S=new Map,C={},P=R({},w);function _(){y&&x&&(T(),l(y,E,p.style,F.projection))}function T(){r(F,E,w,t,p)}function M(){k.notifyUpdate(w)}function L(e,t){var n=t.onChange((function(t){w[e]=t,p.onUpdate&&J.update(M,!1,!0)})),r=t.onRenderRequest(F.scheduleRender);S.set(e,(function(){n(),r()}))}var O=f(p);for(var N in O){var D=O[N];void 0!==w[N]&&vt(D)&&D.set(w[N],!1)}var I=it(p),V=lt(p),F=R(R({treeType:n,current:null,depth:d?d.depth+1:0,parent:d,children:new Set,presenceId:h,shouldReduceMotion:g,variantChildren:V?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==d?void 0:d.isMounted()),blockInitialAnimation:m,isMounted:function(){return Boolean(y)},mount:function(e){x=!0,y=F.current=e,F.projection&&F.projection.mount(e),V&&d&&!I&&(b=null==d?void 0:d.addVariantChild(F)),A.forEach((function(e,t){return L(t,e)})),null==d||d.children.add(F),F.setProps(p)},unmount:function(){var e;null===(e=F.projection)||void 0===e||e.unmount(),X.update(M),X.render(_),S.forEach((function(e){return e()})),null==b||b(),null==d||d.children.delete(F),k.clearAllListeners(),y=void 0,x=!1},addVariantChild:function(e){var t,n=F.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return c&&n===e.treeType?c(F.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return V?F:null==d?void 0:d.getClosestVariantNode()},getLayoutId:function(){return p.layoutId},getInstance:function(){return y},getStaticValue:function(e){return w[e]},setStaticValue:function(e,t){return w[e]=t},getLatestValues:function(){return w},setVisibility:function(e){F.isVisible!==e&&(F.isVisible=e,F.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),a(F,e,p,t)},measureViewportBox:function(){return i(y,p)},addValue:function(e,t){F.hasValue(e)&&F.removeValue(e),A.set(e,t),w[e]=t.get(),L(e,t)},removeValue:function(e){var t;A.delete(e),null===(t=S.get(e))||void 0===t||t(),S.delete(e),delete w[e],s(e,E)},hasValue:function(e){return A.has(e)},getValue:function(e,t){var n=A.get(e);return void 0===n&&void 0!==t&&(n=mt(t),F.addValue(e,n)),n},forEachValue:function(e){return A.forEach(e)},readValue:function(e){var n;return null!==(n=w[e])&&void 0!==n?n:u(y,e,t)},setBaseTarget:function(e,t){P[e]=t},getBaseTarget:function(e){if(o){var t=o(p,e);if(void 0!==t&&!vt(t))return t}return P[e]}},k),{build:function(){return T(),E},scheduleRender:function(){J.render(_,!1,!0)},syncRender:_,setProps:function(e){(e.transformTemplate||p.transformTemplate)&&F.scheduleRender(),p=e,k.updatePropListeners(e),C=function(e,t,n){var r;for(var o in t){var a=t[o],i=n[o];if(vt(a))e.addValue(o,a);else if(vt(i))e.addValue(o,mt(a));else if(i!==a)if(e.hasValue(o)){var l=e.getValue(o);!l.hasAnimated&&l.set(a)}else e.addValue(o,mt(null!==(r=e.getStaticValue(o))&&void 0!==r?r:a))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}(F,f(p),C)},getProps:function(){return p},getVariant:function(e){var t;return null===(t=p.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return p.transition},getTransformPagePoint:function(){return p.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==d?void 0:d.getVariantContext();if(!I){var t=(null==d?void 0:d.getVariantContext())||{};return void 0!==p.initial&&(t.initial=p.initial),t}for(var n={},r=0;r<$i;r++){var o=Ui[r],a=p[o];(rt(a)||!1===a)&&(n[o]=a)}return n}});return F}},Ui=j(["initial"],z(vi),!1),$i=Ui.length;function Wi(e){return"string"==typeof e&&e.startsWith("var(--")}var Hi=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Yi(e,t,n){void 0===n&&(n=1),'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.');var r=z(function(e){var t=Hi.exec(e);if(!t)return[,];var n=z(t,3);return[n[1],n[2]]}(e),2),o=r[0],a=r[1];if(o){var i=window.getComputedStyle(t).getPropertyValue(o);return i?i.trim():Wi(a)?Yi(a,t,n+1):a}}var Xi,qi=new Set(["width","height","top","left","right","bottom","x","y"]),Qi=function(e){return qi.has(e)},Gi=function(e,t){e.set(t,!1),e.set(t)},Zi=function(e){return e===Lt||e===$t};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(Xi||(Xi={}));var Ki=function(e,t){return parseFloat(e.split(", ")[t])},Ji=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var a=o.match(/^matrix3d\((.+)\)$/);if(a)return Ki(a[1],t);var i=o.match(/^matrix\((.+)\)$/);return i?Ki(i[1],e):0}},el=new Set(["x","y","z"]),tl=ho.filter((function(e){return!el.has(e)})),nl={width:function(e,t){var n=e.x,r=t.paddingLeft,o=void 0===r?"0":r,a=t.paddingRight,i=void 0===a?"0":a;return n.max-n.min-parseFloat(o)-parseFloat(i)},height:function(e,t){var n=e.y,r=t.paddingTop,o=void 0===r?"0":r,a=t.paddingBottom,i=void 0===a?"0":a;return n.max-n.min-parseFloat(o)-parseFloat(i)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:Ji(4,13),y:Ji(5,14)};function rl(e,t,n,r){return function(e){return Object.keys(e).some(Qi)}(t)?function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=R({},t),r=R({},r);var o=Object.keys(t).filter(Qi),a=[],i=!1,l=[];if(o.forEach((function(o){var u=e.getValue(o);if(e.hasValue(o)){var s,c=n[o],f=li(c),d=t[o];if(Jn(d)){var p=d.length,h=null===d[0]?1:0;c=d[h],f=li(c);for(var m=h;m<p;m++)s?li(d[m]):(s=li(d[m]))===f||Zi(f)&&Zi(s)}else s=li(d);if(f!==s)if(Zi(f)&&Zi(s)){var v=u.get();"string"==typeof v&&u.set(parseFloat(v)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&s===$t&&(t[o]=d.map(parseFloat))}else(null==f?void 0:f.transform)&&(null==s?void 0:s.transform)&&(0===c||0===d)?0===c?u.set(s.transform(c)):t[o]=f.transform(d):(i||(a=function(e){var t=[];return tl.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),i=!0),l.push(o),r[o]=void 0!==r[o]?r[o]:t[o],Gi(u,d))}})),l.length){var u=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),a=getComputedStyle(o),i=a.display,l={};"none"===i&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){l[e]=nl[e](r,a)})),t.syncRender();var u=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);Gi(r,l[n]),e[n]=nl[n](u,a)})),e}(t,e,l);return a.length&&a.forEach((function(t){var n=z(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.syncRender(),{target:u,transitionEnd:r}}return{target:t,transitionEnd:r}}(e,t,n,r):{target:t,transitionEnd:r}}var ol={treeType:"dom",readValueFromInstance:function(e,t){if(go(t)){var n=dr(t);return n&&n.default||0}var r,o=(r=e,window.getComputedStyle(r));return(Zo(t)?o.getPropertyValue(t):o[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return zi(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,r){var o=n.transformValues;void 0===r&&(r=!0);var a=t.transition,i=t.transitionEnd,l=N(t,["transition","transitionEnd"]),u=function(e,t,n){var r,o,a={};for(var i in e)a[i]=null!==(r=fi(i,t))&&void 0!==r?r:null===(o=n.getValue(i))||void 0===o?void 0:o.get();return a}(l,a||{},e);if(o&&(i&&(i=o(i)),l&&(l=o(l)),u&&(u=o(u))),r){!function(e,t,n){var r,o,a,i,l=Object.keys(t).filter((function(t){return!e.hasValue(t)})),u=l.length;if(u)for(var s=0;s<u;s++){var c=l[s],f=t[c],d=null;Array.isArray(f)&&(d=f[0]),null===d&&(d=null!==(o=null!==(r=n[c])&&void 0!==r?r:e.readValue(c))&&void 0!==o?o:t[c]),null!=d&&("string"==typeof d&&(/^\-?\d*\.?\d+$/.test(d)||/^0[^.\s]+$/.test(d))?d=parseFloat(d):!si(d)&&sn.test(f)&&(d=pr(c,f)),e.addValue(c,mt(d)),null!==(a=(i=n)[c])&&void 0!==a||(i[c]=d),e.setBaseTarget(c,d))}}(e,l,u);var s=function(e,t,n,r){var o=function(e,t,n){var r,o=N(t,[]),a=e.getInstance();if(!(a instanceof Element))return{target:o,transitionEnd:n};for(var i in n&&(n=R({},n)),e.forEachValue((function(e){var t=e.get();if(Wi(t)){var n=Yi(t,a);n&&e.set(n)}})),o){var l=o[i];if(Wi(l)){var u=Yi(l,a);u&&(o[i]=u,n&&(null!==(r=n[i])&&void 0!==r||(n[i]=l)))}}return{target:o,transitionEnd:n}}(e,t,r);return rl(e,t=o.target,n,r=o.transitionEnd)}(e,l,u,i);i=s.transitionEnd,l=s.target}return R({transition:a,transitionEnd:i},l)},scrapeMotionValuesFromProps:ya,build:function(e,t,n,r,o){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),Jo(t,n,r,o.transformTemplate)},render:ma},al=Bi(ol),il=Bi(R(R({},ol),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return go(t)?(null===(n=dr(t))||void 0===n?void 0:n.default)||0:(t=va.has(t)?t:ha(t),e.getAttribute(t))},scrapeMotionValuesFromProps:ba,build:function(e,t,n,r,o){sa(t,n,r,o.transformTemplate)},render:ga})),ll=function(e,t){return qo(e)?il(t,{enableHardwareAcceleration:!1}):al(t,{enableHardwareAcceleration:!0})};function ul(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var sl={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!$t.test(e))return e;e=parseFloat(e)}var n=ul(e,t.target.x),r=ul(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},cl="_$css",fl={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,o=e,a=e.includes("var("),i=[];a&&(e=e.replace(Hi,(function(e){return i.push(e),cl})));var l=sn.parse(e);if(l.length>5)return o;var u=sn.createTransformer(e),s="number"!=typeof l[0]?1:0,c=r.x.scale*n.x,f=r.y.scale*n.y;l[0+s]/=c,l[1+s]/=f;var d=st(c,f,.5);"number"==typeof l[2+s]&&(l[2+s]/=d),"number"==typeof l[3+s]&&(l[3+s]/=d);var p=u(l);if(a){var h=0;p=p.replace(cl,(function(){var e=i[h];return h++,e}))}return p}},dl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.componentDidMount=function(){var e,t=this,n=this.props,r=n.visualElement,o=n.layoutGroup,a=n.switchLayoutGroup,i=n.layoutId,l=r.projection;e=pl,Object.assign(so,e),l&&((null==o?void 0:o.group)&&o.group.add(l),(null==a?void 0:a.register)&&i&&a.register(l),l.root.didUpdate(),l.addEventListener("animationComplete",(function(){t.safeToRemove()})),l.setOptions(R(R({},l.options),{onExitComplete:function(){return t.safeToRemove()}}))),ko.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,o=n.visualElement,a=n.drag,i=n.isPresent,l=o.projection;return l?(l.isPresent=i,a||e.layoutDependency!==r||void 0===r?l.willUpdate():this.safeToRemove(),e.isPresent!==i&&(i?l.promote():l.relegate()||J.postRender((function(){var e;(null===(e=l.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,o=t.projection;o&&(o.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(o),(null==r?void 0:r.deregister)&&r.deregister(o))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(e.Component),pl={borderRadius:R(R({},sl),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:sl,borderTopRightRadius:sl,borderBottomLeftRadius:sl,borderBottomRightRadius:sl,boxShadow:fl},hl={measureLayout:function(t){var n=z(ri(),2),r=n[0],o=n[1],a=(0,e.useContext)(ue);return e.createElement(dl,R({},t,{layoutGroup:a,switchLayoutGroup:(0,e.useContext)($o),isPresent:r,safeToRemove:o}))}},ml=Ao({attachResizeListener:function(e,t){return e.addEventListener("resize",t,{passive:!0}),function(){return e.removeEventListener("resize",t)}},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}}}),vl={current:void 0},gl=Ao({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!vl.current){var e=new ml(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),vl.current=e}return vl.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"}}),yl=R(R(R(R({},wi),ni),Vi),hl),bl=Yo((function(e,t){return function(e,t,n,r,o){var a=t.forwardMotionProps,i=void 0!==a&&a,l=qo(e)?Sa:Ca;return R(R({},l),{preloadedFeatures:n,useRender:da(i),createVisualElement:r,projectionNodeConstructor:o,Component:e})}(e,t,yl,ll,gl)}));const xl=function(t){var n=t.state.stage;return e.createElement(bl.div,{className:"p6o-loading",initial:{opacity:1},animate:{opacity:1},transition:{duration:.5},exit:{opacity:0}},e.createElement("div",{className:"p6o-loading-center"},e.createElement("div",null,e.createElement("h1",null,"Loading"),e.createElement("p",{className:"p6o-loading-stage"},t.state.stage),"LOADING_DATA"===n&&e.createElement("p",{className:"p6o-loading-data-details"},t.state.progress," ",t.state.dataset," ",t.state.nodes," Nodes, ",t.state.edges," Edges"),("LOADED"===n||"CLOSE"===n)&&e.createElement("p",{className:"p6o-loading-complete"},t.state.nodes," Nodes, ",t.state.edges," Edges"))),e.createElement("div",{className:"p6o-loading-bottom"},"Peripleo-LaNC v0.1.0"))};function wl(e,t){return e===t}function El(e){return"function"==typeof e?function(){return e}:e}function kl(t,n,r){var o=r&&r.equalityFn||wl,a=function(t){var n=(0,e.useState)(El(t)),r=n[0],o=n[1];return[r,(0,e.useCallback)((function(e){return o(El(e))}),[])]}(t),i=a[0],l=a[1],u=function(t,n,r){var o=this,a=(0,e.useRef)(null),i=(0,e.useRef)(0),l=(0,e.useRef)(null),u=(0,e.useRef)([]),s=(0,e.useRef)(),c=(0,e.useRef)(),f=(0,e.useRef)(t),d=(0,e.useRef)(!0);f.current=t;var p=!n&&0!==n&&"undefined"!=typeof window;if("function"!=typeof t)throw new TypeError("Expected a function");n=+n||0;var h=!!(r=r||{}).leading,m=!("trailing"in r)||!!r.trailing,v="maxWait"in r,g=v?Math.max(+r.maxWait||0,n):null;(0,e.useEffect)((function(){return d.current=!0,function(){d.current=!1}}),[]);var y=(0,e.useMemo)((function(){var e=function(e){var t=u.current,n=s.current;return u.current=s.current=null,i.current=e,c.current=f.current.apply(n,t)},t=function(e,t){p&&cancelAnimationFrame(l.current),l.current=p?requestAnimationFrame(e):setTimeout(e,t)},r=function(e){if(!d.current)return!1;var t=e-a.current,r=e-i.current;return!a.current||t>=n||t<0||v&&r>=g},y=function(t){return l.current=null,m&&u.current?e(t):(u.current=s.current=null,c.current)},b=function(){var e=Date.now();if(r(e))return y(e);if(d.current){var o=e-a.current,l=e-i.current,u=n-o,s=v?Math.min(u,g-l):u;t(b,s)}},x=function(){for(var f=[],p=0;p<arguments.length;p++)f[p]=arguments[p];var m=Date.now(),g=r(m);if(u.current=f,s.current=o,a.current=m,g){if(!l.current&&d.current)return i.current=a.current,t(b,n),h?e(a.current):c.current;if(v)return t(b,n),e(a.current)}return l.current||t(b,n),c.current};return x.cancel=function(){l.current&&(p?cancelAnimationFrame(l.current):clearTimeout(l.current)),i.current=0,u.current=a.current=s.current=l.current=null},x.isPending=function(){return!!l.current},x.flush=function(){return l.current?y(Date.now()):c.current},x}),[h,v,n,g,m,p]);return y}((0,e.useCallback)((function(e){return l(e)}),[l]),n,r),s=(0,e.useRef)(t);return o(s.current,t)||(u(t),s.current=t),[i,u]}var Al={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},Sl=e.createContext&&e.createContext(Al),Cl=function(){return Cl=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Cl.apply(this,arguments)};function Pl(t){return t&&t.map((function(t,n){return e.createElement(t.tag,Cl({key:n},t.attr),Pl(t.child))}))}function _l(t){return function(n){return e.createElement(Tl,Cl({attr:Cl({},t.attr)},n),Pl(t.child))}}function Tl(t){var n=function(n){var r,o=t.attr,a=t.size,i=t.title,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["attr","size","title"]),u=a||n.size||"1em";return n.className&&(r=n.className),t.className&&(r=(r?r+" ":"")+t.className),e.createElement("svg",Cl({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,o,l,{className:r,style:Cl(Cl({color:t.color||n.color},n.style),t.style),height:u,width:u,xmlns:"http://www.w3.org/2000/svg"}),i&&e.createElement("title",null,i),t.children)};return void 0!==Sl?e.createElement(Sl.Consumer,null,(function(e){return n(e)})):n(Al)}function Ml(e){return _l({tag:"svg",attr:{viewBox:"0 0 24 24"},child:[{tag:"path",attr:{d:"M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"}}]})(e)}const Ll=function(t){var n=(0,e.useRef)();return(0,e.useEffect)((function(){n.current&&n.current.querySelector("input").focus()}),[n.current]),e.createElement(bl.div,{ref:n,className:"p6o-hud-searchpanel",transition:{type:"spring",duration:.4},initial:{opacity:0,width:0},animate:{opacity:1,width:340},exit:{opacity:0,width:0}},e.createElement("input",{value:t.query||"",onChange:function(e){return t.onChange(e.target.value)}}))};function Ol(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rl=function(t){var n,r,o=(n=(0,e.useState)(),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Ol(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ol(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];return e.createElement("div",{className:"p6o-hud"},e.createElement("div",{className:"p6o-magic-button",onClick:function(){return i(!a)}},e.createElement(Ml,null)),e.createElement(pe,null,a&&e.createElement(Ll,{query:t.searchQuery,onChange:t.onChangeSearchQuery})))},Nl=e.createContext(null);function zl(e){return{longitude:e.center.lng,latitude:e.center.lat,zoom:e.zoom,pitch:e.pitch,bearing:e.bearing,padding:e.padding}}function jl(e,t){const n=t.viewState||t;let r=!1;if("longitude"in n&&"latitude"in n){const t=e.center;e.center=new t.constructor(n.longitude,n.latitude),r=r||t!==e.center}if("zoom"in n){const t=e.zoom;e.zoom=n.zoom,r=r||t!==e.zoom}if("bearing"in n){const t=e.bearing;e.bearing=n.bearing,r=r||t!==e.bearing}if("pitch"in n){const t=e.pitch;e.pitch=n.pitch,r=r||t!==e.pitch}return n.padding&&!e.isPaddingEqual(n.padding)&&(r=!0,e.padding=n.padding),r}const Dl=["type","source","source-layer","minzoom","maxzoom","filter","layout"];function Il(e){if(!e)return null;if("string"==typeof e)return e;if("toJS"in e&&(e=e.toJS()),!e.layers)return e;const t={};for(const n of e.layers)t[n.id]=n;const n=e.layers.map((e=>{const n=t[e.ref];let r=null;if("interactive"in e&&(r={...e},delete r.interactive),n){r=r||{...e},delete r.ref;for(const e of Dl)e in n&&(r[e]=n[e])}return r||e}));return{...e,layers:n}}function Vl(e,t){if(e===t)return!0;if(!e||!t)return!1;if(Array.isArray(e)){if(!Array.isArray(t)||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!Vl(e[n],t[n]))return!1;return!0}if(Array.isArray(t))return!1;if("object"==typeof e&&"object"==typeof t){const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const r of n){if(!t.hasOwnProperty(r))return!1;if(!Vl(e[r],t[r]))return!1}return!0}return!1}const Fl={mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",click:"onClick",dblclick:"onDblClick",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mouseout:"onMouseOut",contextmenu:"onContextMenu",touchstart:"onTouchStart",touchend:"onTouchEnd",touchmove:"onTouchMove",touchcancel:"onTouchCancel"},Bl={movestart:"onMoveStart",move:"onMove",moveend:"onMoveEnd",dragstart:"onDragStart",drag:"onDrag",dragend:"onDragEnd",zoomstart:"onZoomStart",zoom:"onZoom",zoomend:"onZoomEnd",rotatestart:"onRotateStart",rotate:"onRotate",rotateend:"onRotateEnd",pitchstart:"onPitchStart",pitch:"onPitch",pitchend:"onPitchEnd"},Ul={wheel:"onWheel",boxzoomstart:"onBoxZoomStart",boxzoomend:"onBoxZoomEnd",boxzoomcancel:"onBoxZoomCancel",resize:"onResize",load:"onLoad",render:"onRender",idle:"onIdle",remove:"onRemove",data:"onData",styledata:"onStyleData",sourcedata:"onSourceData",error:"onError"},$l=["minZoom","maxZoom","minPitch","maxPitch","maxBounds","projection","renderWorldCopies"],Wl=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch"];class Hl{constructor(e,t,n){this._map=null,this._internalUpdate=!1,this._inRender=!1,this._hoveredFeatures=null,this._deferredEvents={move:!1,zoom:!1,pitch:!1,rotate:!1},this._onEvent=e=>{const t=this.props[Ul[e.type]];t&&t(e)},this._onPointerEvent=e=>{"mousemove"!==e.type&&"mouseout"!==e.type||this._updateHover(e);const t=this.props[Fl[e.type]];if(t){if(this.props.interactiveLayerIds&&"mouseover"!==e.type&&"mouseout"!==e.type){const t=this._hoveredFeatures||this._map.queryRenderedFeatures(e.point,{layers:this.props.interactiveLayerIds});if(!t.length)return;e.features=t}t(e),delete e.features}},this._onCameraEvent=e=>{if(!this._internalUpdate){const t=this.props[Bl[e.type]];t&&t(e)}e.type in this._deferredEvents&&(this._deferredEvents[e.type]=!1)},this._MapClass=e,this.props=t,this._initialize(n)}get map(){return this._map}get transform(){return this._renderTransform}setProps(e){const t=this.props;this.props=e;const n=this._updateSettings(e,t);n&&(this._renderTransform=this._map.transform.clone());const r=this._updateSize(e),o=this._updateViewState(e,!0);this._updateStyle(e,t),this._updateStyleComponents(e,t),this._updateHandlers(e,t),(n||r||o&&!this._map.isMoving())&&this.redraw()}static reuse(e,t){const n=Hl.savedMaps.pop();if(!n)return null;const r=n.map,o=r.getContainer();for(t.className=o.className;o.childNodes.length>0;)t.appendChild(o.childNodes[0]);return r._container=t,e.initialViewState&&n._updateViewState(e.initialViewState,!1),r.resize(),n.setProps({...e,styleDiffing:!1}),r.isStyleLoaded()?r.fire("load"):r.once("styledata",(()=>r.fire("load"))),n}_initialize(e){const{props:t}=this,n={...t,...t.initialViewState,accessToken:t.mapboxAccessToken||Yl()||null,container:e,style:Il(t.mapStyle)},r=n.initialViewState||n.viewState||n;if(Object.assign(n,{center:[r.longitude||0,r.latitude||0],zoom:r.zoom||0,pitch:r.pitch||0,bearing:r.bearing||0}),t.gl){const e=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=()=>(HTMLCanvasElement.prototype.getContext=e,t.gl)}const o=new this._MapClass(n);r.padding&&o.setPadding(r.padding),t.cursor&&(o.getCanvas().style.cursor=t.cursor),this._renderTransform=o.transform.clone();const a=o._render;o._render=e=>{this._inRender=!0,a.call(o,e),this._inRender=!1};const i=o._renderTaskQueue.run;o._renderTaskQueue.run=e=>{i.call(o._renderTaskQueue,e),this._onBeforeRepaint()},o.on("render",(()=>this._onAfterRepaint()));const l=o.fire;o.fire=this._fireEvent.bind(this,l),o.on("resize",(()=>{this._renderTransform.resize(o.transform.width,o.transform.height)})),o.on("styledata",(()=>this._updateStyleComponents(this.props,{}))),o.on("sourcedata",(()=>this._updateStyleComponents(this.props,{})));for(const e in Fl)o.on(e,this._onPointerEvent);for(const e in Bl)o.on(e,this._onCameraEvent);for(const e in Ul)o.on(e,this._onEvent);this._map=o}recycle(){Hl.savedMaps.push(this)}destroy(){this._map.remove()}redraw(){const e=this._map;!this._inRender&&e.style&&(e._frame&&(e._frame.cancel(),e._frame=null),e._render())}_updateSize(e){const{viewState:t}=e;if(t){const e=this._map;if(t.width!==e.transform.width||t.height!==e.transform.height)return e.resize(),!0}return!1}_updateViewState(e,t){if(this._internalUpdate)return!1;const n=this._map,r=this._renderTransform,{zoom:o,pitch:a,bearing:i}=r,l=jl(r,{...zl(n.transform),...e});if(l&&t){const e=this._deferredEvents;e.move=!0,e.zoom||(e.zoom=o!==r.zoom),e.rotate||(e.rotate=i!==r.bearing),e.pitch||(e.pitch=a!==r.pitch)}return n.isMoving()||jl(n.transform,e),l}_updateSettings(e,t){const n=this._map;let r=!1;for(const o of $l)o in e&&!Vl(e[o],t[o])&&(r=!0,n[`set${o[0].toUpperCase()}${o.slice(1)}`](e[o]));return r}_updateStyle(e,t){if(e.cursor!==t.cursor&&(this._map.getCanvas().style.cursor=e.cursor),e.mapStyle!==t.mapStyle){const t={diff:e.styleDiffing};return"localIdeographFontFamily"in e&&(t.localIdeographFontFamily=e.localIdeographFontFamily),this._map.setStyle(Il(e.mapStyle),t),!0}return!1}_updateStyleComponents(e,t){const n=this._map;let r=!1;return n.style.loaded()&&("light"in e&&!Vl(e.light,t.light)&&(r=!0,n.setLight(e.light)),"fog"in e&&!Vl(e.fog,t.fog)&&(r=!0,n.setFog(e.fog)),"terrain"in e&&!Vl(e.terrain,t.terrain)&&(e.terrain&&!n.getSource(e.terrain.source)||(r=!0,n.setTerrain(e.terrain)))),r}_updateHandlers(e,t){const n=this._map;let r=!1;for(const o of Wl){const a=e[o];Vl(a,t[o])||(r=!0,a?n[o].enable(a):n[o].disable())}return r}_updateHover(e){const{props:t}=this;if(t.interactiveLayerIds&&(t.onMouseMove||t.onMouseEnter||t.onMouseLeave)){const n=e.type,r=this._hoveredFeatures?.length>0;let o;if("mousemove"===n)try{o=this._map.queryRenderedFeatures(e.point,{layers:t.interactiveLayerIds})}catch{o=[]}else o=[];const a=o.length>0;!a&&r&&(e.type="mouseleave",this._onPointerEvent(e)),this._hoveredFeatures=o,a&&!r&&(e.type="mouseenter",this._onPointerEvent(e)),e.type=n}else this._hoveredFeatures=null}_fireEvent(e,t,n){const r=this._map,o=r.transform,a="string"==typeof t?t:t.type;return"move"===a&&this._updateViewState(this.props,!1),a in Bl&&("object"==typeof t&&(t.viewState=zl(o)),this._map.isMoving())?(r.transform=this._renderTransform,e.call(r,t,n),r.transform=o,r):(e.call(r,t,n),r)}_onBeforeRepaint(){const e=this._map;this._internalUpdate=!0;for(const t in this._deferredEvents)this._deferredEvents[t]&&e.fire(t);this._internalUpdate=!1;const t=this._map.transform;this._map.transform=this._renderTransform,this._onAfterRepaint=()=>{this._map.transform=t}}}function Yl(){let e=null;if("undefined"!=typeof location){const t=/access_token=([^&\/]*)/.exec(location.search);e=t&&t[1]}try{e=e||process.env.MapboxAccessToken}catch{}try{e=e||process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}catch{}return e}Hl.savedMaps=[];const Xl=["setMaxBounds","setMinZoom","setMaxZoom","setMinPitch","setMaxPitch","setRenderWorldCopies","setProjection","setStyle","addSource","removeSource","addLayer","removeLayer","setLayerZoomRange","setFilter","setPaintProperty","setLayoutProperty","setLight","setTerrain","setFog","remove"];function ql(e,t){if(!e)return null;const n=e.map,r={getMap:()=>n,getCenter:()=>e.transform.center,getZoom:()=>e.transform.zoom,getBearing:()=>e.transform.bearing,getPitch:()=>e.transform.pitch,getPadding:()=>e.transform.padding,getBounds:()=>e.transform.getBounds(),project:n=>e.transform.locationPoint(t.LngLat.convert(n)),unproject:n=>e.transform.pointLocation(t.Point.convert(n))};for(const e of function(e){const t=new Set;let n=e;for(;n;){for(const r of Object.getOwnPropertyNames(n))"_"!==r[0]&&"function"==typeof e[r]&&"fire"!==r&&"setEventedParent"!==r&&t.add(r);n=Object.getPrototypeOf(n)}return Array.from(t)}(n))e in r||Xl.includes(e)||(r[e]=n[e].bind(n));return r}const Ql="undefined"!=typeof document?e.useLayoutEffect:e.useEffect,Gl=["baseApiUrl","maxParallelImageRequests","workerClass","workerCount","workerUrl"],Zl=e.createContext(null),Kl={minZoom:0,maxZoom:22,minPitch:0,maxPitch:60,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,mapStyle:{version:8,sources:{},layers:[]},styleDiffing:!0,projection:"mercator",renderWorldCopies:!0,onError:e=>console.error(e.error),RTLTextPlugin:"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js"},Jl=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useContext)(Nl),[o,a]=(0,e.useState)(null),l=(0,e.useRef)(),{current:u}=(0,e.useRef)({mapLib:null,map:null});(0,e.useEffect)((()=>{const e=t.mapLib;let n,o=!0;return Promise.resolve(e||i.e(613).then(i.t.bind(i,613,23))).then((e=>{if(o){if(e.Map||(e=e.default),!e||!e.Map)throw new Error("Invalid mapLib");if(!e.supported(t))throw new Error("Map is not supported by this browser");!function(e,t){for(const n of Gl)n in t&&(e[n]=t[n]);t.RTLTextPlugin&&e.getRTLTextPluginStatus&&"unavailable"===e.getRTLTextPluginStatus()&&e.setRTLTextPlugin(t.RTLTextPlugin,(e=>{e&&console.error(e)}),!1)}(e,t),t.reuseMaps&&(n=Hl.reuse(t,l.current)),n||(n=new Hl(e.Map,t,l.current)),u.map=n.map,u.mapLib=e,a(n),r?.onMapMount(ql(n,e),t.id)}})).catch((e=>{t.onError({type:"error",target:null,originalEvent:null,error:e})})),()=>{o=!1,n&&(r?.onMapUnmount(t.id),t.reuseMaps?n.recycle():n.destroy())}}),[]),Ql((()=>{o&&o.setProps(t)})),(0,e.useImperativeHandle)(n,(()=>ql(o,u.mapLib)),[o]);const s=(0,e.useMemo)((()=>({position:"relative",width:"100%",height:"100%",...t.style})),[t.style]);return e.createElement("div",{id:t.id,ref:l,style:s},o&&e.createElement(Zl.Provider,{value:u},t.children))}));Jl.displayName="Map",Jl.defaultProps=Kl;const eu=Jl,tu=/box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;function nu(e,t){if(!e||!t)return;const n=e.style;for(const e in t){const r=t[e];Number.isFinite(r)&&!tu.test(e)?n[e]=`${r}px`:n[e]=r}}function ru(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),a=(0,e.useRef)({props:n});a.current.props=n;const i=(0,e.useMemo)((()=>{let t=!1;e.Children.forEach(n.children,(e=>{e&&(t=!0)}));const r={...n,element:t?document.createElement("div"):null},l=new o.Marker(r).setLngLat([n.longitude,n.latitude]);return l.on("dragstart",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDragStart?.(t)})),l.on("drag",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDrag?.(t)})),l.on("dragend",(e=>{const t=e;t.lngLat=i.getLngLat(),a.current.props.onDragEnd?.(t)})),l}),[]);return(0,e.useEffect)((()=>(i.addTo(r),()=>{i.remove()})),[]),(0,e.useEffect)((()=>{nu(i.getElement(),n.style)}),[n.style]),i.getLngLat().lng===n.longitude&&i.getLngLat().lat===n.latitude||i.setLngLat([n.longitude,n.latitude]),n.offset&&!function(e,t){const n=Array.isArray(e)?e[0]:e?e.x:0,r=Array.isArray(e)?e[1]:e?e.y:0,o=Array.isArray(t)?t[0]:t?t.x:0,a=Array.isArray(t)?t[1]:t?t.y:0;return n===o&&r===a}(i.getOffset(),n.offset)&&i.setOffset(n.offset),i.isDraggable()!==n.draggable&&i.setDraggable(n.draggable),i.getRotation()!==n.rotation&&i.setRotation(n.rotation),i.getRotationAlignment()!==n.rotationAlignment&&i.setRotationAlignment(n.rotationAlignment),i.getPitchAlignment()!==n.pitchAlignment&&i.setPitchAlignment(n.pitchAlignment),i.getPopup()!==n.popup&&i.setPopup(n.popup),(0,t.createPortal)(n.children,i.getElement())}function ou(e){return new Set(e?e.trim().split(/\s+/):[])}function au(t,n,r){const o=(0,e.useContext)(Zl),a=(0,e.useMemo)((()=>t(o)),[]);return(0,e.useEffect)((()=>{const{map:e}=o;return e.hasControl(a)||e.addControl(a,(r||n)?.position),()=>{"function"==typeof n&&n(o),e.hasControl(a)&&e.removeControl(a)}}),[]),a}ru.defaultProps={draggable:!1,popup:null,rotation:0,rotationAlignment:"auto",pitchAlignment:"auto"},e.memo(ru),e.memo((function(n){const{map:r,mapLib:o}=(0,e.useContext)(Zl),a=(0,e.useMemo)((()=>document.createElement("div")),[]),i=(0,e.useRef)({props:n});i.current.props=n;const l=(0,e.useMemo)((()=>{const e={...n},t=new o.Popup(e).setLngLat([n.longitude,n.latitude]);return t.on("open",(e=>{i.current.props.onOpen?.(e)})),t.on("close",(e=>{i.current.props.onClose?.(e)})),t}),[]);if((0,e.useEffect)((()=>(l.setDOMContent(a).addTo(r),()=>{l.isOpen()&&l.remove()})),[]),(0,e.useEffect)((()=>{nu(l.getElement(),n.style)}),[n.style]),l.isOpen()&&(l.getLngLat().lng===n.longitude&&l.getLngLat().lat===n.latitude||l.setLngLat([n.longitude,n.latitude]),n.offset&&!Vl(l.options.offset,n.offset)&&l.setOffset(n.offset),l.options.anchor===n.anchor&&l.options.maxWidth===n.maxWidth||(l.options.anchor=n.anchor,l.setMaxWidth(n.maxWidth)),l.options.className!==n.className)){const e=ou(l.options.className),t=ou(n.className);for(const n of e)t.has(n)||l.removeClassName(n);for(const n of t)e.has(n)||l.addClassName(n);l.options.className=n.className}return(0,t.createPortal)(n.children,a)})),e.memo((function(t){const n=au((({mapLib:e})=>new e.AttributionControl(t)),{position:t.position});return(0,e.useEffect)((()=>{nu(n._container,t.style)}),[t.style]),null})),e.memo((function(t){const n=au((({mapLib:e})=>new e.FullscreenControl({container:t.containerId&&document.getElementById(t.containerId)})),{position:t.position});return(0,e.useEffect)((()=>{nu(n._controlContainer,t.style)}),[t.style]),null}));const iu=(0,e.forwardRef)(((t,n)=>{const r=(0,e.useRef)({props:t}),o=au((({mapLib:e})=>{const n=new e.GeolocateControl(t);return n.on("geolocate",(e=>{r.current.props.onGeolocate?.(e)})),n.on("error",(e=>{r.current.props.onError?.(e)})),n.on("outofmaxbounds",(e=>{r.current.props.onOutOfMaxBounds?.(e)})),n.on("trackuserlocationstart",(e=>{r.current.props.onTrackUserLocationStart?.(e)})),n.on("trackuserlocationend",(e=>{r.current.props.onTrackUserLocationEnd?.(e)})),n}),{position:t.position});return r.current.props=t,(0,e.useImperativeHandle)(n,(()=>({trigger:()=>o.trigger()})),[]),(0,e.useEffect)((()=>{nu(o._container,t.style)}),[t.style]),null}));function lu(t){const n=au((({mapLib:e})=>new e.ScaleControl(t)),{position:t.position});return n.options.unit===t.unit&&n.options.maxWidth===t.maxWidth||(n.options.maxWidth=t.maxWidth,n.setUnit(t.unit)),(0,e.useEffect)((()=>{nu(n._container,t.style)}),[t.style]),null}function uu(e,t){if(!e)throw new Error(t)}iu.displayName="GeolocateControl",e.memo(iu),e.memo((function(t){const n=au((({mapLib:e})=>new e.NavigationControl(t)),{position:t.position});return(0,e.useEffect)((()=>{nu(n._container,t.style)}),[t.style]),null})),lu.defaultProps={unit:"metric",maxWidth:100},e.memo(lu);let su=0;const cu=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),a=(0,e.useMemo)((()=>t.id||"jsx-source-"+su++),[]);(0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),setTimeout((()=>{n.style&&n.style._loaded&&n.getSource(a)&&n.removeSource(a)}),0)}}}),[n]);let i=n&&n.style&&n.getSource(a);return i?function(e,t,n){uu(t.id===n.id,"source id changed"),uu(t.type===n.type,"source type changed");let r="",o=0;for(const e in t)"children"===e||"id"===e||Vl(n[e],t[e])||(r=e,o++);if(!o)return;const a=t.type;if("geojson"===a)e.setData(t.data);else if("image"===a)e.updateImage({url:t.url,coordinates:t.coordinates});else if("canvas"!==a&&"video"!==a||1!==o||"coordinates"!==r)if("vector"===a&&"setUrl"in e)switch(r){case"url":e.setUrl(t.url);break;case"tiles":e.setTiles(t.tiles)}else console.warn(`Unable to update <Source> prop: ${r}`);else e.setCoordinates(t.coordinates)}(i,t,r.current):i=function(e,t,n){if(e.style&&e.style._loaded){const r={...n};return delete r.id,delete r.children,e.addSource(t,r),e.getSource(t)}return null}(n,a,t),r.current=t,i&&e.Children.map(t.children,(t=>t&&(0,e.cloneElement)(t,{source:a})))||null};let fu=0;const du=function(t){const{map:n}=(0,e.useContext)(Zl),r=(0,e.useRef)(t),[,o]=(0,e.useState)(0),a=(0,e.useMemo)((()=>t.id||"jsx-layer-"+fu++),[]);if((0,e.useEffect)((()=>{if(n){const e=()=>o((e=>e+1));return n.on("styledata",e),e(),()=>{n.off("styledata",e),n.style&&n.style._loaded&&n.removeLayer(a)}}}),[n]),n&&n.style&&n.getLayer(a))try{!function(e,t,n,r){if(uu(n.id===r.id,"layer id changed"),uu(n.type===r.type,"layer type changed"),"custom"===n.type||"custom"===r.type)return;const{layout:o={},paint:a={},filter:i,minzoom:l,maxzoom:u,beforeId:s}=n;if(s!==r.beforeId&&e.moveLayer(t,s),o!==r.layout){const n=r.layout||{};for(const r in o)Vl(o[r],n[r])||e.setLayoutProperty(t,r,o[r]);for(const r in n)o.hasOwnProperty(r)||e.setLayoutProperty(t,r,void 0)}if(a!==r.paint){const n=r.paint||{};for(const r in a)Vl(a[r],n[r])||e.setPaintProperty(t,r,a[r]);for(const r in n)a.hasOwnProperty(r)||e.setPaintProperty(t,r,void 0)}Vl(i,r.filter)||e.setFilter(t,i),l===r.minzoom&&u===r.maxzoom||e.setLayerZoomRange(t,l,u)}(n,a,t,r.current)}catch(e){console.warn(e)}else!function(e,t,n){if(e.style&&e.style._loaded&&e.getSource(n.source)){const r={...n,id:t};delete r.beforeId,e.addLayer(r,n.beforeId)}}(n,a,t);return r.current=t,null};var pu=[15,15];const hu=function(t){var n=t.node;return e.createElement("div",{className:"p6o-map-hover",style:{left:t.x+pu[0],top:t.y+pu[1]}},n.title)};function mu(){return mu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mu.apply(this,arguments)}function vu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vu(Object(n),!0).forEach((function(t){yu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function yu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var wu=e.forwardRef((function(t,n){var r=(0,e.useContext)(Ve).store,o=t.config,a=bu((0,e.useState)(),2),i=a[0],l=a[1],u=bu(kl(i,500),1)[0],s=bu((0,e.useState)(),2),c=s[0],f=s[1],d="https://api.maptiler.com/maps/outdoor/style.json?key=".concat(o.api_key);(0,e.useEffect)((function(){console.log("Initial map render!")}),[]),(0,e.useEffect)((function(){}),[u]),(0,e.useEffect)((function(){c?n.current.classList.add("hover"):n.current.classList.remove("hover")}),[c]);var p,h,m=(0,e.useCallback)((function(e){return l(e.viewState)}),[]),v=(0,e.useCallback)((function(e){var t=e.features,n=e.point,o=t[0].properties.id,a=o===(null==c?void 0:c.id)?gu(gu({},c),n):gu({node:r.getNode(o)},n);f(a)}),[]);return e.createElement("div",{className:"p6o-map-container",ref:n},e.createElement(eu,{initialViewState:{bounds:o.initial_bounds},mapStyle:d,interactiveLayerIds:["search-results"],onLoad:t.onLoad,onMove:m,onClick:function(){if(c){var e=c.node;console.log("clicked",c),history.pushState(e,e.title,"#/".concat(encodeURIComponent(e.id)))}},onMouseMove:v,onMouseLeave:function(){return f(null)}},e.createElement(cu,{type:"geojson",data:(h=t.searchResults,{type:"FeatureCollection",features:h||[]})},e.createElement(du,mu({id:"search-results"},{type:"circle",paint:{"circle-radius":(null==(p={fill:"red",radius:5})?void 0:p.radius)||4,"circle-color":(null==p?void 0:p.fill)||"#fff","circle-stroke-color":(null==p?void 0:p.stroke)||"#000","circle-stroke-width":(null==p?void 0:p.strokeWidth)||1}})))),t.children,c&&e.createElement(hu,c))}));const Eu=wu;function ku(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Au(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Au(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Au(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Su=function(t){var n=(0,e.useRef)(),r=(0,e.useContext)(Ve).store,o=ku((0,e.useState)(),2),a=o[0],i=o[1],l=ku(kl(a,250),1)[0],u=ku((0,e.useState)(),2),s=u[0],c=u[1];return(0,e.useEffect)((function(){n.current&&n.current.classList.add("loading")}),[n.current]),(0,e.useEffect)((function(){c(r.getNodesInBounds(t.config.initial_bounds))}),[t.dataAvailable]),(0,e.useEffect)((function(){n.current.classList.remove("loading")}),[t.loaded]),(0,e.useEffect)((function(){c(l?r.searchMappable(l):r.getNodesInBounds(t.config.initial_bounds))}),[l]),e.createElement(Eu,{ref:n,config:t.config,searchResults:s,onLoad:t.onMapLoaded},e.createElement(Rl,{config:t.config,searchQuery:a,onChangeSearchQuery:i}))};function Cu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Cu(Object(n),!0).forEach((function(t){_u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Cu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Tu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Mu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Mu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Lu=function(t){var n=function(){let{matches:t}=(0,e.useContext)(p),n=t[t.length-1];return n?n.params:{}}().recordId,r=(0,e.useContext)(Ve).store,o=Tu((0,e.useState)(),2),a=o[0],i=o[1],l=Tu((0,e.useState)({stage:"LOADING_CONFIG"}),2),u=l[0],s=l[1],c=function(e){i(e),s({stage:"LOADING_DATA"})};return(0,e.useEffect)((function(){fetch("peripleo.config.json").then((function(e){return e.json()})).then(c).catch((function(){s({stage:"ERROR",cause:"NO_CONFIG"}),console.error("Error loading Peripleo config. Please add a valid `peripleo.config.json` to your application root.")}))}),[]),(0,e.useEffect)((function(){"LOADED"===u.stage&&setTimeout((function(){return s(Pu(Pu({},u),{},{stage:"CLOSE"}))}),2e3)}),[u]),e.createElement(e.Fragment,null,e.createElement(pe,null,"CLOSE"!==u.stage&&e.createElement(xl,{state:u,config:a})),a&&e.createElement(Su,{config:a,dataAvailable:"LOADED"===u.stage||"CLOSE"===u.stage,loaded:"CLOSE"===u.stage,initialRecord:n,onMapLoaded:function(){var e=a.data;!(null!=e&&e.length)>0?s({stage:"ERROR",cause:"NO_DATA"}):e.reduce((function(t,n){var o=n.name,a=e.indexOf(n);return t.then((function(){return s({stage:"LOADING_DATA",dataset:o,progress:a/e.length,nodes:r.countNodes(),edges:r.countEdges()}),r.loadDataset(n)}))}),Promise.resolve()).then((function(){s({stage:"LOADED",nodes:r.countNodes(),edges:r.countEdges(),progress:1})}))}}))};var Ou=i(379),Ru=i.n(Ou),Nu=i(795),zu=i.n(Nu),ju=i(569),Du=i.n(ju),Iu=i(565),Vu=i.n(Iu),Fu=i(216),Bu=i.n(Fu),Uu=i(589),$u=i.n(Uu),Wu=i(800),Hu={};Hu.styleTagTransform=$u(),Hu.setAttributes=Vu(),Hu.insert=Du().bind(null,"head"),Hu.domAPI=zu(),Hu.insertStyleElement=Bu(),Ru()(Wu.Z,Hu),Wu.Z&&Wu.Z.locals&&Wu.Z.locals,t.render(e.createElement(Fe,null,e.createElement(M,null,e.createElement(g,null,e.createElement(m,null,e.createElement(m,{path:":recordId",element:e.createElement(Lu,null)}),e.createElement(m,{path:"/",element:e.createElement(Lu,null)}))))),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,